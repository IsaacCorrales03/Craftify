{
  "version": 3,
  "sources": ["../../xterm/lib/webpack:/xterm/webpack/universalModuleDefinition", "../../xterm/lib/webpack:/xterm/src/browser/AccessibilityManager.ts", "../../xterm/lib/webpack:/xterm/src/browser/Clipboard.ts", "../../xterm/lib/webpack:/xterm/src/browser/ColorContrastCache.ts", "../../xterm/lib/webpack:/xterm/src/browser/Lifecycle.ts", "../../xterm/lib/webpack:/xterm/src/browser/Linkifier2.ts", "../../xterm/lib/webpack:/xterm/src/browser/LocalizableStrings.ts", "../../xterm/lib/webpack:/xterm/src/browser/OscLinkProvider.ts", "../../xterm/lib/webpack:/xterm/src/browser/RenderDebouncer.ts", "../../xterm/lib/webpack:/xterm/src/browser/ScreenDprMonitor.ts", "../../xterm/lib/webpack:/xterm/src/browser/Terminal.ts", "../../xterm/lib/webpack:/xterm/src/browser/TimeBasedDebouncer.ts", "../../xterm/lib/webpack:/xterm/src/browser/Viewport.ts", "../../xterm/lib/webpack:/xterm/src/browser/decorations/BufferDecorationRenderer.ts", "../../xterm/lib/webpack:/xterm/src/browser/decorations/ColorZoneStore.ts", "../../xterm/lib/webpack:/xterm/src/browser/decorations/OverviewRulerRenderer.ts", "../../xterm/lib/webpack:/xterm/src/browser/input/CompositionHelper.ts", "../../xterm/lib/webpack:/xterm/src/browser/input/Mouse.ts", "../../xterm/lib/webpack:/xterm/src/browser/input/MoveToCell.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRenderer.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/dom/WidthCache.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/shared/Constants.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/shared/RendererUtils.ts", "../../xterm/lib/webpack:/xterm/src/browser/selection/SelectionModel.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/CharSizeService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/CharacterJoinerService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/CoreBrowserService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/MouseService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/RenderService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/SelectionService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/Services.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/ThemeService.ts", "../../xterm/lib/webpack:/xterm/src/common/CircularList.ts", "../../xterm/lib/webpack:/xterm/src/common/Clone.ts", "../../xterm/lib/webpack:/xterm/src/common/Color.ts", "../../xterm/lib/webpack:/xterm/src/common/CoreTerminal.ts", "../../xterm/lib/webpack:/xterm/src/common/EventEmitter.ts", "../../xterm/lib/webpack:/xterm/src/common/InputHandler.ts", "../../xterm/lib/webpack:/xterm/src/common/Lifecycle.ts", "../../xterm/lib/webpack:/xterm/src/common/MultiKeyMap.ts", "../../xterm/lib/webpack:/xterm/src/common/Platform.ts", "../../xterm/lib/webpack:/xterm/src/common/SortedList.ts", "../../xterm/lib/webpack:/xterm/src/common/TaskQueue.ts", "../../xterm/lib/webpack:/xterm/src/common/WindowsMode.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/AttributeData.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/Buffer.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/BufferLine.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/BufferRange.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/BufferReflow.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/BufferSet.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/CellData.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/Constants.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/Marker.ts", "../../xterm/lib/webpack:/xterm/src/common/data/Charsets.ts", "../../xterm/lib/webpack:/xterm/src/common/data/EscapeSequences.ts", "../../xterm/lib/webpack:/xterm/src/common/input/Keyboard.ts", "../../xterm/lib/webpack:/xterm/src/common/input/TextDecoder.ts", "../../xterm/lib/webpack:/xterm/src/common/input/UnicodeV6.ts", "../../xterm/lib/webpack:/xterm/src/common/input/WriteBuffer.ts", "../../xterm/lib/webpack:/xterm/src/common/input/XParseColor.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/Constants.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/DcsParser.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/EscapeSequenceParser.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/OscParser.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/Params.ts", "../../xterm/lib/webpack:/xterm/src/common/public/AddonManager.ts", "../../xterm/lib/webpack:/xterm/src/common/public/BufferApiView.ts", "../../xterm/lib/webpack:/xterm/src/common/public/BufferLineApiView.ts", "../../xterm/lib/webpack:/xterm/src/common/public/BufferNamespaceApi.ts", "../../xterm/lib/webpack:/xterm/src/common/public/ParserApi.ts", "../../xterm/lib/webpack:/xterm/src/common/public/UnicodeApi.ts", "../../xterm/lib/webpack:/xterm/src/common/services/BufferService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/CharsetService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/CoreMouseService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/CoreService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/DecorationService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/InstantiationService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/LogService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/OptionsService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/OscLinkService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/ServiceRegistry.ts", "../../xterm/lib/webpack:/xterm/src/common/services/Services.ts", "../../xterm/lib/webpack:/xterm/src/common/services/UnicodeService.ts", "../../xterm/lib/webpack:/xterm/webpack/bootstrap", "../../xterm/lib/webpack:/xterm/src/browser/public/Terminal.ts"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { ITerminal, IRenderDebouncer } from 'browser/Types';\nimport { isMac } from 'common/Platform';\nimport { TimeBasedDebouncer } from 'browser/TimeBasedDebouncer';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderService } from 'browser/services/Services';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IBuffer } from 'common/buffer/Types';\n\nconst MAX_ROWS_TO_READ = 20;\n\nconst enum BoundaryPosition {\n  TOP,\n  BOTTOM\n}\n\nexport class AccessibilityManager extends Disposable {\n  private _accessibilityContainer: HTMLElement;\n\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[];\n\n  private _liveRegion: HTMLElement;\n  private _liveRegionLineCount: number = 0;\n  private _liveRegionDebouncer: IRenderDebouncer;\n\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\n\n  /**\n   * This queue has a character pushed to it for keys that are pressed, if the\n   * next character added to the terminal is equal to the key char then it is\n   * not announced (added to live region) because it has already been announced\n   * by the textarea event (which cannot be canceled). There are some race\n   * condition cases if there is typing while data is streaming, but this covers\n   * the main case of typing into the prompt and inputting the answer to a\n   * question (Y/N, etc.).\n   */\n  private _charsToConsume: string[] = [];\n\n  private _charsToAnnounce: string = '';\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n    this._accessibilityContainer = document.createElement('div');\n    this._accessibilityContainer.classList.add('xterm-accessibility');\n\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.setAttribute('role', 'list');\n    this._rowContainer.classList.add('xterm-accessibility-tree');\n    this._rowElements = [];\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n\n    this._topBoundaryFocusListener = e => this._handleBoundaryFocus(e, BoundaryPosition.TOP);\n    this._bottomBoundaryFocusListener = e => this._handleBoundaryFocus(e, BoundaryPosition.BOTTOM);\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n    this._accessibilityContainer.appendChild(this._rowContainer);\n\n    this._liveRegion = document.createElement('div');\n    this._liveRegion.classList.add('live-region');\n    this._liveRegion.setAttribute('aria-live', 'assertive');\n    this._accessibilityContainer.appendChild(this._liveRegion);\n    this._liveRegionDebouncer = this.register(new TimeBasedDebouncer(this._renderRows.bind(this)));\n\n    if (!this._terminal.element) {\n      throw new Error('Cannot enable accessibility before Terminal.open');\n    }\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityContainer);\n\n    this.register(this._terminal.onResize(e => this._handleResize(e.rows)));\n    this.register(this._terminal.onRender(e => this._refreshRows(e.start, e.end)));\n    this.register(this._terminal.onScroll(() => this._refreshRows()));\n    // Line feed is an issue as the prompt won't be read out after a command is run\n    this.register(this._terminal.onA11yChar(char => this._handleChar(char)));\n    this.register(this._terminal.onLineFeed(() => this._handleChar('\\n')));\n    this.register(this._terminal.onA11yTab(spaceCount => this._handleTab(spaceCount)));\n    this.register(this._terminal.onKey(e => this._handleKey(e.key)));\n    this.register(this._terminal.onBlur(() => this._clearLiveRegion()));\n    this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions()));\n\n    this._screenDprMonitor = new ScreenDprMonitor(window);\n    this.register(this._screenDprMonitor);\n    this._screenDprMonitor.setListener(() => this._refreshRowsDimensions());\n    // This shouldn't be needed on modern browsers but is present in case the\n    // media query that drives the ScreenDprMonitor isn't supported\n    this.register(addDisposableDomListener(window, 'resize', () => this._refreshRowsDimensions()));\n\n    this._refreshRows();\n    this.register(toDisposable(() => {\n      this._accessibilityContainer.remove();\n      this._rowElements.length = 0;\n    }));\n  }\n\n  private _handleTab(spaceCount: number): void {\n    for (let i = 0; i < spaceCount; i++) {\n      this._handleChar(' ');\n    }\n  }\n\n  private _handleChar(char: string): void {\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n      if (this._charsToConsume.length > 0) {\n        // Have the screen reader ignore the char if it was just input\n        const shiftedChar = this._charsToConsume.shift();\n        if (shiftedChar !== char) {\n          this._charsToAnnounce += char;\n        }\n      } else {\n        this._charsToAnnounce += char;\n      }\n\n      if (char === '\\n') {\n        this._liveRegionLineCount++;\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n          this._liveRegion.textContent += Strings.tooMuchOutput;\n        }\n      }\n\n      // Only detach/attach on mac as otherwise messages can go unaccounced\n      if (isMac) {\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n          setTimeout(() => {\n            this._accessibilityContainer.appendChild(this._liveRegion);\n          }, 0);\n        }\n      }\n    }\n  }\n\n  private _clearLiveRegion(): void {\n    this._liveRegion.textContent = '';\n    this._liveRegionLineCount = 0;\n\n    // Only detach/attach on mac as otherwise messages can go unaccounced\n    if (isMac) {\n      this._liveRegion.remove();\n    }\n  }\n\n  private _handleKey(keyChar: string): void {\n    this._clearLiveRegion();\n    // Only add the char if there is no control character.\n    if (!/\\p{Control}/u.test(keyChar)) {\n      this._charsToConsume.push(keyChar);\n    }\n  }\n\n  private _refreshRows(start?: number, end?: number): void {\n    this._liveRegionDebouncer.refresh(start, end, this._terminal.rows);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    const buffer: IBuffer = this._terminal.buffer;\n    const setSize = buffer.lines.length.toString();\n    for (let i = start; i <= end; i++) {\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n      const posInSet = (buffer.ydisp + i + 1).toString();\n      const element = this._rowElements[i];\n      if (element) {\n        if (lineData.length === 0) {\n          element.innerText = '\\u00a0';\n        } else {\n          element.textContent = lineData;\n        }\n        element.setAttribute('aria-posinset', posInSet);\n        element.setAttribute('aria-setsize', setSize);\n      }\n    }\n    this._announceCharacters();\n  }\n\n  private _announceCharacters(): void {\n    if (this._charsToAnnounce.length === 0) {\n      return;\n    }\n    this._liveRegion.textContent += this._charsToAnnounce;\n    this._charsToAnnounce = '';\n  }\n\n  private _handleBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\n    const boundaryElement = e.target as HTMLElement;\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\n\n    // Don't scroll if the buffer top has reached the end in that direction\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\n    if (posInSet === lastRowPos) {\n      return;\n    }\n\n    // Don't scroll when the last focused item was not the second row (focus is going the other\n    // direction)\n    if (e.relatedTarget !== beforeBoundaryElement) {\n      return;\n    }\n\n    // Remove old boundary element from array\n    let topBoundaryElement: HTMLElement;\n    let bottomBoundaryElement: HTMLElement;\n    if (position === BoundaryPosition.TOP) {\n      topBoundaryElement = boundaryElement;\n      bottomBoundaryElement = this._rowElements.pop()!;\n      this._rowContainer.removeChild(bottomBoundaryElement);\n    } else {\n      topBoundaryElement = this._rowElements.shift()!;\n      bottomBoundaryElement = boundaryElement;\n      this._rowContainer.removeChild(topBoundaryElement);\n    }\n\n    // Remove listeners from old boundary elements\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Add new element to array/DOM\n    if (position === BoundaryPosition.TOP) {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.unshift(newElement);\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n    } else {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.push(newElement);\n      this._rowContainer.appendChild(newElement);\n    }\n\n    // Add listeners to new boundary elements\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Scroll up\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\n\n    // Focus new boundary before element\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\n\n    // Prevent the standard behavior\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  private _handleResize(rows: number): void {\n    // Remove bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Grow rows as required\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n    // Shrink rows as required\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n\n    // Add bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n  }\n\n  private _createAccessibilityTreeNode(): HTMLElement {\n    const element = document.createElement('div');\n    element.setAttribute('role', 'listitem');\n    element.tabIndex = -1;\n    this._refreshRowDimensions(element);\n    return element;\n  }\n  private _refreshRowsDimensions(): void {\n    if (!this._renderService.dimensions.css.cell.height) {\n      return;\n    }\n    this._accessibilityContainer.style.width = `${this._renderService.dimensions.css.canvas.width}px`;\n    if (this._rowElements.length !== this._terminal.rows) {\n      this._handleResize(this._terminal.rows);\n    }\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._refreshRowDimensions(this._rowElements[i]);\n    }\n  }\n  private _refreshRowDimensions(element: HTMLElement): void {\n    element.style.height = `${this._renderService.dimensions.css.cell.height}px`;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionService } from 'browser/services/Services';\nimport { ICoreService, IOptionsService } from 'common/services/Services';\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string): string {\n  return text.replace(/\\r?\\n/g, '\\r');\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, selectionService: ISelectionService): void {\n  if (ev.clipboardData) {\n    ev.clipboardData.setData('text/plain', selectionService.selectionText);\n  }\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n */\nexport function handlePasteEvent(ev: ClipboardEvent, textarea: HTMLTextAreaElement, coreService: ICoreService, optionsService: IOptionsService): void {\n  ev.stopPropagation();\n  if (ev.clipboardData) {\n    const text = ev.clipboardData.getData('text/plain');\n    paste(text, textarea, coreService, optionsService);\n  }\n}\n\nexport function paste(text: string, textarea: HTMLTextAreaElement, coreService: ICoreService, optionsService: IOptionsService): void {\n  text = prepareTextForTerminal(text);\n  text = bracketTextForPaste(text, coreService.decPrivateModes.bracketedPasteMode && optionsService.rawOptions.ignoreBracketedPasteMode !== true);\n  coreService.triggerDataEvent(text, true);\n  textarea.value = '';\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement): void {\n\n  // Calculate textarea position relative to the screen element\n  const pos = screenElement.getBoundingClientRect();\n  const left = ev.clientX - pos.left - 10;\n  const top = ev.clientY - pos.top - 10;\n\n  // Bring textarea at the cursor position\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = `${left}px`;\n  textarea.style.top = `${top}px`;\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement, selectionService: ISelectionService, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea, screenElement);\n\n  if (shouldSelectWord) {\n    selectionService.rightClickSelect(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionService.selectionText;\n  textarea.select();\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { IColor } from 'common/Types';\nimport { TwoKeyMap } from 'common/MultiKeyMap';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: TwoKeyMap</* bg */number, /* fg */number, IColor | null> = new TwoKeyMap();\n  private _css: TwoKeyMap</* bg */number, /* fg */number, string | null> = new TwoKeyMap();\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    this._css.set(bg, fg, value);\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._css.get(bg, fg);\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    this._color.set(bg, fg, value);\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color.get(bg, fg);\n  }\n\n  public clear(): void {\n    this._color.clear();\n    this._css.clear();\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param node The node to add a listener to.\n * @param type The event type.\n * @param handler The handler for the listener.\n * @param options The boolean or options object to pass on to the event\n * listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IBufferCellPosition, ILink, ILinkDecorations, ILinkProvider, ILinkWithState, ILinkifier2, ILinkifierEvent } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, disposeArray, getDisposeArrayDisposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { IBufferService } from 'common/services/Services';\nimport { IMouseService, IRenderService } from './services/Services';\n\nexport class Linkifier2 extends Disposable implements ILinkifier2 {\n  private _element: HTMLElement | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _linkProviders: ILinkProvider[] = [];\n  public get currentLink(): ILinkWithState | undefined { return this._currentLink; }\n  protected _currentLink: ILinkWithState | undefined;\n  private _mouseDownLink: ILinkWithState | undefined;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _linkCacheDisposables: IDisposable[] = [];\n  private _lastBufferCell: IBufferCellPosition | undefined;\n  private _isMouseOut: boolean = true;\n  private _wasResized: boolean = false;\n  private _activeProviderReplies: Map<Number, ILinkWithState[] | undefined> | undefined;\n  private _activeLine: number = -1;\n\n  private readonly _onShowLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public readonly onShowLinkUnderline = this._onShowLinkUnderline.event;\n  private readonly _onHideLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public readonly onHideLinkUnderline = this._onHideLinkUnderline.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.register(getDisposeArrayDisposable(this._linkCacheDisposables));\n    this.register(toDisposable(() => {\n      this._lastMouseEvent = undefined;\n    }));\n    // Listen to resize to catch the case where it's resized and the cursor is out of the viewport.\n    this.register(this._bufferService.onResize(() => {\n      this._clearCurrentLink();\n      this._wasResized = true;\n    }));\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._linkProviders.push(linkProvider);\n    return {\n      dispose: () => {\n        // Remove the link provider from the list\n        const providerIndex = this._linkProviders.indexOf(linkProvider);\n\n        if (providerIndex !== -1) {\n          this._linkProviders.splice(providerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public attachToDom(element: HTMLElement, mouseService: IMouseService, renderService: IRenderService): void {\n    this._element = element;\n    this._mouseService = mouseService;\n    this._renderService = renderService;\n\n    this.register(addDisposableDomListener(this._element, 'mouseleave', () => {\n      this._isMouseOut = true;\n      this._clearCurrentLink();\n    }));\n    this.register(addDisposableDomListener(this._element, 'mousemove', this._handleMouseMove.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mousedown', this._handleMouseDown.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mouseup', this._handleMouseUp.bind(this)));\n  }\n\n  private _handleMouseMove(event: MouseEvent): void {\n    this._lastMouseEvent = event;\n\n    if (!this._element || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n    this._isMouseOut = false;\n\n    // Ignore the event if it's an embedder created hover widget\n    const composedPath = event.composedPath() as HTMLElement[];\n    for (let i = 0; i < composedPath.length; i++) {\n      const target = composedPath[i];\n      // Hit Terminal.element, break and continue\n      if (target.classList.contains('xterm')) {\n        break;\n      }\n      // It's a hover, don't respect hover event\n      if (target.classList.contains('xterm-hover')) {\n        return;\n      }\n    }\n\n    if (!this._lastBufferCell || (position.x !== this._lastBufferCell.x || position.y !== this._lastBufferCell.y)) {\n      this._handleHover(position);\n      this._lastBufferCell = position;\n    }\n  }\n\n  private _handleHover(position: IBufferCellPosition): void {\n    // TODO: This currently does not cache link provider results across wrapped lines, activeLine\n    //       should be something like `activeRange: {startY, endY}`\n    // Check if we need to clear the link\n    if (this._activeLine !== position.y || this._wasResized) {\n      this._clearCurrentLink();\n      this._askForLink(position, false);\n      this._wasResized = false;\n      return;\n    }\n\n    // Check the if the link is in the mouse position\n    const isCurrentLinkInPosition = this._currentLink && this._linkAtPosition(this._currentLink.link, position);\n    if (!isCurrentLinkInPosition) {\n      this._clearCurrentLink();\n      this._askForLink(position, true);\n    }\n  }\n\n  private _askForLink(position: IBufferCellPosition, useLineCache: boolean): void {\n    if (!this._activeProviderReplies || !useLineCache) {\n      this._activeProviderReplies?.forEach(reply => {\n        reply?.forEach(linkWithState => {\n          if (linkWithState.link.dispose) {\n            linkWithState.link.dispose();\n          }\n        });\n      });\n      this._activeProviderReplies = new Map();\n      this._activeLine = position.y;\n    }\n    let linkProvided = false;\n\n    // There is no link cached, so ask for one\n    for (const [i, linkProvider] of this._linkProviders.entries()) {\n      if (useLineCache) {\n        const existingReply = this._activeProviderReplies?.get(i);\n        // If there isn't a reply, the provider hasn't responded yet.\n\n        // TODO: If there isn't a reply yet it means that the provider is still resolving. Ensuring\n        // provideLinks isn't triggered again saves ILink.hover firing twice though. This probably\n        // needs promises to get fixed\n        if (existingReply) {\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n        }\n      } else {\n        linkProvider.provideLinks(position.y, (links: ILink[] | undefined) => {\n          if (this._isMouseOut) {\n            return;\n          }\n          const linksWithState: ILinkWithState[] | undefined = links?.map(link  => ({ link }));\n          this._activeProviderReplies?.set(i, linksWithState);\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n\n          // If all providers have responded, remove lower priority links that intersect ranges of\n          // higher priority links\n          if (this._activeProviderReplies?.size === this._linkProviders.length) {\n            this._removeIntersectingLinks(position.y, this._activeProviderReplies);\n          }\n        });\n      }\n    }\n  }\n\n  private _removeIntersectingLinks(y: number, replies: Map<Number, ILinkWithState[] | undefined>): void {\n    const occupiedCells = new Set<number>();\n    for (let i = 0; i < replies.size; i++) {\n      const providerReply = replies.get(i);\n      if (!providerReply) {\n        continue;\n      }\n      for (let i = 0; i < providerReply.length; i++) {\n        const linkWithState = providerReply[i];\n        const startX = linkWithState.link.range.start.y < y ? 0 : linkWithState.link.range.start.x;\n        const endX = linkWithState.link.range.end.y > y ? this._bufferService.cols : linkWithState.link.range.end.x;\n        for (let x = startX; x <= endX; x++) {\n          if (occupiedCells.has(x)) {\n            providerReply.splice(i--, 1);\n            break;\n          }\n          occupiedCells.add(x);\n        }\n      }\n    }\n  }\n\n  private _checkLinkProviderResult(index: number, position: IBufferCellPosition, linkProvided: boolean): boolean {\n    if (!this._activeProviderReplies) {\n      return linkProvided;\n    }\n\n    const links = this._activeProviderReplies.get(index);\n\n    // Check if every provider before this one has come back undefined\n    let hasLinkBefore = false;\n    for (let j = 0; j < index; j++) {\n      if (!this._activeProviderReplies.has(j) || this._activeProviderReplies.get(j)) {\n        hasLinkBefore = true;\n      }\n    }\n\n    // If all providers with higher priority came back undefined, then this provider's link for\n    // the position should be used\n    if (!hasLinkBefore && links) {\n      const linkAtPosition = links.find(link => this._linkAtPosition(link.link, position));\n      if (linkAtPosition) {\n        linkProvided = true;\n        this._handleNewLink(linkAtPosition);\n      }\n    }\n\n    // Check if all the providers have responded\n    if (this._activeProviderReplies.size === this._linkProviders.length && !linkProvided) {\n      // Respect the order of the link providers\n      for (let j = 0; j < this._activeProviderReplies.size; j++) {\n        const currentLink = this._activeProviderReplies.get(j)?.find(link => this._linkAtPosition(link.link, position));\n        if (currentLink) {\n          linkProvided = true;\n          this._handleNewLink(currentLink);\n          break;\n        }\n      }\n    }\n\n    return linkProvided;\n  }\n\n  private _handleMouseDown(): void {\n    this._mouseDownLink = this._currentLink;\n  }\n\n  private _handleMouseUp(event: MouseEvent): void {\n    if (!this._element || !this._mouseService || !this._currentLink) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n\n    if (this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, position)) {\n      this._currentLink.link.activate(event, this._currentLink.link.text);\n    }\n  }\n\n  private _clearCurrentLink(startRow?: number, endRow?: number): void {\n    if (!this._element || !this._currentLink || !this._lastMouseEvent) {\n      return;\n    }\n\n    // If we have a start and end row, check that the link is within it\n    if (!startRow || !endRow || (this._currentLink.link.range.start.y >= startRow && this._currentLink.link.range.end.y <= endRow)) {\n      this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent);\n      this._currentLink = undefined;\n      disposeArray(this._linkCacheDisposables);\n    }\n  }\n\n  private _handleNewLink(linkWithState: ILinkWithState): void {\n    if (!this._element || !this._lastMouseEvent || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    // Trigger hover if the we have a link at the position\n    if (this._linkAtPosition(linkWithState.link, position)) {\n      this._currentLink = linkWithState;\n      this._currentLink.state = {\n        decorations: {\n          underline: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.underline,\n          pointerCursor: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.pointerCursor\n        },\n        isHovered: true\n      };\n      this._linkHover(this._element, linkWithState.link, this._lastMouseEvent);\n\n      // Add listener for tracking decorations changes\n      linkWithState.link.decorations = {} as ILinkDecorations;\n      Object.defineProperties(linkWithState.link.decorations, {\n        pointerCursor: {\n          get: () => this._currentLink?.state?.decorations.pointerCursor,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink.state.decorations.pointerCursor !== v) {\n              this._currentLink.state.decorations.pointerCursor = v;\n              if (this._currentLink.state.isHovered) {\n                this._element?.classList.toggle('xterm-cursor-pointer', v);\n              }\n            }\n          }\n        },\n        underline: {\n          get: () => this._currentLink?.state?.decorations.underline,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink?.state?.decorations.underline !== v) {\n              this._currentLink.state.decorations.underline = v;\n              if (this._currentLink.state.isHovered) {\n                this._fireUnderlineEvent(linkWithState.link, v);\n              }\n            }\n          }\n        }\n      });\n\n      // Listen to viewport changes to re-render the link under the cursor (only when the line the\n      // link is on changes)\n      if (this._renderService) {\n        this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange(e => {\n          // Sanity check, this shouldn't happen in practice as this listener would be disposed\n          if (!this._currentLink) {\n            return;\n          }\n          // When start is 0 a scroll most likely occurred, make sure links above the fold also get\n          // cleared.\n          const start = e.start === 0 ? 0 : e.start + 1 + this._bufferService.buffer.ydisp;\n          const end = this._bufferService.buffer.ydisp + 1 + e.end;\n          // Only clear the link if the viewport change happened on this line\n          if (this._currentLink.link.range.start.y >= start && this._currentLink.link.range.end.y <= end) {\n            this._clearCurrentLink(start, end);\n            if (this._lastMouseEvent && this._element) {\n              // re-eval previously active link after changes\n              const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService!);\n              if (position) {\n                this._askForLink(position, false);\n              }\n            }\n          }\n        }));\n      }\n    }\n  }\n\n  protected _linkHover(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = true;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, true);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.add('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.hover) {\n      link.hover(event, link.text);\n    }\n  }\n\n  private _fireUnderlineEvent(link: ILink, showEvent: boolean): void {\n    const range = link.range;\n    const scrollOffset = this._bufferService.buffer.ydisp;\n    const event = this._createLinkUnderlineEvent(range.start.x - 1, range.start.y - scrollOffset - 1, range.end.x, range.end.y - scrollOffset - 1, undefined);\n    const emitter = showEvent ? this._onShowLinkUnderline : this._onHideLinkUnderline;\n    emitter.fire(event);\n  }\n\n  protected _linkLeave(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = false;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, false);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.remove('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.leave) {\n      link.leave(event, link.text);\n    }\n  }\n\n  /**\n   * Check if the buffer position is within the link\n   * @param link\n   * @param position\n   */\n  private _linkAtPosition(link: ILink, position: IBufferCellPosition): boolean {\n    const lower = link.range.start.y * this._bufferService.cols + link.range.start.x;\n    const upper = link.range.end.y * this._bufferService.cols + link.range.end.x;\n    const current = position.y * this._bufferService.cols + position.x;\n    return (lower <= current && current <= upper);\n  }\n\n  /**\n   * Get the buffer position from a mouse event\n   * @param event\n   */\n  private _positionFromMouseEvent(event: MouseEvent, element: HTMLElement, mouseService: IMouseService): IBufferCellPosition | undefined {\n    const coords = mouseService.getCoords(event, element, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return;\n    }\n\n    return { x: coords[0], y: coords[1] + this._bufferService.buffer.ydisp };\n  }\n\n  private _createLinkUnderlineEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// This file contains strings that get exported in the API so they can be localized\n\n// eslint-disable-next-line prefer-const\nexport let promptLabel = 'Terminal input';\n\n// eslint-disable-next-line prefer-const\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange, ILink, ILinkProvider } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IOptionsService, IOscLinkService } from 'common/services/Services';\n\nexport class OscLinkProvider implements ILinkProvider {\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IOscLinkService private readonly _oscLinkService: IOscLinkService\n  ) {\n  }\n\n  public provideLinks(y: number, callback: (links: ILink[] | undefined) => void): void {\n    const line = this._bufferService.buffer.lines.get(y - 1);\n    if (!line) {\n      callback(undefined);\n      return;\n    }\n\n    const result: ILink[] = [];\n    const linkHandler = this._optionsService.rawOptions.linkHandler;\n    const cell = new CellData();\n    const lineLength = line.getTrimmedLength();\n    let currentLinkId = -1;\n    let currentStart = -1;\n    let finishLink = false;\n    for (let x = 0; x < lineLength; x++) {\n      // Minor optimization, only check for content if there isn't a link in case the link ends with\n      // a null cell\n      if (currentStart === -1 && !line.hasContent(x)) {\n        continue;\n      }\n\n      line.loadCell(x, cell);\n      if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n        if (currentStart === -1) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n          continue;\n        } else {\n          finishLink = cell.extended.urlId !== currentLinkId;\n        }\n      } else {\n        if (currentStart !== -1) {\n          finishLink = true;\n        }\n      }\n\n      if (finishLink || (currentStart !== -1 && x === lineLength - 1)) {\n        const text = this._oscLinkService.getLinkData(currentLinkId)?.uri;\n        if (text) {\n          // These ranges are 1-based\n          const range: IBufferRange = {\n            start: {\n              x: currentStart + 1,\n              y\n            },\n            end: {\n              // Offset end x if it's a link that ends on the last cell in the line\n              x: x + (!finishLink && x === lineLength - 1 ? 1 : 0),\n              y\n            }\n          };\n\n          let ignoreLink = false;\n          if (!linkHandler?.allowNonHttpProtocols) {\n            try {\n              const parsed = new URL(text);\n              if (!['http:', 'https:'].includes(parsed.protocol)) {\n                ignoreLink = true;\n              }\n            } catch (e) {\n              // Ignore invalid URLs to prevent unexpected behaviors\n              ignoreLink = true;\n            }\n          }\n\n          if (!ignoreLink) {\n            // OSC links always use underline and pointer decorations\n            result.push({\n              text,\n              range,\n              activate: (e, text) => (linkHandler ? linkHandler.activate(e, text, range) : defaultActivate(e, text)),\n              hover: (e, text) => linkHandler?.hover?.(e, text, range),\n              leave: (e, text) => linkHandler?.leave?.(e, text, range)\n            });\n          }\n        }\n        finishLink = false;\n\n        // Clear link or start a new link if one starts immediately\n        if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n        } else {\n          currentStart = -1;\n          currentLinkId = -1;\n        }\n      }\n    }\n\n    // TODO: Handle fetching and returning other link ranges to underline other links with the same\n    //       id\n    callback(result);\n  }\n}\n\nfunction defaultActivate(e: MouseEvent, uri: string): void {\n  const answer = confirm(`Do you want to navigate to ${uri}?\\n\\nWARNING: This link could potentially be dangerous`);\n  if (answer) {\n    const newWindow = window.open();\n    if (newWindow) {\n      try {\n        newWindow.opener = null;\n      } catch {\n        // no-op, Electron can throw\n      }\n      newWindow.location.href = uri;\n    } else {\n      console.warn('Opening link blocked as opener could not be cleared');\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\n\n/**\n * Debounces calls to render terminal rows using animation frames.\n */\nexport class RenderDebouncer implements IRenderDebouncerWithCallback {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n  private _animationFrame: number | undefined;\n  private _refreshCallbacks: FrameRequestCallback[] = [];\n\n  constructor(\n    private _parentWindow: Window,\n    private _renderCallback: (start: number, end: number) => void\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._animationFrame) {\n      this._parentWindow.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    this._refreshCallbacks.push(callback);\n    if (!this._animationFrame) {\n      this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh());\n    }\n    return this._animationFrame;\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    if (this._animationFrame) {\n      return;\n    }\n\n    this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh());\n  }\n\n  private _innerRefresh(): void {\n    this._animationFrame = undefined;\n\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      this._runRefreshCallbacks();\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n    this._runRefreshCallbacks();\n  }\n\n  private _runRefreshCallbacks(): void {\n    for (const callback of this._refreshCallbacks) {\n      callback(0);\n    }\n    this._refreshCallbacks = [];\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable, toDisposable } from 'common/Lifecycle';\n\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nexport class ScreenDprMonitor extends Disposable {\n  private _currentDevicePixelRatio: number;\n  private _outerListener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | undefined;\n  private _listener: ScreenDprListener | undefined;\n  private _resolutionMediaMatchList: MediaQueryList | undefined;\n\n  constructor(private _parentWindow: Window) {\n    super();\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this.register(toDisposable(() => {\n      this.clearListener();\n    }));\n  }\n\n  public setListener(listener: ScreenDprListener): void {\n    if (this._listener) {\n      this.clearListener();\n    }\n    this._listener = listener;\n    this._outerListener = () => {\n      if (!this._listener) {\n        return;\n      }\n      this._listener(this._parentWindow.devicePixelRatio, this._currentDevicePixelRatio);\n      this._updateDpr();\n    };\n    this._updateDpr();\n  }\n\n  private _updateDpr(): void {\n    if (!this._outerListener) {\n      return;\n    }\n\n    // Clear listeners for old DPR\n    this._resolutionMediaMatchList?.removeListener(this._outerListener);\n\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this._resolutionMediaMatchList = this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._resolutionMediaMatchList || !this._listener || !this._outerListener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._resolutionMediaMatchList = undefined;\n    this._listener = undefined;\n    this._outerListener = undefined;\n  }\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { copyHandler, handlePasteEvent, moveTextAreaUnderMouseCursor, paste, rightClickHandler } from 'browser/Clipboard';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { Linkifier2 } from 'browser/Linkifier2';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { OscLinkProvider } from 'browser/OscLinkProvider';\nimport { CharacterJoinerHandler, CustomKeyEventHandler, IBrowser, IBufferRange, ICompositionHelper, ILinkifier2, ITerminal, IViewport } from 'browser/Types';\nimport { Viewport } from 'browser/Viewport';\nimport { BufferDecorationRenderer } from 'browser/decorations/BufferDecorationRenderer';\nimport { OverviewRulerRenderer } from 'browser/decorations/OverviewRulerRenderer';\nimport { CompositionHelper } from 'browser/input/CompositionHelper';\nimport { DomRenderer } from 'browser/renderer/dom/DomRenderer';\nimport { IRenderer } from 'browser/renderer/shared/Types';\nimport { CharSizeService } from 'browser/services/CharSizeService';\nimport { CharacterJoinerService } from 'browser/services/CharacterJoinerService';\nimport { CoreBrowserService } from 'browser/services/CoreBrowserService';\nimport { MouseService } from 'browser/services/MouseService';\nimport { RenderService } from 'browser/services/RenderService';\nimport { SelectionService } from 'browser/services/SelectionService';\nimport { ICharSizeService, ICharacterJoinerService, ICoreBrowserService, IMouseService, IRenderService, ISelectionService, IThemeService } from 'browser/services/Services';\nimport { ThemeService } from 'browser/services/ThemeService';\nimport { color, rgba } from 'common/Color';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport * as Browser from 'common/Platform';\nimport { ColorRequestType, CoreMouseAction, CoreMouseButton, CoreMouseEventType, IColorEvent, ITerminalOptions, KeyboardResultType, ScrollSource, SpecialColorIndex } from 'common/Types';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { IBuffer } from 'common/buffer/Types';\nimport { C0, C1_ESCAPED } from 'common/data/EscapeSequences';\nimport { evaluateKeyboardEvent } from 'common/input/Keyboard';\nimport { toRgbString } from 'common/input/XParseColor';\nimport { DecorationService } from 'common/services/DecorationService';\nimport { IDecorationService } from 'common/services/Services';\nimport { IDecoration, IDecorationOptions, IDisposable, ILinkProvider, IMarker } from 'xterm';\nimport { WindowsOptionsReportType } from '../common/InputHandler';\nimport { AccessibilityManager } from './AccessibilityManager';\n\n// Let it work inside Node.js for automated testing purposes.\nconst document: Document = (typeof window !== 'undefined') ? window.document : null as any;\n\nexport class Terminal extends CoreTerminal implements ITerminal {\n  public textarea: HTMLTextAreaElement | undefined;\n  public element: HTMLElement | undefined;\n  public screenElement: HTMLElement | undefined;\n\n  private _document: Document | undefined;\n  private _viewportScrollArea: HTMLElement | undefined;\n  private _viewportElement: HTMLElement | undefined;\n  private _helperContainer: HTMLElement | undefined;\n  private _compositionView: HTMLElement | undefined;\n\n  private _overviewRulerRenderer: OverviewRulerRenderer | undefined;\n\n  public browser: IBrowser = Browser as any;\n\n  private _customKeyEventHandler: CustomKeyEventHandler | undefined;\n\n  // browser services\n  private _decorationService: DecorationService;\n  private _charSizeService: ICharSizeService | undefined;\n  private _coreBrowserService: ICoreBrowserService | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _themeService: IThemeService | undefined;\n  private _characterJoinerService: ICharacterJoinerService | undefined;\n  private _selectionService: ISelectionService | undefined;\n\n  /**\n   * Records whether the keydown event has already been handled and triggered a data event, if so\n   * the keypress event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyDownHandled: boolean = false;\n\n  /**\n   * Records whether a keydown event has occured since the last keyup event, i.e. whether a key\n   * is currently \"pressed\".\n   */\n  private _keyDownSeen: boolean = false;\n\n  /**\n   * Records whether the keypress event has already been handled and triggered a data event, if so\n   * the input event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyPressHandled: boolean = false;\n\n  /**\n   * Records whether there has been a keydown event for a dead key without a corresponding keydown\n   * event for the composed/alternative character. If we cancel the keydown event for the dead key,\n   * no events will be emitted for the final character.\n   */\n  private _unprocessedDeadKey: boolean = false;\n\n  public linkifier2: ILinkifier2;\n  public viewport: IViewport | undefined;\n  private _compositionHelper: ICompositionHelper | undefined;\n  private _accessibilityManager: MutableDisposable<AccessibilityManager> = this.register(new MutableDisposable());\n\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onKey = this.register(new EventEmitter<{ key: string, domEvent: KeyboardEvent }>());\n  public readonly onKey = this._onKey.event;\n  private readonly _onRender = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRender = this._onRender.event;\n  private readonly _onSelectionChange = this.register(new EventEmitter<void>());\n  public readonly onSelectionChange = this._onSelectionChange.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onBell = this.register(new EventEmitter<void>());\n  public readonly onBell = this._onBell.event;\n\n  private _onFocus = this.register(new EventEmitter<void>());\n  public get onFocus(): IEvent<void> { return this._onFocus.event; }\n  private _onBlur = this.register(new EventEmitter<void>());\n  public get onBlur(): IEvent<void> { return this._onBlur.event; }\n  private _onA11yCharEmitter = this.register(new EventEmitter<string>());\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = this.register(new EventEmitter<number>());\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n  private _onWillOpen = this.register(new EventEmitter<HTMLElement>());\n  public get onWillOpen(): IEvent<HTMLElement> { return this._onWillOpen.event; }\n\n  constructor(\n    options: Partial<ITerminalOptions> = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    this.linkifier2 = this.register(this._instantiationService.createInstance(Linkifier2));\n    this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(OscLinkProvider));\n    this._decorationService = this._instantiationService.createInstance(DecorationService);\n    this._instantiationService.setService(IDecorationService, this._decorationService);\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this._onBell.fire()));\n    this.register(this._inputHandler.onRequestRefreshRows((start, end) => this.refresh(start, end)));\n    this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(this._inputHandler.onRequestWindowsOptionsReport(type => this._reportWindowsOptions(type)));\n    this.register(this._inputHandler.onColor((event) => this._handleColorEvent(event)));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n\n    // Setup listeners\n    this.register(this._bufferService.onResize(e => this._afterResize(e.cols, e.rows)));\n\n    this.register(toDisposable(() => {\n      this._customKeyEventHandler = undefined;\n      this.element?.parentNode?.removeChild(this.element);\n    }));\n  }\n\n  /**\n   * Handle color event from inputhandler for OSC 4|104 | 10|110 | 11|111 | 12|112.\n   * An event from OSC 4|104 may contain multiple set or report requests, and multiple\n   * or none restore requests (resetting all),\n   * while an event from OSC 10|110 | 11|111 | 12|112 always contains a single request.\n   */\n  private _handleColorEvent(event: IColorEvent): void {\n    if (!this._themeService) return;\n    for (const req of event) {\n      let acc: 'foreground' | 'background' | 'cursor' | 'ansi';\n      let ident = '';\n      switch (req.index) {\n        case SpecialColorIndex.FOREGROUND: // OSC 10 | 110\n          acc = 'foreground';\n          ident = '10';\n          break;\n        case SpecialColorIndex.BACKGROUND: // OSC 11 | 111\n          acc = 'background';\n          ident = '11';\n          break;\n        case SpecialColorIndex.CURSOR: // OSC 12 | 112\n          acc = 'cursor';\n          ident = '12';\n          break;\n        default: // OSC 4 | 104\n          // we can skip the [0..255] range check here (already done in inputhandler)\n          acc = 'ansi';\n          ident = '4;' + req.index;\n      }\n      switch (req.type) {\n        case ColorRequestType.REPORT:\n          const channels = color.toColorRGB(acc === 'ansi'\n            ? this._themeService.colors.ansi[req.index]\n            : this._themeService.colors[acc]);\n          this.coreService.triggerDataEvent(`${C0.ESC}]${ident};${toRgbString(channels)}${C1_ESCAPED.ST}`);\n          break;\n        case ColorRequestType.SET:\n          if (acc === 'ansi') {\n            this._themeService.modifyColors(colors => colors.ansi[req.index] = rgba.toColor(...req.color));\n          } else {\n            const narrowedAcc = acc;\n            this._themeService.modifyColors(colors => colors[narrowedAcc] = rgba.toColor(...req.color));\n          }\n          break;\n        case ColorRequestType.RESTORE:\n          this._themeService.restoreColor(req.index);\n          break;\n      }\n    }\n  }\n\n  protected _setup(): void {\n    super._setup();\n\n    this._customKeyEventHandler = undefined;\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  /**\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n   */\n  public focus(): void {\n    if (this.textarea) {\n      this.textarea.focus({ preventScroll: true });\n    }\n  }\n\n  private _handleScreenReaderModeOptionChange(value: boolean): void {\n    if (value) {\n      if (!this._accessibilityManager.value && this._renderService) {\n        this._accessibilityManager.value = this._instantiationService.createInstance(AccessibilityManager, this);\n      }\n    } else {\n      this._accessibilityManager.clear();\n    }\n  }\n\n  /**\n   * Binds the desired focus behavior on a given terminal object.\n   */\n  private _handleTextAreaFocus(ev: KeyboardEvent): void {\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    }\n    this.updateCursorStyle(ev);\n    this.element!.classList.add('focus');\n    this._showCursor();\n    this._onFocus.fire();\n  }\n\n  /**\n   * Blur the terminal, calling the blur function on the terminal's underlying\n   * textarea.\n   */\n  public blur(): void {\n    return this.textarea?.blur();\n  }\n\n  /**\n   * Binds the desired blur behavior on a given terminal object.\n   */\n  private _handleTextAreaBlur(): void {\n    // Text can safely be removed on blur. Doing it earlier could interfere with\n    // screen readers reading it out.\n    this.textarea!.value = '';\n    this.refresh(this.buffer.y, this.buffer.y);\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n    this.element!.classList.remove('focus');\n    this._onBlur.fire();\n  }\n\n  private _syncTextArea(): void {\n    if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper!.isComposing || !this._renderService) {\n      return;\n    }\n    const cursorY = this.buffer.ybase + this.buffer.y;\n    const bufferLine = this.buffer.lines.get(cursorY);\n    if (!bufferLine) {\n      return;\n    }\n    const cursorX = Math.min(this.buffer.x, this.cols - 1);\n    const cellHeight = this._renderService.dimensions.css.cell.height;\n    const width = bufferLine.getWidth(cursorX);\n    const cellWidth = this._renderService.dimensions.css.cell.width * width;\n    const cursorTop = this.buffer.y * this._renderService.dimensions.css.cell.height;\n    const cursorLeft = cursorX * this._renderService.dimensions.css.cell.width;\n\n    // Sync the textarea to the exact position of the composition view so the IME knows where the\n    // text is.\n    this.textarea.style.left = cursorLeft + 'px';\n    this.textarea.style.top = cursorTop + 'px';\n    this.textarea.style.width = cellWidth + 'px';\n    this.textarea.style.height = cellHeight + 'px';\n    this.textarea.style.lineHeight = cellHeight + 'px';\n    this.textarea.style.zIndex = '-5';\n  }\n\n  /**\n   * Initialize default behavior\n   */\n  private _initGlobal(): void {\n    this._bindKeys();\n\n    // Bind clipboard functionality\n    this.register(addDisposableDomListener(this.element!, 'copy', (event: ClipboardEvent) => {\n      // If mouse events are active it means the selection manager is disabled and\n      // copy should be handled by the host program.\n      if (!this.hasSelection()) {\n        return;\n      }\n      copyHandler(event, this._selectionService!);\n    }));\n    const pasteHandlerWrapper = (event: ClipboardEvent): void => handlePasteEvent(event, this.textarea!, this.coreService, this.optionsService);\n    this.register(addDisposableDomListener(this.textarea!, 'paste', pasteHandlerWrapper));\n    this.register(addDisposableDomListener(this.element!, 'paste', pasteHandlerWrapper));\n\n    // Handle right click context menus\n    if (Browser.isFirefox) {\n      // Firefox doesn't appear to fire the contextmenu event on right click\n      this.register(addDisposableDomListener(this.element!, 'mousedown', (event: MouseEvent) => {\n        if (event.button === 2) {\n          rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n        }\n      }));\n    } else {\n      this.register(addDisposableDomListener(this.element!, 'contextmenu', (event: MouseEvent) => {\n        rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n      }));\n    }\n\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\n    // middle click to paste selection works. This only appears to work in Chrome\n    // at the time is writing.\n    if (Browser.isLinux) {\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\n      // that the regular click event doesn't fire for the middle mouse button.\n      this.register(addDisposableDomListener(this.element!, 'auxclick', (event: MouseEvent) => {\n        if (event.button === 1) {\n          moveTextAreaUnderMouseCursor(event, this.textarea!, this.screenElement!);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Apply key handling to the terminal\n   */\n  private _bindKeys(): void {\n    this.register(addDisposableDomListener(this.textarea!, 'keyup', (ev: KeyboardEvent) => this._keyUp(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionstart', () => this._compositionHelper!.compositionstart()));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper!.compositionupdate(e)));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionend', () => this._compositionHelper!.compositionend()));\n    this.register(addDisposableDomListener(this.textarea!, 'input', (ev: InputEvent) => this._inputEvent(ev), true));\n    this.register(this.onRender(() => this._compositionHelper!.updateCompositionElements()));\n  }\n\n  /**\n   * Opens the terminal within an element.\n   *\n   * @param parent The element to create the terminal within.\n   */\n  public open(parent: HTMLElement): void {\n    if (!parent) {\n      throw new Error('Terminal requires a parent element.');\n    }\n\n    if (!parent.isConnected) {\n      this._logService.debug('Terminal.open was called on an element that was not attached to the DOM');\n    }\n\n    this._document = parent.ownerDocument!;\n\n    // Create main element container\n    this.element = this._document.createElement('div');\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    parent.appendChild(this.element);\n\n    // Performance: Use a document fragment to build the terminal\n    // viewport and helper elements detached from the DOM\n    const fragment = document.createDocumentFragment();\n    this._viewportElement = document.createElement('div');\n    this._viewportElement.classList.add('xterm-viewport');\n    fragment.appendChild(this._viewportElement);\n\n    this._viewportScrollArea = document.createElement('div');\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\n    this._viewportElement.appendChild(this._viewportScrollArea);\n\n    this.screenElement = document.createElement('div');\n    this.screenElement.classList.add('xterm-screen');\n    // Create the container that will hold helpers like the textarea for\n    // capturing DOM Events. Then produce the helpers.\n    this._helperContainer = document.createElement('div');\n    this._helperContainer.classList.add('xterm-helpers');\n    this.screenElement.appendChild(this._helperContainer);\n    fragment.appendChild(this.screenElement);\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\n    if (!Browser.isChromeOS) {\n      // ChromeVox on ChromeOS does not like this. See\n      // https://issuetracker.google.com/issues/260170397\n      this.textarea.setAttribute('aria-multiline', 'false');\n    }\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n\n    // Register the core browser service before the generic textarea handlers are registered so it\n    // handles them first. Otherwise the renderers may use the wrong focus state.\n    this._coreBrowserService = this._instantiationService.createInstance(CoreBrowserService, this.textarea, this._document.defaultView ?? window);\n    this._instantiationService.setService(ICoreBrowserService, this._coreBrowserService);\n\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: KeyboardEvent) => this._handleTextAreaFocus(ev)));\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._handleTextAreaBlur()));\n    this._helperContainer.appendChild(this.textarea);\n\n\n    this._charSizeService = this._instantiationService.createInstance(CharSizeService, this._document, this._helperContainer);\n    this._instantiationService.setService(ICharSizeService, this._charSizeService);\n\n    this._themeService = this._instantiationService.createInstance(ThemeService);\n    this._instantiationService.setService(IThemeService, this._themeService);\n\n    this._characterJoinerService = this._instantiationService.createInstance(CharacterJoinerService);\n    this._instantiationService.setService(ICharacterJoinerService, this._characterJoinerService);\n\n    this._renderService = this.register(this._instantiationService.createInstance(RenderService, this.rows, this.screenElement));\n    this._instantiationService.setService(IRenderService, this._renderService);\n    this.register(this._renderService.onRenderedViewportChange(e => this._onRender.fire(e)));\n    this.onResize(e => this._renderService!.resize(e.cols, e.rows));\n\n    this._compositionView = document.createElement('div');\n    this._compositionView.classList.add('composition-view');\n    this._compositionHelper = this._instantiationService.createInstance(CompositionHelper, this.textarea, this._compositionView);\n    this._helperContainer.appendChild(this._compositionView);\n\n    // Performance: Add viewport and helper elements from the fragment\n    this.element.appendChild(fragment);\n\n    try {\n      this._onWillOpen.fire(this.element);\n    }\n    catch { /* fails to load addon for some reason */ }\n    if (!this._renderService.hasRenderer()) {\n      this._renderService.setRenderer(this._createRenderer());\n    }\n\n    this._mouseService = this._instantiationService.createInstance(MouseService);\n    this._instantiationService.setService(IMouseService, this._mouseService);\n\n    this.viewport = this._instantiationService.createInstance(Viewport, this._viewportElement, this._viewportScrollArea);\n    this.viewport.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent, ScrollSource.VIEWPORT)),\n    this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport!.syncScrollArea()));\n    this.register(this.viewport);\n\n    this.register(this.onCursorMove(() => {\n      this._renderService!.handleCursorMove();\n      this._syncTextArea();\n    }));\n    this.register(this.onResize(() => this._renderService!.handleResize(this.cols, this.rows)));\n    this.register(this.onBlur(() => this._renderService!.handleBlur()));\n    this.register(this.onFocus(() => this._renderService!.handleFocus()));\n    this.register(this._renderService.onDimensionsChange(() => this.viewport!.syncScrollArea()));\n\n    this._selectionService = this.register(this._instantiationService.createInstance(SelectionService,\n      this.element,\n      this.screenElement,\n      this.linkifier2\n    ));\n    this._instantiationService.setService(ISelectionService, this._selectionService);\n    this.register(this._selectionService.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent)));\n    this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire()));\n    this.register(this._selectionService.onRequestRedraw(e => this._renderService!.handleSelectionChanged(e.start, e.end, e.columnSelectMode)));\n    this.register(this._selectionService.onLinuxMouseSelection(text => {\n      // If there's a new selection, put it into the textarea, focus and select it\n      // in order to register it as a selection on the OS. This event is fired\n      // only on Linux to enable middle click to paste selection.\n      this.textarea!.value = text;\n      this.textarea!.focus();\n      this.textarea!.select();\n    }));\n    this.register(this._onScroll.event(ev => {\n      this.viewport!.syncScrollArea();\n      this._selectionService!.refresh();\n    }));\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this._selectionService!.refresh()));\n\n    this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService);\n    this.register(this._instantiationService.createInstance(BufferDecorationRenderer, this.screenElement));\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this._selectionService!.handleMouseDown(e)));\n\n    // apply mouse event classes set by escape codes before terminal was attached\n    if (this.coreMouseService.areMouseEventsActive) {\n      this._selectionService.disable();\n      this.element.classList.add('enable-mouse-events');\n    } else {\n      this._selectionService.enable();\n    }\n\n    if (this.options.screenReaderMode) {\n      // Note that this must be done *after* the renderer is created in order to\n      // ensure the correct order of the dprchange event\n      this._accessibilityManager.value = this._instantiationService.createInstance(AccessibilityManager, this);\n    }\n    this.register(this.optionsService.onSpecificOptionChange('screenReaderMode', e => this._handleScreenReaderModeOptionChange(e)));\n\n    if (this.options.overviewRulerWidth) {\n      this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n    }\n    this.optionsService.onSpecificOptionChange('overviewRulerWidth', value => {\n      if (!this._overviewRulerRenderer && value && this._viewportElement && this.screenElement) {\n        this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n      }\n    });\n    // Measure the character size\n    this._charSizeService.measure();\n\n    // Setup loop that draws to screen\n    this.refresh(0, this.rows - 1);\n\n    // Initialize global actions that need to be taken on the document.\n    this._initGlobal();\n\n    // Listen for mouse events and translate\n    // them into terminal mouse protocols.\n    this.bindMouse();\n  }\n\n  private _createRenderer(): IRenderer {\n    return this._instantiationService.createInstance(DomRenderer, this.element!, this.screenElement!, this._viewportElement!, this.linkifier2);\n  }\n\n  /**\n   * Bind certain mouse events to the terminal.\n   * By default only 3 button + wheel up/down is ativated. For higher buttons\n   * no mouse report will be created. Typically the standard actions will be active.\n   *\n   * There are several reasons not to enable support for higher buttons/wheel:\n   * - Button 4 and 5 are typically used for history back and forward navigation,\n   *   there is no straight forward way to supress/intercept those standard actions.\n   * - Support for higher buttons does not work in some platform/browser combinations.\n   * - Left/right wheel was not tested.\n   * - Emulators vary in mouse button support, typically only 3 buttons and\n   *   wheel up/down work reliable.\n   *\n   * TODO: Move mouse event code into its own file.\n   */\n  public bindMouse(): void {\n    const self = this;\n    const el = this.element!;\n\n    // send event to CoreMouseService\n    function sendEvent(ev: MouseEvent | WheelEvent): boolean {\n      // get mouse coordinates\n      const pos = self._mouseService!.getMouseReportCoords(ev, self.screenElement!);\n      if (!pos) {\n        return false;\n      }\n\n      let but: CoreMouseButton;\n      let action: CoreMouseAction | undefined;\n      switch ((ev as any).overrideType || ev.type) {\n        case 'mousemove':\n          action = CoreMouseAction.MOVE;\n          if (ev.buttons === undefined) {\n            // buttons is not supported on macOS, try to get a value from button instead\n            but = CoreMouseButton.NONE;\n            if (ev.button !== undefined) {\n              but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n            }\n          } else {\n            // according to MDN buttons only reports up to button 5 (AUX2)\n            but = ev.buttons & 1 ? CoreMouseButton.LEFT :\n              ev.buttons & 4 ? CoreMouseButton.MIDDLE :\n                ev.buttons & 2 ? CoreMouseButton.RIGHT :\n                  CoreMouseButton.NONE; // fallback to NONE\n          }\n          break;\n        case 'mouseup':\n          action = CoreMouseAction.UP;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'mousedown':\n          action = CoreMouseAction.DOWN;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'wheel':\n          const amount = self.viewport!.getLinesScrolled(ev as WheelEvent);\n\n          if (amount === 0) {\n            return false;\n          }\n\n          action = (ev as WheelEvent).deltaY < 0 ? CoreMouseAction.UP : CoreMouseAction.DOWN;\n          but = CoreMouseButton.WHEEL;\n          break;\n        default:\n          // dont handle other event types by accident\n          return false;\n      }\n\n      // exit if we cannot determine valid button/action values\n      // do nothing for higher buttons than wheel\n      if (action === undefined || but === undefined || but > CoreMouseButton.WHEEL) {\n        return false;\n      }\n\n      return self.coreMouseService.triggerMouseEvent({\n        col: pos.col,\n        row: pos.row,\n        x: pos.x,\n        y: pos.y,\n        button: but,\n        action,\n        ctrl: ev.ctrlKey,\n        alt: ev.altKey,\n        shift: ev.shiftKey\n      });\n    }\n\n    /**\n     * Event listener state handling.\n     * We listen to the onProtocolChange event of CoreMouseService and put\n     * requested listeners in `requestedEvents`. With this the listeners\n     * have all bits to do the event listener juggling.\n     * Note: 'mousedown' currently is \"always on\" and not managed\n     * by onProtocolChange.\n     */\n    const requestedEvents: { [key: string]: ((ev: Event) => void) | null } = {\n      mouseup: null,\n      wheel: null,\n      mousedrag: null,\n      mousemove: null\n    };\n    const eventListeners: { [key: string]: (ev: any) => void | boolean } = {\n      mouseup: (ev: MouseEvent) => {\n        sendEvent(ev);\n        if (!ev.buttons) {\n          // if no other button is held remove global handlers\n          this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n          if (requestedEvents.mousedrag) {\n            this._document!.removeEventListener('mousemove', requestedEvents.mousedrag);\n          }\n        }\n        return this.cancel(ev);\n      },\n      wheel: (ev: WheelEvent) => {\n        sendEvent(ev);\n        return this.cancel(ev, true);\n      },\n      mousedrag: (ev: MouseEvent) => {\n        // deal only with move while a button is held\n        if (ev.buttons) {\n          sendEvent(ev);\n        }\n      },\n      mousemove: (ev: MouseEvent) => {\n        // deal only with move without any button\n        if (!ev.buttons) {\n          sendEvent(ev);\n        }\n      }\n    };\n    this.register(this.coreMouseService.onProtocolChange(events => {\n      // apply global changes on events\n      if (events) {\n        if (this.optionsService.rawOptions.logLevel === 'debug') {\n          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));\n        }\n        this.element!.classList.add('enable-mouse-events');\n        this._selectionService!.disable();\n      } else {\n        this._logService.debug('Unbinding from mouse events.');\n        this.element!.classList.remove('enable-mouse-events');\n        this._selectionService!.enable();\n      }\n\n      // add/remove handlers from requestedEvents\n\n      if (!(events & CoreMouseEventType.MOVE)) {\n        el.removeEventListener('mousemove', requestedEvents.mousemove!);\n        requestedEvents.mousemove = null;\n      } else if (!requestedEvents.mousemove) {\n        el.addEventListener('mousemove', eventListeners.mousemove);\n        requestedEvents.mousemove = eventListeners.mousemove;\n      }\n\n      if (!(events & CoreMouseEventType.WHEEL)) {\n        el.removeEventListener('wheel', requestedEvents.wheel!);\n        requestedEvents.wheel = null;\n      } else if (!requestedEvents.wheel) {\n        el.addEventListener('wheel', eventListeners.wheel, { passive: false });\n        requestedEvents.wheel = eventListeners.wheel;\n      }\n\n      if (!(events & CoreMouseEventType.UP)) {\n        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n        el.removeEventListener('mouseup', requestedEvents.mouseup!);\n        requestedEvents.mouseup = null;\n      } else if (!requestedEvents.mouseup) {\n        el.addEventListener('mouseup', eventListeners.mouseup);\n        requestedEvents.mouseup = eventListeners.mouseup;\n      }\n\n      if (!(events & CoreMouseEventType.DRAG)) {\n        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);\n        requestedEvents.mousedrag = null;\n      } else if (!requestedEvents.mousedrag) {\n        requestedEvents.mousedrag = eventListeners.mousedrag;\n      }\n    }));\n    // force initial onProtocolChange so we dont miss early mouse requests\n    this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;\n\n    /**\n     * \"Always on\" event listeners.\n     */\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\n      ev.preventDefault();\n      this.focus();\n\n      // Don't send the mouse button to the pty if mouse events are disabled or\n      // if the selection manager is having selection forced (ie. a modifier is\n      // held).\n      if (!this.coreMouseService.areMouseEventsActive || this._selectionService!.shouldForceSelection(ev)) {\n        return;\n      }\n\n      sendEvent(ev);\n\n      // Register additional global handlers which should keep reporting outside\n      // of the terminal element.\n      // Note: Other emulators also do this for 'mousedown' while a button\n      // is held, we currently limit 'mousedown' to the terminal only.\n      if (requestedEvents.mouseup) {\n        this._document!.addEventListener('mouseup', requestedEvents.mouseup);\n      }\n      if (requestedEvents.mousedrag) {\n        this._document!.addEventListener('mousemove', requestedEvents.mousedrag);\n      }\n\n      return this.cancel(ev);\n    }));\n\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\n      // do nothing, if app side handles wheel itself\n      if (requestedEvents.wheel) return;\n\n      if (!this.buffer.hasScrollback) {\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\n        const amount = this.viewport!.getLinesScrolled(ev);\n\n        // Do nothing if there's no vertical scroll\n        if (amount === 0) {\n          return;\n        }\n\n        // Construct and send sequences\n        const sequence = C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n        let data = '';\n        for (let i = 0; i < Math.abs(amount); i++) {\n          data += sequence;\n        }\n        this.coreService.triggerDataEvent(data, true);\n        return this.cancel(ev, true);\n      }\n\n      // normal viewport scrolling\n      // conditionally stop event, if the viewport still had rows to scroll within\n      if (this.viewport!.handleWheel(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      this.viewport!.handleTouchStart(ev);\n      return this.cancel(ev);\n    }, { passive: true }));\n\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      if (!this.viewport!.handleTouchMove(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n  }\n\n\n  /**\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n   * opportunity.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  public refresh(start: number, end: number): void {\n    this._renderService?.refreshRows(start, end);\n  }\n\n  /**\n   * Change the cursor style for different selection modes\n   */\n  public updateCursorStyle(ev: KeyboardEvent): void {\n    if (this._selectionService?.shouldColumnSelect(ev)) {\n      this.element!.classList.add('column-select');\n    } else {\n      this.element!.classList.remove('column-select');\n    }\n  }\n\n  /**\n   * Display the cursor element\n   */\n  private _showCursor(): void {\n    if (!this.coreService.isCursorInitialized) {\n      this.coreService.isCursorInitialized = true;\n      this.refresh(this.buffer.y, this.buffer.y);\n    }\n  }\n\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\n    if (source === ScrollSource.VIEWPORT) {\n      super.scrollLines(disp, suppressScrollEvent, source);\n      this.refresh(0, this.rows - 1);\n    } else {\n      this.viewport?.scrollLines(disp);\n    }\n  }\n\n  public paste(data: string): void {\n    paste(data, this.textarea!, this.coreService, this.optionsService);\n  }\n\n  /**\n   * Attaches a custom key event handler which is run before keys are processed,\n   * giving consumers of xterm.js ultimate control as to what keys should be\n   * processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns whether\n   * the event should be processed by xterm.js.\n   */\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\n    this._customKeyEventHandler = customKeyEventHandler;\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this.linkifier2.registerLinkProvider(linkProvider);\n  }\n\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    const joinerId = this._characterJoinerService.register(handler);\n    this.refresh(0, this.rows - 1);\n    return joinerId;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): void {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    if (this._characterJoinerService.deregister(joinerId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public registerMarker(cursorYOffset: number): IMarker {\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    return this._decorationService.registerDecoration(decorationOptions);\n  }\n\n  /**\n   * Gets whether the terminal has an active selection.\n   */\n  public hasSelection(): boolean {\n    return this._selectionService ? this._selectionService.hasSelection : false;\n  }\n\n  /**\n   * Selects text within the terminal.\n   * @param column The column the selection starts at..\n   * @param row The row the selection starts at.\n   * @param length The length of the selection.\n   */\n  public select(column: number, row: number, length: number): void {\n    this._selectionService!.setSelection(column, row, length);\n  }\n\n  /**\n   * Gets the terminal's current selection, this is useful for implementing copy\n   * behavior outside of xterm.js.\n   */\n  public getSelection(): string {\n    return this._selectionService ? this._selectionService.selectionText : '';\n  }\n\n  public getSelectionPosition(): IBufferRange | undefined {\n    if (!this._selectionService || !this._selectionService.hasSelection) {\n      return undefined;\n    }\n\n    return {\n      start: {\n        x: this._selectionService.selectionStart![0],\n        y: this._selectionService.selectionStart![1]\n      },\n      end: {\n        x: this._selectionService.selectionEnd![0],\n        y: this._selectionService.selectionEnd![1]\n      }\n    };\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._selectionService?.clearSelection();\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._selectionService?.selectAll();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._selectionService?.selectLines(start, end);\n  }\n\n  /**\n   * Handle a keydown [KeyboardEvent].\n   *\n   * [KeyboardEvent]: https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   */\n  protected _keyDown(event: KeyboardEvent): boolean | undefined {\n    this._keyDownHandled = false;\n    this._keyDownSeen = true;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n      return false;\n    }\n\n    // Ignore composing with Alt key on Mac when macOptionIsMeta is enabled\n    const shouldIgnoreComposition = this.browser.isMac && this.options.macOptionIsMeta && event.altKey;\n\n    if (!shouldIgnoreComposition && !this._compositionHelper!.keydown(event)) {\n      if (this.options.scrollOnUserInput && this.buffer.ybase !== this.buffer.ydisp) {\n        this.scrollToBottom();\n      }\n      return false;\n    }\n\n    if (!shouldIgnoreComposition && (event.key === 'Dead' || event.key === 'AltGraph')) {\n      this._unprocessedDeadKey = true;\n    }\n\n    const result = evaluateKeyboardEvent(event, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n\n    this.updateCursorStyle(event);\n\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\n      const scrollCount = this.rows - 1;\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\n      return this.cancel(event, true);\n    }\n\n    if (result.type === KeyboardResultType.SELECT_ALL) {\n      this.selectAll();\n    }\n\n    if (this._isThirdLevelShift(this.browser, event)) {\n      return true;\n    }\n\n    if (result.cancel) {\n      // The event is canceled at the end already, is this necessary?\n      this.cancel(event, true);\n    }\n\n    if (!result.key) {\n      return true;\n    }\n\n    // HACK: Process A-Z in the keypress event to fix an issue with macOS IMEs where lower case\n    // letters cannot be input while caps lock is on.\n    if (event.key && !event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n      if (event.key.charCodeAt(0) >= 65 && event.key.charCodeAt(0) <= 90) {\n        return true;\n      }\n    }\n\n    if (this._unprocessedDeadKey) {\n      this._unprocessedDeadKey = false;\n      return true;\n    }\n\n    // If ctrl+c or enter is being sent, clear out the textarea. This is done so that screen readers\n    // will announce deleted characters. This will not work 100% of the time but it should cover\n    // most scenarios.\n    if (result.key === C0.ETX || result.key === C0.CR) {\n      this.textarea!.value = '';\n    }\n\n    this._onKey.fire({ key: result.key, domEvent: event });\n    this._showCursor();\n    this.coreService.triggerDataEvent(result.key, true);\n\n    // Cancel events when not in screen reader mode so events don't get bubbled up and handled by\n    // other listeners. When screen reader mode is enabled, we don't cancel them (unless ctrl or alt\n    // is also depressed) so that the cursor textarea can be updated, which triggers the screen\n    // reader to read it.\n    if (!this.optionsService.rawOptions.screenReaderMode || event.altKey || event.ctrlKey) {\n      return this.cancel(event, true);\n    }\n\n    this._keyDownHandled = true;\n  }\n\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\n    const thirdLevelKey =\n      (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.altKey && ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.getModifierState('AltGraph'));\n\n    if (ev.type === 'keypress') {\n      return thirdLevelKey;\n    }\n\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n  }\n\n  protected _keyUp(ev: KeyboardEvent): void {\n    this._keyDownSeen = false;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return;\n    }\n\n    if (!wasModifierKeyOnlyEvent(ev)) {\n      this.focus();\n    }\n\n    this.updateCursorStyle(ev);\n    this._keyPressHandled = false;\n  }\n\n  /**\n   * Handle a keypress event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keypress event to be handled.\n   */\n  protected _keyPress(ev: KeyboardEvent): boolean {\n    let key;\n\n    this._keyPressHandled = false;\n\n    if (this._keyDownHandled) {\n      return false;\n    }\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return false;\n    }\n\n    this.cancel(ev);\n\n    if (ev.charCode) {\n      key = ev.charCode;\n    } else if (ev.which === null || ev.which === undefined) {\n      key = ev.keyCode;\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\n      key = ev.which;\n    } else {\n      return false;\n    }\n\n    if (!key || (\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\n    )) {\n      return false;\n    }\n\n    key = String.fromCharCode(key);\n\n    this._onKey.fire({ key, domEvent: ev });\n    this._showCursor();\n    this.coreService.triggerDataEvent(key, true);\n\n    this._keyPressHandled = true;\n\n    // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n    // keys could be ignored\n    this._unprocessedDeadKey = false;\n\n    return true;\n  }\n\n  /**\n   * Handle an input event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n   * @param ev The input event to be handled.\n   */\n  protected _inputEvent(ev: InputEvent): boolean {\n    // Only support emoji IMEs when screen reader mode is disabled as the event must bubble up to\n    // support reading out character input which can doubling up input characters\n    // Based on these event traces: https://github.com/xtermjs/xterm.js/issues/3679\n    if (ev.data && ev.inputType === 'insertText' && (!ev.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {\n      if (this._keyPressHandled) {\n        return false;\n      }\n\n      // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n      // keys could be ignored\n      this._unprocessedDeadKey = false;\n\n      const text = ev.data;\n      this.coreService.triggerDataEvent(text, true);\n\n      this.cancel(ev);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      // Check if we still need to measure the char size (fixes #785).\n      if (this._charSizeService && !this._charSizeService.hasValidSize) {\n        this._charSizeService.measure();\n      }\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  private _afterResize(x: number, y: number): void {\n    this._charSizeService?.measure();\n\n    // Sync the scroll area to make sure scroll events don't fire and scroll the viewport to an\n    // invalid location\n    this.viewport?.syncScrollArea(true);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.clearAllMarkers();\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    // IMPORTANT: Fire scroll event before viewport is reset. This ensures embedders get the clear\n    // scroll event and that the viewport's state will be valid for immediate writes.\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n    this.viewport?.reset();\n    this.refresh(0, this.rows - 1);\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    const customKeyEventHandler = this._customKeyEventHandler;\n\n    this._setup();\n    super.reset();\n    this._selectionService?.reset();\n    this._decorationService.reset();\n    this.viewport?.reset();\n\n    // reattach\n    this._customKeyEventHandler = customKeyEventHandler;\n\n    // do a full screen refresh\n    this.refresh(0, this.rows - 1);\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderService?.clearTextureAtlas();\n  }\n\n  private _reportFocus(): void {\n    if (this.element?.classList.contains('focus')) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    } else {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n  }\n\n  private _reportWindowsOptions(type: WindowsOptionsReportType): void {\n    if (!this._renderService) {\n      return;\n    }\n\n    switch (type) {\n      case WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n        const canvasWidth = this._renderService.dimensions.css.canvas.width.toFixed(0);\n        const canvasHeight = this._renderService.dimensions.css.canvas.height.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[4;${canvasHeight};${canvasWidth}t`);\n        break;\n      case WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n        const cellWidth = this._renderService.dimensions.css.cell.width.toFixed(0);\n        const cellHeight = this._renderService.dimensions.css.cell.height.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[6;${cellHeight};${cellWidth}t`);\n        break;\n    }\n  }\n\n  // TODO: Remove cancel function and cancelEvents option\n  public cancel(ev: Event, force?: boolean): boolean | undefined {\n    if (!this.options.cancelEvents && !force) {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n}\n\n/**\n * Helpers\n */\n\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst RENDER_DEBOUNCE_THRESHOLD_MS = 1000; // 1 Second\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to update screen readers to update at most once configurable interval of time.\n */\nexport class TimeBasedDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n\n  // The last moment that the Terminal was refreshed at\n  private _lastRefreshMs = 0;\n  // Whether a trailing refresh should be triggered due to a refresh request that was throttled\n  private _additionalRefreshRequested = false;\n\n  private _refreshTimeoutID: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _debounceThresholdMS = RENDER_DEBOUNCE_THRESHOLD_MS\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._refreshTimeoutID) {\n      clearTimeout(this._refreshTimeoutID);\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    // Only refresh if the time since last refresh is above a threshold, otherwise wait for\n    // enough time to pass before refreshing again.\n    const refreshRequestTime: number = Date.now();\n    if (refreshRequestTime - this._lastRefreshMs >= this._debounceThresholdMS) {\n      // Enough time has lapsed since the last refresh; refresh immediately\n      this._lastRefreshMs = refreshRequestTime;\n      this._innerRefresh();\n    } else if (!this._additionalRefreshRequested) {\n      // This is the first additional request throttled; set up trailing refresh\n      const elapsed = refreshRequestTime - this._lastRefreshMs;\n      const waitPeriodBeforeTrailingRefresh = this._debounceThresholdMS - elapsed;\n      this._additionalRefreshRequested = true;\n\n      this._refreshTimeoutID = window.setTimeout(() => {\n        this._lastRefreshMs = Date.now();\n        this._innerRefresh();\n        this._additionalRefreshRequested = false;\n        this._refreshTimeoutID = undefined; // No longer need to clear the timeout\n      }, waitPeriodBeforeTrailingRefresh);\n    }\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IViewport, ReadonlyColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\ninterface ISmoothScrollState {\n  startTime: number;\n  origin: number;\n  target: number;\n}\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport extends Disposable implements IViewport {\n  public scrollBarWidth: number = 0;\n  private _currentRowHeight: number = 0;\n  private _currentDeviceCellHeight: number = 0;\n  private _lastRecordedBufferLength: number = 0;\n  private _lastRecordedViewportHeight: number = 0;\n  private _lastRecordedBufferHeight: number = 0;\n  private _lastTouchY: number = 0;\n  private _lastScrollTop: number = 0;\n  private _activeBuffer: IBuffer;\n  private _renderDimensions: IRenderDimensions;\n\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\n  // quick fix and could have a more robust solution in place that reset the value when needed.\n  private _wheelPartialScroll: number = 0;\n\n  private _refreshAnimationFrame: number | null = null;\n  private _ignoreNextScrollEvent: boolean = false;\n  private _smoothScrollState: ISmoothScrollState = {\n    startTime: 0,\n    origin: -1,\n    target: -1\n  };\n\n  private readonly _onRequestScrollLines = this.register(new EventEmitter<{ amount: number, suppressScrollEvent: boolean }>());\n  public readonly onRequestScrollLines = this._onRequestScrollLines.event;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _scrollArea: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that\n    // case, therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._handleScroll.bind(this)));\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n    this._renderDimensions = this._renderService.dimensions;\n    this.register(this._renderService.onDimensionsChange(e => this._renderDimensions = e));\n\n    this._handleThemeChange(themeService.colors);\n    this.register(themeService.onChangeColors(e => this._handleThemeChange(e)));\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.syncScrollArea()));\n\n    // Perform this async to ensure the ICharSizeService is ready.\n    setTimeout(() => this.syncScrollArea());\n  }\n\n  private _handleThemeChange(colors: ReadonlyColorSet): void {\n    this._viewportElement.style.backgroundColor = colors.background.css;\n  }\n\n  public reset(): void {\n    this._currentRowHeight = 0;\n    this._currentDeviceCellHeight = 0;\n    this._lastRecordedBufferLength = 0;\n    this._lastRecordedViewportHeight = 0;\n    this._lastRecordedBufferHeight = 0;\n    this._lastTouchY = 0;\n    this._lastScrollTop = 0;\n    // Sync on next animation frame to ensure the new terminal state is used\n    this._coreBrowserService.window.requestAnimationFrame(() => this.syncScrollArea());\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private _refresh(immediate: boolean): void {\n    if (immediate) {\n      this._innerRefresh();\n      if (this._refreshAnimationFrame !== null) {\n        this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame);\n      }\n      return;\n    }\n    if (this._refreshAnimationFrame === null) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._innerRefresh());\n    }\n  }\n\n  private _innerRefresh(): void {\n    if (this._charSizeService.height > 0) {\n      this._currentRowHeight = this._renderService.dimensions.device.cell.height / this._coreBrowserService.dpr;\n      this._currentDeviceCellHeight = this._renderService.dimensions.device.cell.height;\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.css.canvas.height);\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\n        this._lastRecordedBufferHeight = newBufferHeight;\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this._bufferService.buffer.ydisp * this._currentRowHeight;\n    if (this._viewportElement.scrollTop !== scrollTop) {\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\n      // want this event to scroll the terminal\n      this._ignoreNextScrollEvent = true;\n      this._viewportElement.scrollTop = scrollTop;\n    }\n\n    this._refreshAnimationFrame = null;\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(immediate: boolean = false): void {\n    // If buffer height changed\n    if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) {\n      this._lastRecordedBufferLength = this._bufferService.buffer.lines.length;\n      this._refresh(immediate);\n      return;\n    }\n\n    // If viewport height changed\n    if (this._lastRecordedViewportHeight !== this._renderService.dimensions.css.canvas.height) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the buffer position doesn't match last scroll top\n    if (this._lastScrollTop !== this._activeBuffer.ydisp * this._currentRowHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If row height changed\n    if (this._renderDimensions.device.cell.height !== this._currentDeviceCellHeight) {\n      this._refresh(immediate);\n      return;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private _handleScroll(ev: Event): void {\n    // Record current scroll top position\n    this._lastScrollTop = this._viewportElement.scrollTop;\n\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this._viewportElement.offsetParent) {\n      return;\n    }\n\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\n    if (this._ignoreNextScrollEvent) {\n      this._ignoreNextScrollEvent = false;\n      // Still trigger the scroll so lines get refreshed\n      this._onRequestScrollLines.fire({ amount: 0, suppressScrollEvent: true });\n      return;\n    }\n\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n    const diff = newRow - this._bufferService.buffer.ydisp;\n    this._onRequestScrollLines.fire({ amount: diff, suppressScrollEvent: true });\n  }\n\n  private _smoothScroll(): void {\n    // Check valid state\n    if (this._isDisposed || this._smoothScrollState.origin === -1 || this._smoothScrollState.target === -1) {\n      return;\n    }\n\n    // Calculate position complete\n    const percent = this._smoothScrollPercent();\n    this._viewportElement.scrollTop = this._smoothScrollState.origin + Math.round(percent * (this._smoothScrollState.target - this._smoothScrollState.origin));\n\n    // Continue or finish smooth scroll\n    if (percent < 1) {\n      this._coreBrowserService.window.requestAnimationFrame(() => this._smoothScroll());\n    } else {\n      this._clearSmoothScrollState();\n    }\n  }\n\n  private _smoothScrollPercent(): number {\n    if (!this._optionsService.rawOptions.smoothScrollDuration || !this._smoothScrollState.startTime) {\n      return 1;\n    }\n    return Math.max(Math.min((Date.now() - this._smoothScrollState.startTime) / this._optionsService.rawOptions.smoothScrollDuration, 1), 0);\n  }\n\n  private _clearSmoothScrollState(): void {\n    this._smoothScrollState.startTime = 0;\n    this._smoothScrollState.origin = -1;\n    this._smoothScrollState.target = -1;\n  }\n\n  /**\n   * Handles bubbling of scroll event in case the viewport has reached top or bottom\n   * @param ev The scroll event.\n   * @param amount The amount scrolled\n   */\n  private _bubbleScroll(ev: Event, amount: number): boolean {\n    const scrollPosFromTop = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n    if ((amount < 0 && this._viewportElement.scrollTop !== 0) ||\n      (amount > 0 && scrollPosFromTop < this._lastRecordedBufferHeight)) {\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public handleWheel(ev: WheelEvent): boolean {\n    const amount = this._getPixelsScrolled(ev);\n    if (amount === 0) {\n      return false;\n    }\n    if (!this._optionsService.rawOptions.smoothScrollDuration) {\n      this._viewportElement.scrollTop += amount;\n    } else {\n      this._smoothScrollState.startTime = Date.now();\n      if (this._smoothScrollPercent() < 1) {\n        this._smoothScrollState.origin = this._viewportElement.scrollTop;\n        if (this._smoothScrollState.target === -1) {\n          this._smoothScrollState.target = this._viewportElement.scrollTop + amount;\n        } else {\n          this._smoothScrollState.target += amount;\n        }\n        this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0);\n        this._smoothScroll();\n      } else {\n        this._clearSmoothScrollState();\n      }\n    }\n    return this._bubbleScroll(ev, amount);\n  }\n\n  public scrollLines(disp: number): void {\n    if (disp === 0) {\n      return;\n    }\n    if (!this._optionsService.rawOptions.smoothScrollDuration) {\n      this._onRequestScrollLines.fire({ amount: disp, suppressScrollEvent: false });\n    } else {\n      const amount = disp * this._currentRowHeight;\n      this._smoothScrollState.startTime = Date.now();\n      if (this._smoothScrollPercent() < 1) {\n        this._smoothScrollState.origin = this._viewportElement.scrollTop;\n        this._smoothScrollState.target = this._smoothScrollState.origin + amount;\n        this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0);\n        this._smoothScroll();\n      } else {\n        this._clearSmoothScrollState();\n      }\n    }\n  }\n\n  private _getPixelsScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      amount *= this._currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._currentRowHeight * this._bufferService.rows;\n    }\n    return amount;\n  }\n\n\n  public getBufferElements(startLine: number, endLine?: number): { bufferElements: HTMLElement[], cursorElement?: HTMLElement } {\n    let currentLine: string = '';\n    let cursorElement: HTMLElement | undefined;\n    const bufferElements: HTMLElement[] = [];\n    const end = endLine ?? this._bufferService.buffer.lines.length;\n    const lines = this._bufferService.buffer.lines;\n    for (let i = startLine; i < end; i++) {\n      const line = lines.get(i);\n      if (!line) {\n        continue;\n      }\n      const isWrapped = lines.get(i + 1)?.isWrapped;\n      currentLine += line.translateToString(!isWrapped);\n      if (!isWrapped || i === lines.length - 1) {\n        const div = document.createElement('div');\n        div.textContent = currentLine;\n        bufferElements.push(div);\n        if (currentLine.length > 0) {\n          cursorElement = div;\n        }\n        currentLine = '';\n      }\n    }\n    return { bufferElements, cursorElement };\n  }\n\n  /**\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\n   * is being used.\n   * @param ev The mouse wheel event.\n   */\n  public getLinesScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_LINE\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\n      this._wheelPartialScroll += amount;\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n      this._wheelPartialScroll %= 1;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  private _applyScrollModifier(amount: number, ev: WheelEvent): number {\n    const modifier = this._optionsService.rawOptions.fastScrollModifier;\n    // Multiply the scroll speed when the modifier is down\n    if ((modifier === 'alt' && ev.altKey) ||\n      (modifier === 'ctrl' && ev.ctrlKey) ||\n      (modifier === 'shift' && ev.shiftKey)) {\n      return amount * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity;\n    }\n\n    return amount * this._optionsService.rawOptions.scrollSensitivity;\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public handleTouchStart(ev: TouchEvent): void {\n    this._lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public handleTouchMove(ev: TouchEvent): boolean {\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\n    this._lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += deltaY;\n    return this._bubbleScroll(ev, deltaY);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IRenderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration } from 'common/services/Services';\n\nexport class BufferDecorationRenderer extends Disposable {\n  private readonly _container: HTMLElement;\n  private readonly _decorationElements: Map<IInternalDecoration, HTMLElement> = new Map();\n\n  private _animationFrame: number | undefined;\n  private _altBufferIsActive: boolean = false;\n  private _dimensionsChanged: boolean = false;\n\n  constructor(\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    this._container = document.createElement('div');\n    this._container.classList.add('xterm-decoration-container');\n    this._screenElement.appendChild(this._container);\n\n    this.register(this._renderService.onRenderedViewportChange(() => this._doRefreshDecorations()));\n    this.register(this._renderService.onDimensionsChange(() => {\n      this._dimensionsChanged = true;\n      this._queueRefresh();\n    }));\n    this.register(addDisposableDomListener(window, 'resize', () => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;\n    }));\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh()));\n    this.register(this._decorationService.onDecorationRemoved(decoration => this._removeDecoration(decoration)));\n    this.register(toDisposable(() => {\n      this._container.remove();\n      this._decorationElements.clear();\n    }));\n  }\n\n  private _queueRefresh(): void {\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._renderService.addRefreshCallback(() => {\n      this._doRefreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n\n  private _doRefreshDecorations(): void {\n    for (const decoration of this._decorationService.decorations) {\n      this._renderDecoration(decoration);\n    }\n    this._dimensionsChanged = false;\n  }\n\n  private _renderDecoration(decoration: IInternalDecoration): void {\n    this._refreshStyle(decoration);\n    if (this._dimensionsChanged) {\n      this._refreshXPosition(decoration);\n    }\n  }\n\n  private _createElement(decoration: IInternalDecoration): HTMLElement {\n    const element = document.createElement('div');\n    element.classList.add('xterm-decoration');\n    element.classList.toggle('xterm-decoration-top-layer', decoration?.options?.layer === 'top');\n    element.style.width = `${Math.round((decoration.options.width || 1) * this._renderService.dimensions.css.cell.width)}px`;\n    element.style.height = `${(decoration.options.height || 1) * this._renderService.dimensions.css.cell.height}px`;\n    element.style.top = `${(decoration.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.css.cell.height}px`;\n    element.style.lineHeight = `${this._renderService.dimensions.css.cell.height}px`;\n\n    const x = decoration.options.x ?? 0;\n    if (x && x > this._bufferService.cols) {\n      // exceeded the container width, so hide\n      element.style.display = 'none';\n    }\n    this._refreshXPosition(decoration, element);\n\n    return element;\n  }\n\n  private _refreshStyle(decoration: IInternalDecoration): void {\n    const line = decoration.marker.line - this._bufferService.buffers.active.ydisp;\n    if (line < 0 || line >= this._bufferService.rows) {\n      // outside of viewport\n      if (decoration.element) {\n        decoration.element.style.display = 'none';\n        decoration.onRenderEmitter.fire(decoration.element);\n      }\n    } else {\n      let element = this._decorationElements.get(decoration);\n      if (!element) {\n        element = this._createElement(decoration);\n        decoration.element = element;\n        this._decorationElements.set(decoration, element);\n        this._container.appendChild(element);\n        decoration.onDispose(() => {\n          this._decorationElements.delete(decoration);\n          element!.remove();\n        });\n      }\n      element.style.top = `${line * this._renderService.dimensions.css.cell.height}px`;\n      element.style.display = this._altBufferIsActive ? 'none' : 'block';\n      decoration.onRenderEmitter.fire(element);\n    }\n  }\n\n  private _refreshXPosition(decoration: IInternalDecoration, element: HTMLElement | undefined = decoration.element): void {\n    if (!element) {\n      return;\n    }\n    const x = decoration.options.x ?? 0;\n    if ((decoration.options.anchor || 'left') === 'right') {\n      element.style.right = x ? `${x * this._renderService.dimensions.css.cell.width}px` : '';\n    } else {\n      element.style.left = x ? `${x * this._renderService.dimensions.css.cell.width}px` : '';\n    }\n  }\n\n  private _removeDecoration(decoration: IInternalDecoration): void {\n    this._decorationElements.get(decoration)?.remove();\n    this._decorationElements.delete(decoration);\n    decoration.dispose();\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInternalDecoration } from 'common/services/Services';\n\nexport interface IColorZoneStore {\n  readonly zones: IColorZone[];\n  clear(): void;\n  addDecoration(decoration: IInternalDecoration): void;\n  /**\n   * Sets the amount of padding in lines that will be added between zones, if new lines intersect\n   * the padding they will be merged into the same zone.\n   */\n  setPadding(padding: { [position: string]: number }): void;\n}\n\nexport interface IColorZone {\n  /** Color in a format supported by canvas' fillStyle. */\n  color: string;\n  position: 'full' | 'left' | 'center' | 'right' | undefined;\n  startBufferLine: number;\n  endBufferLine: number;\n}\n\ninterface IMinimalDecorationForColorZone {\n  marker: Pick<IInternalDecoration['marker'], 'line'>;\n  options: Pick<IInternalDecoration['options'], 'overviewRulerOptions'>;\n}\n\nexport class ColorZoneStore implements IColorZoneStore {\n  private _zones: IColorZone[] = [];\n\n  // The zone pool is used to keep zone objects from being freed between clearing the color zone\n  // store and fetching the zones. This helps reduce GC pressure since the color zones are\n  // accumulated on potentially every scroll event.\n  private _zonePool: IColorZone[] = [];\n  private _zonePoolIndex = 0;\n\n  private _linePadding: { [position: string]: number } = {\n    full: 0,\n    left: 0,\n    center: 0,\n    right: 0\n  };\n\n  public get zones(): IColorZone[] {\n    // Trim the zone pool to free unused memory\n    this._zonePool.length = Math.min(this._zonePool.length, this._zones.length);\n    return this._zones;\n  }\n\n  public clear(): void {\n    this._zones.length = 0;\n    this._zonePoolIndex = 0;\n  }\n\n  public addDecoration(decoration: IMinimalDecorationForColorZone): void {\n    if (!decoration.options.overviewRulerOptions) {\n      return;\n    }\n    for (const z of this._zones) {\n      if (z.color === decoration.options.overviewRulerOptions.color &&\n          z.position === decoration.options.overviewRulerOptions.position) {\n        if (this._lineIntersectsZone(z, decoration.marker.line)) {\n          return;\n        }\n        if (this._lineAdjacentToZone(z, decoration.marker.line, decoration.options.overviewRulerOptions.position)) {\n          this._addLineToZone(z, decoration.marker.line);\n          return;\n        }\n      }\n    }\n    // Create using zone pool if possible\n    if (this._zonePoolIndex < this._zonePool.length) {\n      this._zonePool[this._zonePoolIndex].color = decoration.options.overviewRulerOptions.color;\n      this._zonePool[this._zonePoolIndex].position = decoration.options.overviewRulerOptions.position;\n      this._zonePool[this._zonePoolIndex].startBufferLine = decoration.marker.line;\n      this._zonePool[this._zonePoolIndex].endBufferLine = decoration.marker.line;\n      this._zones.push(this._zonePool[this._zonePoolIndex++]);\n      return;\n    }\n    // Create\n    this._zones.push({\n      color: decoration.options.overviewRulerOptions.color,\n      position: decoration.options.overviewRulerOptions.position,\n      startBufferLine: decoration.marker.line,\n      endBufferLine: decoration.marker.line\n    });\n    this._zonePool.push(this._zones[this._zones.length - 1]);\n    this._zonePoolIndex++;\n  }\n\n  public setPadding(padding: { [position: string]: number }): void {\n    this._linePadding = padding;\n  }\n\n  private _lineIntersectsZone(zone: IColorZone, line: number): boolean {\n    return (\n      line >= zone.startBufferLine &&\n      line <= zone.endBufferLine\n    );\n  }\n\n  private _lineAdjacentToZone(zone: IColorZone, line: number, position: IColorZone['position']): boolean {\n    return (\n      (line >= zone.startBufferLine - this._linePadding[position || 'full']) &&\n      (line <= zone.endBufferLine + this._linePadding[position || 'full'])\n    );\n  }\n\n  private _addLineToZone(zone: IColorZone, line: number): void {\n    zone.startBufferLine = Math.min(zone.startBufferLine, line);\n    zone.endBufferLine = Math.max(zone.endBufferLine, line);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorZoneStore, IColorZone, IColorZoneStore } from 'browser/decorations/ColorZoneStore';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\n// Helper objects to avoid excessive calculation and garbage collection during rendering. These are\n// static values for each render and can be accessed using the decoration position as the key.\nconst drawHeight = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawWidth = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawX = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\n\nexport class OverviewRulerRenderer extends Disposable {\n  private readonly _canvas: HTMLCanvasElement;\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _colorZoneStore: IColorZoneStore = new ColorZoneStore();\n  private get _width(): number {\n    return this._optionsService.options.overviewRulerWidth || 0;\n  }\n  private _animationFrame: number | undefined;\n\n  private _shouldUpdateDimensions: boolean | undefined = true;\n  private _shouldUpdateAnchor: boolean | undefined = true;\n  private _lastKnownBufferLength: number = 0;\n\n  private _containerHeight: number | undefined;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowseService: ICoreBrowserService\n  ) {\n    super();\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add('xterm-decoration-overview-ruler');\n    this._refreshCanvasDimensions();\n    this._viewportElement.parentElement?.insertBefore(this._canvas, this._viewportElement);\n    const ctx = this._canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Ctx cannot be null');\n    } else {\n      this._ctx = ctx;\n    }\n    this._registerDecorationListeners();\n    this._registerBufferChangeListeners();\n    this._registerDimensionChangeListeners();\n    this.register(toDisposable(() => {\n      this._canvas?.remove();\n    }));\n  }\n\n  /**\n   * On decoration add or remove, redraw\n   */\n  private _registerDecorationListeners(): void {\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh(undefined, true)));\n    this.register(this._decorationService.onDecorationRemoved(() => this._queueRefresh(undefined, true)));\n  }\n\n  /**\n   * On buffer change, redraw\n   * and hide the canvas if the alt buffer is active\n   */\n  private _registerBufferChangeListeners(): void {\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._canvas!.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? 'none' : 'block';\n    }));\n    this.register(this._bufferService.onScroll(() => {\n      if (this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length) {\n        this._refreshDrawHeightConstants();\n        this._refreshColorZonePadding();\n      }\n    }));\n  }\n  /**\n   * On dimension change, update canvas dimensions\n   * and then redraw\n   */\n  private _registerDimensionChangeListeners(): void {\n    // container height changed\n    this.register(this._renderService.onRender((): void => {\n      if (!this._containerHeight || this._containerHeight !== this._screenElement.clientHeight) {\n        this._queueRefresh(true);\n        this._containerHeight = this._screenElement.clientHeight;\n      }\n    }));\n    // overview ruler width changed\n    this.register(this._optionsService.onSpecificOptionChange('overviewRulerWidth', () => this._queueRefresh(true)));\n    // device pixel ratio changed\n    this.register(addDisposableDomListener(this._coreBrowseService.window, 'resize', () => this._queueRefresh(true)));\n    // set the canvas dimensions\n    this._queueRefresh(true);\n  }\n\n  private _refreshDrawConstants(): void {\n    // width\n    const outerWidth = Math.floor(this._canvas.width / 3);\n    const innerWidth = Math.ceil(this._canvas.width / 3);\n    drawWidth.full = this._canvas.width;\n    drawWidth.left = outerWidth;\n    drawWidth.center = innerWidth;\n    drawWidth.right = outerWidth;\n    // height\n    this._refreshDrawHeightConstants();\n    // x\n    drawX.full = 0;\n    drawX.left = 0;\n    drawX.center = drawWidth.left;\n    drawX.right = drawWidth.left + drawWidth.center;\n  }\n\n  private _refreshDrawHeightConstants(): void {\n    drawHeight.full = Math.round(2 * this._coreBrowseService.dpr);\n    // Calculate actual pixels per line\n    const pixelsPerLine = this._canvas.height / this._bufferService.buffer.lines.length;\n    // Clamp actual pixels within a range\n    const nonFullHeight = Math.round(Math.max(Math.min(pixelsPerLine, 12), 6) * this._coreBrowseService.dpr);\n    drawHeight.left = nonFullHeight;\n    drawHeight.center = nonFullHeight;\n    drawHeight.right = nonFullHeight;\n  }\n\n  private _refreshColorZonePadding(): void {\n    this._colorZoneStore.setPadding({\n      full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.full),\n      left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.left),\n      center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.center),\n      right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.right)\n    });\n    this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;\n  }\n\n  private _refreshCanvasDimensions(): void {\n    this._canvas.style.width = `${this._width}px`;\n    this._canvas.width = Math.round(this._width * this._coreBrowseService.dpr);\n    this._canvas.style.height = `${this._screenElement.clientHeight}px`;\n    this._canvas.height = Math.round(this._screenElement.clientHeight * this._coreBrowseService.dpr);\n    this._refreshDrawConstants();\n    this._refreshColorZonePadding();\n  }\n\n  private _refreshDecorations(): void {\n    if (this._shouldUpdateDimensions) {\n      this._refreshCanvasDimensions();\n    }\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._colorZoneStore.clear();\n    for (const decoration of this._decorationService.decorations) {\n      this._colorZoneStore.addDecoration(decoration);\n    }\n    this._ctx.lineWidth = 1;\n    const zones = this._colorZoneStore.zones;\n    for (const zone of zones) {\n      if (zone.position !== 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    for (const zone of zones) {\n      if (zone.position === 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    this._shouldUpdateDimensions = false;\n    this._shouldUpdateAnchor = false;\n  }\n\n  private _renderColorZone(zone: IColorZone): void {\n    this._ctx.fillStyle = zone.color;\n    this._ctx.fillRect(\n      /* x */ drawX[zone.position || 'full'],\n      /* y */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        (zone.startBufferLine / this._bufferService.buffers.active.lines.length) - drawHeight[zone.position || 'full'] / 2\n      ),\n      /* w */ drawWidth[zone.position || 'full'],\n      /* h */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        ((zone.endBufferLine - zone.startBufferLine) / this._bufferService.buffers.active.lines.length) + drawHeight[zone.position || 'full']\n      )\n    );\n  }\n\n  private _queueRefresh(updateCanvasDimensions?: boolean, updateAnchor?: boolean): void {\n    this._shouldUpdateDimensions = updateCanvasDimensions || this._shouldUpdateDimensions;\n    this._shouldUpdateAnchor = updateAnchor || this._shouldUpdateAnchor;\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._coreBrowseService.window.requestAnimationFrame(() => {\n      this._refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderService } from 'browser/services/Services';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\nimport { C0 } from 'common/data/EscapeSequences';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private _isComposing: boolean;\n  public get isComposing(): boolean { return this._isComposing; }\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private _compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private _isSendingComposition: boolean;\n\n  /**\n   * Data already sent due to keydown event.\n   */\n  private _dataAlreadySent: string;\n\n  constructor(\n    private readonly _textarea: HTMLTextAreaElement,\n    private readonly _compositionView: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    this._isComposing = false;\n    this._isSendingComposition = false;\n    this._compositionPosition = { start: 0, end: 0 };\n    this._dataAlreadySent = '';\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this._isComposing = true;\n    this._compositionPosition.start = this._textarea.value.length;\n    this._compositionView.textContent = '';\n    this._dataAlreadySent = '';\n    this._compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param ev The event.\n   */\n  public compositionupdate(ev: Pick<CompositionEvent, 'data'>): void {\n    this._compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this._compositionPosition.end = this._textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this._finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @returns Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this._isComposing || this._isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      }\n      if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      }\n      // Finish composition immediately. This is mainly here for the case where enter is\n      // pressed and the handler needs to be triggered before the command is executed.\n      this._finalizeComposition(false);\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this._handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropagation Whether to wait for events to propagate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\n   *   the command is executed.\n   */\n  private _finalizeComposition(waitForPropagation: boolean): void {\n    this._compositionView.classList.remove('active');\n    this._isComposing = false;\n\n    if (!waitForPropagation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this._isSendingComposition = false;\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n      this._coreService.triggerDataEvent(input, true);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this._compositionPosition.start,\n        end: this._compositionPosition.end\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved.\n      // This solution was used because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this._isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this._isSendingComposition) {\n          this._isSendingComposition = false;\n          let input;\n          // Add length of data already sent due to keydown event,\n          // otherwise input characters can be duplicated. (Issue #3191)\n          currentCompositionPosition.start += this._dataAlreadySent.length;\n          if (this._isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this._textarea.value.substring(currentCompositionPosition.start);\n          }\n          if (input.length > 0) {\n            this._coreService.triggerDataEvent(input, true);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private _handleAnyTextareaChanges(): void {\n    const oldValue = this._textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this._isComposing) {\n        const newValue = this._textarea.value;\n\n        const diff = newValue.replace(oldValue, '');\n\n        this._dataAlreadySent = diff;\n\n        if (newValue.length > oldValue.length) {\n          this._coreService.triggerDataEvent(diff, true);\n        } else if (newValue.length < oldValue.length) {\n          this._coreService.triggerDataEvent(`${C0.DEL}`, true);\n        } else if ((newValue.length === oldValue.length) && (newValue !== oldValue)) {\n          this._coreService.triggerDataEvent(newValue, true);\n        }\n\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this._isComposing) {\n      return;\n    }\n\n    if (this._bufferService.buffer.isCursorInViewport) {\n      const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n\n      const cellHeight = this._renderService.dimensions.css.cell.height;\n      const cursorTop = this._bufferService.buffer.y * this._renderService.dimensions.css.cell.height;\n      const cursorLeft = cursorX * this._renderService.dimensions.css.cell.width;\n\n      this._compositionView.style.left = cursorLeft + 'px';\n      this._compositionView.style.top = cursorTop + 'px';\n      this._compositionView.style.height = cellHeight + 'px';\n      this._compositionView.style.lineHeight = cellHeight + 'px';\n      this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n      this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\n      this._textarea.style.left = cursorLeft + 'px';\n      this._textarea.style.top = cursorTop + 'px';\n      // Ensure the text area is at least 1x1, otherwise certain IMEs may break\n      this._textarea.style.width = Math.max(compositionViewBounds.width, 1) + 'px';\n      this._textarea.style.height = Math.max(compositionViewBounds.height, 1) + 'px';\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function getCoordsRelativeToElement(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\n  const rect = element.getBoundingClientRect();\n  const elementStyle = window.getComputedStyle(element);\n  const leftPadding = parseInt(elementStyle.getPropertyValue('padding-left'));\n  const topPadding = parseInt(elementStyle.getPropertyValue('padding-top'));\n  return [\n    event.clientX - rect.left - leftPadding,\n    event.clientY - rect.top - topPadding\n  ];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param window The window object the element belongs to.\n * @param event The mouse event.\n * @param element The terminal's container element.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows n the terminal.\n * @param hasValidCharSize Whether there is a valid character size available.\n * @param cssCellWidth The cell width device pixel render dimensions.\n * @param cssCellHeight The cell height device pixel render dimensions.\n * @param isSelection Whether the request is for the selection or not. This will\n * apply an offset to the x value such that the left half of the cell will\n * select that cell and the right half will select the next cell.\n */\nexport function getCoords(window: Pick<Window, 'getComputedStyle'>, event: Pick<MouseEvent, 'clientX' | 'clientY'>, element: HTMLElement, colCount: number, rowCount: number, hasValidCharSize: boolean, cssCellWidth: number, cssCellHeight: number, isSelection?: boolean): [number, number] | undefined {\n  // Coordinates cannot be measured if there are no valid\n  if (!hasValidCharSize) {\n    return undefined;\n  }\n\n  const coords = getCoordsRelativeToElement(window, event, element);\n  if (!coords) {\n    return undefined;\n  }\n\n  coords[0] = Math.ceil((coords[0] + (isSelection ? cssCellWidth / 2 : 0)) / cssCellWidth);\n  coords[1] = Math.ceil(coords[1] / cssCellHeight);\n\n  // Ensure coordinates are within the terminal viewport. Note that selections\n  // need an addition point of precision to cover the end point (as characters\n  // cover half of one char and half of the next).\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n  return coords;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { C0 } from 'common/data/EscapeSequences';\nimport { IBufferService } from 'common/services/Services';\n\nconst enum Direction {\n  UP = 'A',\n  DOWN = 'B',\n  RIGHT = 'C',\n  LEFT = 'D'\n}\n\n/**\n * Concatenates all the arrow sequences together.\n * Resets the starting row to an unwrapped row, moves to the requested row,\n * then moves to requested col.\n */\nexport function moveToCellSequence(targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startX = bufferService.buffer.x;\n  const startY = bufferService.buffer.y;\n\n  // The alt buffer should try to navigate between rows\n  if (!bufferService.buffer.hasScrollback) {\n    return resetStartingRow(startX, startY, targetX, targetY, bufferService, applicationCursor) +\n      moveToRequestedRow(startY, targetY, bufferService, applicationCursor) +\n      moveToRequestedCol(startX, startY, targetX, targetY, bufferService, applicationCursor);\n  }\n\n  // Only move horizontally for the normal buffer\n  let direction;\n  if (startY === targetY) {\n    direction = startX > targetX ? Direction.LEFT : Direction.RIGHT;\n    return repeat(Math.abs(startX - targetX), sequence(direction, applicationCursor));\n  }\n  direction = startY > targetY ? Direction.LEFT : Direction.RIGHT;\n  const rowDifference = Math.abs(startY - targetY);\n  const cellsToMove = colsFromRowEnd(startY > targetY ? targetX : startX, bufferService) +\n    (rowDifference - 1) * bufferService.cols + 1 /* wrap around 1 row */ +\n    colsFromRowBeginning(startY > targetY ? startX : targetX, bufferService);\n  return repeat(cellsToMove, sequence(direction, applicationCursor));\n}\n\n/**\n * Find the number of cols from a row beginning to a col.\n */\nfunction colsFromRowBeginning(currX: number, bufferService: IBufferService): number {\n  return currX - 1;\n}\n\n/**\n * Find the number of cols from a col to row end.\n */\nfunction colsFromRowEnd(currX: number, bufferService: IBufferService): number {\n  return bufferService.cols - currX;\n}\n\n/**\n * If the initial position of the cursor is on a row that is wrapped, move the\n * cursor up to the first row that is not wrapped to have accurate vertical\n * positioning.\n */\nfunction resetStartingRow(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length === 0) {\n    return '';\n  }\n  return repeat(bufferLine(\n    startX, startY, startX,\n    startY - wrappedRowsForRow(startY, bufferService), false, bufferService\n  ).length, sequence(Direction.LEFT, applicationCursor));\n}\n\n/**\n * Using the reset starting and ending row, move to the requested row,\n * ignoring wrapped rows\n */\nfunction moveToRequestedRow(startY: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startRow = startY - wrappedRowsForRow(startY, bufferService);\n  const endRow = targetY - wrappedRowsForRow(targetY, bufferService);\n\n  const rowsToMove = Math.abs(startRow - endRow) - wrappedRowsCount(startY, targetY, bufferService);\n\n  return repeat(rowsToMove, sequence(verticalDirection(startY, targetY), applicationCursor));\n}\n\n/**\n * Move to the requested col on the ending row\n */\nfunction moveToRequestedCol(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  let startRow;\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(targetY, bufferService);\n  } else {\n    startRow = startY;\n  }\n\n  const endRow = targetY;\n  const direction = horizontalDirection(startX, startY, targetX, targetY, bufferService, applicationCursor);\n\n  return repeat(bufferLine(\n    startX, startRow, targetX, endRow,\n    direction === Direction.RIGHT, bufferService\n  ).length, sequence(direction, applicationCursor));\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Calculates the number of wrapped rows between the unwrapped starting and\n * ending rows. These rows need to ignored since the cursor skips over them.\n */\nfunction wrappedRowsCount(startY: number, targetY: number, bufferService: IBufferService): number {\n  let wrappedRows = 0;\n  const startRow = startY - wrappedRowsForRow(startY, bufferService);\n  const endRow = targetY - wrappedRowsForRow(targetY, bufferService);\n\n  for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n    const direction = verticalDirection(startY, targetY) === Direction.UP ? -1 : 1;\n    const line = bufferService.buffer.lines.get(startRow + (direction * i));\n    if (line?.isWrapped) {\n      wrappedRows++;\n    }\n  }\n\n  return wrappedRows;\n}\n\n/**\n * Calculates the number of wrapped rows that make up a given row.\n * @param currentRow The row to determine how many wrapped rows make it up\n */\nfunction wrappedRowsForRow(currentRow: number, bufferService: IBufferService): number {\n  let rowCount = 0;\n  let line = bufferService.buffer.lines.get(currentRow);\n  let lineWraps = line?.isWrapped;\n\n  while (lineWraps && currentRow >= 0 && currentRow < bufferService.rows) {\n    rowCount++;\n    line = bufferService.buffer.lines.get(--currentRow);\n    lineWraps = line?.isWrapped;\n  }\n\n  return rowCount;\n}\n\n/**\n * Direction determiners\n */\n\n/**\n * Determines if the right or left arrow is needed\n */\nfunction horizontalDirection(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): Direction {\n  let startRow;\n  if (moveToRequestedRow(targetX, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(targetY, bufferService);\n  } else {\n    startRow = startY;\n  }\n\n  if ((startX < targetX &&\n    startRow <= targetY) || // down/right or same y/right\n    (startX >= targetX &&\n    startRow < targetY)) {  // down/left or same y/left\n    return Direction.RIGHT;\n  }\n  return Direction.LEFT;\n}\n\n/**\n * Determines if the up or down arrow is needed\n */\nfunction verticalDirection(startY: number, targetY: number): Direction {\n  return startY > targetY ? Direction.UP : Direction.DOWN;\n}\n\n/**\n * Constructs the string of chars in the buffer from a starting row and col\n * to an ending row and col\n * @param startCol The starting column position\n * @param startRow The starting row position\n * @param endCol The ending column position\n * @param endRow The ending row position\n * @param forward Direction to move\n */\nfunction bufferLine(\n  startCol: number,\n  startRow: number,\n  endCol: number,\n  endRow: number,\n  forward: boolean,\n  bufferService: IBufferService\n): string {\n  let currentCol = startCol;\n  let currentRow = startRow;\n  let bufferStr = '';\n\n  while (currentCol !== endCol || currentRow !== endRow) {\n    currentCol += forward ? 1 : -1;\n\n    if (forward && currentCol > bufferService.cols - 1) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, startCol, currentCol\n      );\n      currentCol = 0;\n      startCol = 0;\n      currentRow++;\n    } else if (!forward && currentCol < 0) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, 0, startCol + 1\n      );\n      currentCol = bufferService.cols - 1;\n      startCol = currentCol;\n      currentRow--;\n    }\n  }\n\n  return bufferStr + bufferService.buffer.translateBufferLineToString(\n    currentRow, false, startCol, currentCol\n  );\n}\n\n/**\n * Constructs the escape sequence for clicking an arrow\n * @param direction The direction to move\n */\nfunction sequence(direction: Direction, applicationCursor: boolean): string {\n  const mod =  applicationCursor ? 'O' : '[';\n  return C0.ESC + mod + direction;\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param str The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { DomRendererRowFactory, RowCss } from 'browser/renderer/dom/DomRendererRowFactory';\nimport { WidthCache } from 'browser/renderer/dom/WidthCache';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { createRenderDimensions } from 'browser/renderer/shared/RendererUtils';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ILinkifier2, ILinkifierEvent, ReadonlyColorSet } from 'browser/Types';\nimport { color } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IInstantiationService, IOptionsService } from 'common/services/Services';\n\n\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\nconst FG_CLASS_PREFIX = 'xterm-fg-';\nconst BG_CLASS_PREFIX = 'xterm-bg-';\nconst FOCUS_CLASS = 'xterm-focus';\nconst SELECTION_CLASS = 'xterm-selection';\n\nlet nextTerminalId = 1;\n\n\n/**\n * A fallback renderer for when canvas is slow. This is not meant to be\n * particularly fast or feature complete, more just stable and usable for when\n * canvas is not an option.\n */\nexport class DomRenderer extends Disposable implements IRenderer {\n  private _rowFactory: DomRendererRowFactory;\n  private _terminalClass: number = nextTerminalId++;\n\n  private _themeStyleElement!: HTMLStyleElement;\n  private _dimensionsStyleElement!: HTMLStyleElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[] = [];\n  private _selectionContainer: HTMLElement;\n  private _widthCache: WidthCache;\n\n  public dimensions: IRenderDimensions;\n\n  public readonly onRequestRedraw = this.register(new EventEmitter<IRequestRedrawEvent>()).event;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IThemeService private readonly _themeService: IThemeService\n  ) {\n    super();\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n    this._rowContainer.style.lineHeight = 'normal';\n    this._rowContainer.setAttribute('aria-hidden', 'true');\n    this._refreshRowElements(this._bufferService.cols, this._bufferService.rows);\n    this._selectionContainer = document.createElement('div');\n    this._selectionContainer.classList.add(SELECTION_CLASS);\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\n\n    this.dimensions = createRenderDimensions();\n    this._updateDimensions();\n    this.register(this._optionsService.onOptionChange(() => this._handleOptionsChanged()));\n\n    this.register(this._themeService.onChangeColors(e => this._injectCss(e)));\n    this._injectCss(this._themeService.colors);\n\n    this._rowFactory = instantiationService.createInstance(DomRendererRowFactory, document);\n\n    this._element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\n    this._screenElement.appendChild(this._rowContainer);\n    this._screenElement.appendChild(this._selectionContainer);\n\n    this.register(this._linkifier2.onShowLinkUnderline(e => this._handleLinkHover(e)));\n    this.register(this._linkifier2.onHideLinkUnderline(e => this._handleLinkLeave(e)));\n\n    this.register(toDisposable(() => {\n      this._element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n\n      // Outside influences such as React unmounts may manipulate the DOM before our disposal.\n      // https://github.com/xtermjs/xterm.js/issues/2960\n      this._rowContainer.remove();\n      this._selectionContainer.remove();\n      this._widthCache.dispose();\n      this._themeStyleElement.remove();\n      this._dimensionsStyleElement.remove();\n    }));\n\n    this._widthCache = new WidthCache(document);\n    this._widthCache.setFont(\n      this._optionsService.rawOptions.fontFamily,\n      this._optionsService.rawOptions.fontSize,\n      this._optionsService.rawOptions.fontWeight,\n      this._optionsService.rawOptions.fontWeightBold\n    );\n    this._setDefaultSpacing();\n  }\n\n  private _updateDimensions(): void {\n    const dpr = this._coreBrowserService.dpr;\n    this.dimensions.device.char.width = this._charSizeService.width * dpr;\n    this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * dpr);\n    this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.device.char.left = 0;\n    this.dimensions.device.char.top = 0;\n    this.dimensions.device.canvas.width = this.dimensions.device.cell.width * this._bufferService.cols;\n    this.dimensions.device.canvas.height = this.dimensions.device.cell.height * this._bufferService.rows;\n    this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / dpr);\n    this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / dpr);\n    this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols;\n    this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;\n\n    for (const element of this._rowElements) {\n      element.style.width = `${this.dimensions.css.canvas.width}px`;\n      element.style.height = `${this.dimensions.css.cell.height}px`;\n      element.style.lineHeight = `${this.dimensions.css.cell.height}px`;\n      // Make sure rows don't overflow onto following row\n      element.style.overflow = 'hidden';\n    }\n\n    if (!this._dimensionsStyleElement) {\n      this._dimensionsStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._dimensionsStyleElement);\n    }\n\n    const styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\n      ` display: inline-block;` +   // TODO: find workaround for inline-block (creates ~20% render penalty)\n      ` height: 100%;` +\n      ` vertical-align: top;` +\n      `}`;\n\n    this._dimensionsStyleElement.textContent = styles;\n\n    this._selectionContainer.style.height = this._viewportElement.style.height;\n    this._screenElement.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._screenElement.style.height = `${this.dimensions.css.canvas.height}px`;\n  }\n\n  private _injectCss(colors: ReadonlyColorSet): void {\n    if (!this._themeStyleElement) {\n      this._themeStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._themeStyleElement);\n    }\n\n    // Base CSS\n    let styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\n      ` color: ${colors.foreground.css};` +\n      ` font-family: ${this._optionsService.rawOptions.fontFamily};` +\n      ` font-size: ${this._optionsService.rawOptions.fontSize}px;` +\n      ` font-kerning: none;` +\n      ` white-space: pre` +\n      `}`;\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .xterm-dim {` +\n      ` color: ${color.multiplyOpacity(colors.foreground, 0.5).css};` +\n      `}`;\n    // Text styles\n    styles +=\n      `${this._terminalSelector} span:not(.${RowCss.BOLD_CLASS}) {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeight};` +\n      `}` +\n      `${this._terminalSelector} span.${RowCss.BOLD_CLASS} {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeightBold};` +\n      `}` +\n      `${this._terminalSelector} span.${RowCss.ITALIC_CLASS} {` +\n      ` font-style: italic;` +\n      `}`;\n    // Blink animation\n    styles +=\n      `@keyframes blink_box_shadow` + `_` + this._terminalClass + ` {` +\n      ` 50% {` +\n      `  border-bottom-style: hidden;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes blink_block` + `_` + this._terminalClass + ` {` +\n      ` 0% {` +\n      `  background-color: ${colors.cursor.css};` +\n      `  color: ${colors.cursorAccent.css};` +\n      ` }` +\n      ` 50% {` +\n      `  background-color: inherit;` +\n      `  color: ${colors.cursor.css};` +\n      ` }` +\n      `}`;\n    // Cursor\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_BLINK_CLASS}:not(.${RowCss.CURSOR_STYLE_BLOCK_CLASS}) {` +\n      ` animation: blink_box_shadow` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_BLINK_CLASS}.${RowCss.CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` animation: blink_block` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` background-color: ${colors.cursor.css};` +\n      ` color: ${colors.cursorAccent.css};` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_OUTLINE_CLASS} {` +\n      ` outline: 1px solid ${colors.cursor.css};` +\n      ` outline-offset: -1px;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_BAR_CLASS} {` +\n      ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${colors.cursor.css} inset;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` border-bottom: 1px ${colors.cursor.css};` +\n      ` border-bottom-style: solid;` +\n      ` height: calc(100% - 1px);` +\n      `}`;\n    // Selection\n    styles +=\n      `${this._terminalSelector} .${SELECTION_CLASS} {` +\n      ` position: absolute;` +\n      ` top: 0;` +\n      ` left: 0;` +\n      ` z-index: 1;` +\n      ` pointer-events: none;` +\n      `}` +\n      `${this._terminalSelector}.focus .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${colors.selectionBackgroundOpaque.css};` +\n      `}` +\n      `${this._terminalSelector} .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${colors.selectionInactiveBackgroundOpaque.css};` +\n      `}`;\n    // Colors\n    for (const [i, c] of colors.ansi.entries()) {\n      styles +=\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i}.${RowCss.DIM_CLASS} { color: ${color.multiplyOpacity(c, 0.5).css}; }` +\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\n    }\n    styles +=\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${color.opaque(colors.background).css}; }` +\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR}.${RowCss.DIM_CLASS} { color: ${color.multiplyOpacity(color.opaque(colors.background), 0.5).css}; }` +\n      `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${colors.foreground.css}; }`;\n\n    this._themeStyleElement.textContent = styles;\n  }\n\n  /**\n   * default letter spacing\n   * Due to rounding issues in dimensions dpr calc glyph might render\n   * slightly too wide or too narrow. The method corrects the stacking offsets\n   * by applying a default letter-spacing for all chars.\n   * The value gets passed to the row factory to avoid setting this value again\n   * (render speedup is roughly 10%).\n   */\n  private _setDefaultSpacing(): void {\n    // measure same char as in CharSizeService to get the base deviation\n    const spacing = this.dimensions.css.cell.width - this._widthCache.get('W', false, false);\n    this._rowContainer.style.letterSpacing = `${spacing}px`;\n    this._rowFactory.defaultSpacing = spacing;\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    this._updateDimensions();\n    this._widthCache.clear();\n    this._setDefaultSpacing();\n  }\n\n  private _refreshRowElements(cols: number, rows: number): void {\n    // Add missing elements\n    for (let i = this._rowElements.length; i <= rows; i++) {\n      const row = document.createElement('div');\n      this._rowContainer.appendChild(row);\n      this._rowElements.push(row);\n    }\n    // Remove excess elements\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    this._refreshRowElements(cols, rows);\n    this._updateDimensions();\n  }\n\n  public handleCharSizeChanged(): void {\n    this._updateDimensions();\n    this._widthCache.clear();\n    this._setDefaultSpacing();\n  }\n\n  public handleBlur(): void {\n    this._rowContainer.classList.remove(FOCUS_CLASS);\n  }\n\n  public handleFocus(): void {\n    this._rowContainer.classList.add(FOCUS_CLASS);\n    this.renderRows(this._bufferService.buffer.y, this._bufferService.buffer.y);\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Remove all selections\n    this._selectionContainer.replaceChildren();\n    this._rowFactory.handleSelectionChanged(start, end, columnSelectMode);\n    this.renderRows(0, this._bufferService.rows - 1);\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Create the selections\n    const documentFragment = document.createDocumentFragment();\n\n    if (columnSelectMode) {\n      const isXFlipped = start[0] > end[0];\n      documentFragment.appendChild(\n        this._createSelectionElement(viewportCappedStartRow, isXFlipped ? end[0] : start[0], isXFlipped ? start[0] : end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\n      );\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const endCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n      // Draw middle rows\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._bufferService.cols, middleRowsCount));\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\n      }\n    }\n    this._selectionContainer.appendChild(documentFragment);\n  }\n\n  /**\n   * Creates a selection element at the specified position.\n   * @param row The row of the selection.\n   * @param colStart The start column.\n   * @param colEnd The end columns.\n   */\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\n    const element = document.createElement('div');\n    element.style.height = `${rowCount * this.dimensions.css.cell.height}px`;\n    element.style.top = `${row * this.dimensions.css.cell.height}px`;\n    element.style.left = `${colStart * this.dimensions.css.cell.width}px`;\n    element.style.width = `${this.dimensions.css.cell.width * (colEnd - colStart)}px`;\n    return element;\n  }\n\n  public handleCursorMove(): void {\n    // No-op, the cursor is drawn when rows are drawn\n  }\n\n  private _handleOptionsChanged(): void {\n    // Force a refresh\n    this._updateDimensions();\n    // Refresh CSS\n    this._injectCss(this._themeService.colors);\n    // update spacing cache\n    this._widthCache.setFont(\n      this._optionsService.rawOptions.fontFamily,\n      this._optionsService.rawOptions.fontSize,\n      this._optionsService.rawOptions.fontWeight,\n      this._optionsService.rawOptions.fontWeightBold\n    );\n    this._setDefaultSpacing();\n  }\n\n  public clear(): void {\n    for (const e of this._rowElements) {\n      /**\n       * NOTE: This used to be `e.innerText = '';` but that doesn't work when using `jsdom` and\n       * `@testing-library/react`\n       *\n       * references:\n       * - https://github.com/testing-library/react-testing-library/issues/1146\n       * - https://github.com/jsdom/jsdom/issues/1245\n       */\n      e.replaceChildren();\n    }\n  }\n\n  public renderRows(start: number, end: number): void {\n    const buffer = this._bufferService.buffer;\n    const cursorAbsoluteY = buffer.ybase + buffer.y;\n    const cursorX = Math.min(buffer.x, this._bufferService.cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n    const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n    const cursorInactiveStyle = this._optionsService.rawOptions.cursorInactiveStyle;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + buffer.ydisp;\n      const rowElement = this._rowElements[y];\n      const lineData = buffer.lines.get(row);\n      if (!rowElement || !lineData) {\n        break;\n      }\n      rowElement.replaceChildren(\n        ...this._rowFactory.createRow(\n          lineData,\n          row,\n          row === cursorAbsoluteY,\n          cursorStyle,\n          cursorInactiveStyle,\n          cursorX,\n          cursorBlink,\n          this.dimensions.css.cell.width,\n          this._widthCache,\n          -1,\n          -1\n        )\n      );\n    }\n  }\n\n  private get _terminalSelector(): string {\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\n  }\n\n  private _handleLinkHover(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n  }\n\n  private _handleLinkLeave(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n  }\n\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\n    /**\n     * NOTE: The linkifier may send out of viewport y-values if:\n     * - negative y-value: the link started at a higher line\n     * - y-value >= maxY: the link ends at a line below viewport\n     *\n     * For negative y-values we can simply adjust x = 0,\n     * as higher up link start means, that everything from\n     * (0,0) is a link under top-down-left-right char progression\n     *\n     * Additionally there might be a small chance of out-of-sync x|y-values\n     * from a race condition of render updates vs. link event handler execution:\n     * - (sync) resize: chances terminal buffer in sync, schedules render update async\n     * - (async) link handler race condition: new buffer metrics, but still on old render state\n     * - (async) render update: brings term metrics and render state back in sync\n     */\n    // clip coords into viewport\n    if (y < 0) x = 0;\n    if (y2 < 0) x2 = 0;\n    const maxY = this._bufferService.rows - 1;\n    y = Math.max(Math.min(y, maxY), 0);\n    y2 = Math.max(Math.min(y2, maxY), 0);\n\n    cols = Math.min(cols, this._bufferService.cols);\n    const buffer = this._bufferService.buffer;\n    const cursorAbsoluteY = buffer.ybase + buffer.y;\n    const cursorX = Math.min(buffer.x, cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n    const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n    const cursorInactiveStyle = this._optionsService.rawOptions.cursorInactiveStyle;\n\n    // refresh rows within link range\n    for (let i = y; i <= y2; ++i) {\n      const row = i + buffer.ydisp;\n      const rowElement = this._rowElements[i];\n      const bufferline = buffer.lines.get(row);\n      if (!rowElement || !bufferline) {\n        break;\n      }\n      rowElement.replaceChildren(\n        ...this._rowFactory.createRow(\n          bufferline,\n          row,\n          row === cursorAbsoluteY,\n          cursorStyle,\n          cursorInactiveStyle,\n          cursorX,\n          cursorBlink,\n          this.dimensions.css.cell.width,\n          this._widthCache,\n          enabled ? (i === y ? x : 0) : -1,\n          enabled ? ((i === y2 ? x2 : cols) - 1) : -1\n        )\n      );\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018, 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, IColor } from 'common/Types';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { WHITESPACE_CELL_CHAR, Attributes } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { color, rgba } from 'common/Color';\nimport { ICharacterJoinerService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { excludeFromContrastRatioDemands } from 'browser/renderer/shared/RendererUtils';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WidthCache } from 'browser/renderer/dom/WidthCache';\nimport { IColorContrastCache } from 'browser/Types';\n\n\nexport const enum RowCss {\n  BOLD_CLASS = 'xterm-bold',\n  DIM_CLASS = 'xterm-dim',\n  ITALIC_CLASS = 'xterm-italic',\n  UNDERLINE_CLASS = 'xterm-underline',\n  OVERLINE_CLASS = 'xterm-overline',\n  STRIKETHROUGH_CLASS = 'xterm-strikethrough',\n  CURSOR_CLASS = 'xterm-cursor',\n  CURSOR_BLINK_CLASS = 'xterm-cursor-blink',\n  CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block',\n  CURSOR_STYLE_OUTLINE_CLASS = 'xterm-cursor-outline',\n  CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar',\n  CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline'\n}\n\n\nexport class DomRendererRowFactory {\n  private _workCell: CellData = new CellData();\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  public defaultSpacing = 0;\n\n  constructor(\n    private readonly _document: Document,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IThemeService private readonly _themeService: IThemeService\n  ) {}\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public createRow(\n    lineData: IBufferLine,\n    row: number,\n    isCursorRow: boolean,\n    cursorStyle: string | undefined,\n    cursorInactiveStyle: string | undefined,\n    cursorX: number,\n    cursorBlink: boolean,\n    cellWidth: number,\n    widthCache: WidthCache,\n    linkStart: number,\n    linkEnd: number\n  ): HTMLSpanElement[] {\n\n    const elements: HTMLSpanElement[] = [];\n    const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n    const colors = this._themeService.colors;\n\n    let lineLength = lineData.getNoBgTrimmedLength();\n    if (isCursorRow && lineLength < cursorX + 1) {\n      lineLength = cursorX + 1;\n    }\n\n    let charElement: HTMLSpanElement | undefined;\n    let cellAmount = 0;\n    let text = '';\n    let oldBg = 0;\n    let oldFg = 0;\n    let oldExt = 0;\n    let oldLinkHover: number | boolean = false;\n    let oldSpacing = 0;\n    let oldIsInSelection: boolean = false;\n    let spacing = 0;\n    const classes: string[] = [];\n\n    const hasHover = linkStart !== -1 && linkEnd !== -1;\n\n    for (let x = 0; x < lineLength; x++) {\n      lineData.loadCell(x, this._workCell);\n      let width = this._workCell.getWidth();\n\n      // The character to the left is a wide character, drawing is owned by the char at x-1\n      if (width === 0) {\n        continue;\n      }\n\n      // If true, indicates that the current character(s) to draw were joined.\n      let isJoined = false;\n      let lastCharX = x;\n\n      // Process any joined character ranges as needed. Because of how the\n      // ranges are produced, we know that they are valid for the characters\n      // and attributes of our input.\n      let cell = this._workCell;\n      if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n        isJoined = true;\n        const range = joinedRanges.shift()!;\n\n        // We already know the exact start and end column of the joined range,\n        // so we get the string and width representing it directly\n        cell = new JoinedCellData(\n          this._workCell,\n          lineData.translateToString(true, range[0], range[1]),\n          range[1] - range[0]\n        );\n\n        // Skip over the cells occupied by this range in the loop\n        lastCharX = range[1] - 1;\n\n        // Recalculate width\n        width = cell.getWidth();\n      }\n\n      const isInSelection = this._isCellInSelection(x, row);\n      const isCursorCell = isCursorRow && x === cursorX;\n      const isLinkHover = hasHover && x >= linkStart && x <= linkEnd;\n\n      let isDecorated = false;\n      this._decorationService.forEachDecorationAtCell(x, row, undefined, d => {\n        isDecorated = true;\n      });\n\n      // get chars to render for this cell\n      let chars = cell.getChars() || WHITESPACE_CELL_CHAR;\n      if (chars === ' ' && (cell.isUnderline() || cell.isOverline())) {\n        chars = '\\xa0';\n      }\n\n      // lookup char render width and calc spacing\n      spacing = width * cellWidth - widthCache.get(chars, cell.isBold(), cell.isItalic());\n\n      if (!charElement) {\n        charElement = this._document.createElement('span');\n      } else {\n        /**\n         * chars can only be merged on existing span if:\n         * - existing span only contains mergeable chars (cellAmount != 0)\n         * - bg did not change (or both are in selection)\n         * - fg did not change (or both are in selection and selection fg is set)\n         * - ext did not change\n         * - underline from hover state did not change\n         * - cell content renders to same letter-spacing\n         * - cell is not cursor\n         */\n        if (\n          cellAmount\n          && (\n            (isInSelection && oldIsInSelection)\n            || (!isInSelection && !oldIsInSelection && cell.bg === oldBg)\n          )\n          && (\n            (isInSelection && oldIsInSelection && colors.selectionForeground)\n            || cell.fg === oldFg\n          )\n          && cell.extended.ext === oldExt\n          && isLinkHover === oldLinkHover\n          && spacing === oldSpacing\n          && !isCursorCell\n          && !isJoined\n          && !isDecorated\n        ) {\n          // no span alterations, thus only account chars skipping all code below\n          text += chars;\n          cellAmount++;\n          continue;\n        } else {\n          /**\n           * cannot merge:\n           * - apply left-over text to old span\n           * - create new span, reset state holders cellAmount & text\n           */\n          if (cellAmount) {\n            charElement.textContent = text;\n          }\n          charElement = this._document.createElement('span');\n          cellAmount = 0;\n          text = '';\n        }\n      }\n      // preserve conditions for next merger eval round\n      oldBg = cell.bg;\n      oldFg = cell.fg;\n      oldExt = cell.extended.ext;\n      oldLinkHover = isLinkHover;\n      oldSpacing = spacing;\n      oldIsInSelection = isInSelection;\n\n      if (isJoined) {\n        // The DOM renderer colors the background of the cursor but for ligatures all cells are\n        // joined. The workaround here is to show a cursor around the whole ligature so it shows up,\n        // the cursor looks the same when on any character of the ligature though\n        if (cursorX >= x && cursorX <= lastCharX) {\n          cursorX = x;\n        }\n      }\n\n      if (!this._coreService.isCursorHidden && isCursorCell) {\n        classes.push(RowCss.CURSOR_CLASS);\n        if (this._coreBrowserService.isFocused) {\n          if (cursorBlink) {\n            classes.push(RowCss.CURSOR_BLINK_CLASS);\n          }\n          classes.push(\n            cursorStyle === 'bar'\n              ? RowCss.CURSOR_STYLE_BAR_CLASS\n              : cursorStyle === 'underline'\n                ? RowCss.CURSOR_STYLE_UNDERLINE_CLASS\n                : RowCss.CURSOR_STYLE_BLOCK_CLASS\n          );\n        } else {\n          if (cursorInactiveStyle) {\n            switch (cursorInactiveStyle) {\n              case 'outline':\n                classes.push(RowCss.CURSOR_STYLE_OUTLINE_CLASS);\n                break;\n              case 'block':\n                classes.push(RowCss.CURSOR_STYLE_BLOCK_CLASS);\n                break;\n              case 'bar':\n                classes.push(RowCss.CURSOR_STYLE_BAR_CLASS);\n                break;\n              case 'underline':\n                classes.push(RowCss.CURSOR_STYLE_UNDERLINE_CLASS);\n                break;\n              default:\n                break;\n            }\n          }\n        }\n      }\n\n      if (cell.isBold()) {\n        classes.push(RowCss.BOLD_CLASS);\n      }\n\n      if (cell.isItalic()) {\n        classes.push(RowCss.ITALIC_CLASS);\n      }\n\n      if (cell.isDim()) {\n        classes.push(RowCss.DIM_CLASS);\n      }\n\n      if (cell.isInvisible()) {\n        text = WHITESPACE_CELL_CHAR;\n      } else {\n        text = cell.getChars() || WHITESPACE_CELL_CHAR;\n      }\n\n      if (cell.isUnderline()) {\n        classes.push(`${RowCss.UNDERLINE_CLASS}-${cell.extended.underlineStyle}`);\n        if (text === ' ') {\n          text = '\\xa0'; // = &nbsp;\n        }\n        if (!cell.isUnderlineColorDefault()) {\n          if (cell.isUnderlineColorRGB()) {\n            charElement.style.textDecorationColor = `rgb(${AttributeData.toColorRGB(cell.getUnderlineColor()).join(',')})`;\n          } else {\n            let fg = cell.getUnderlineColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            charElement.style.textDecorationColor = colors.ansi[fg].css;\n          }\n        }\n      }\n\n      if (cell.isOverline()) {\n        classes.push(RowCss.OVERLINE_CLASS);\n        if (text === ' ') {\n          text = '\\xa0'; // = &nbsp;\n        }\n      }\n\n      if (cell.isStrikethrough()) {\n        classes.push(RowCss.STRIKETHROUGH_CLASS);\n      }\n\n      // apply link hover underline late, effectively overrides any previous text-decoration\n      // settings\n      if (isLinkHover) {\n        charElement.style.textDecoration = 'underline';\n      }\n\n      let fg = cell.getFgColor();\n      let fgColorMode = cell.getFgColorMode();\n      let bg = cell.getBgColor();\n      let bgColorMode = cell.getBgColorMode();\n      const isInverse = !!cell.isInverse();\n      if (isInverse) {\n        const temp = fg;\n        fg = bg;\n        bg = temp;\n        const temp2 = fgColorMode;\n        fgColorMode = bgColorMode;\n        bgColorMode = temp2;\n      }\n\n      // Apply any decoration foreground/background overrides, this must happen after inverse has\n      // been applied\n      let bgOverride: IColor | undefined;\n      let fgOverride: IColor | undefined;\n      let isTop = false;\n      this._decorationService.forEachDecorationAtCell(x, row, undefined, d => {\n        if (d.options.layer !== 'top' && isTop) {\n          return;\n        }\n        if (d.backgroundColorRGB) {\n          bgColorMode = Attributes.CM_RGB;\n          bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          bgOverride = d.backgroundColorRGB;\n        }\n        if (d.foregroundColorRGB) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          fgOverride = d.foregroundColorRGB;\n        }\n        isTop = d.options.layer === 'top';\n      });\n\n      // Apply selection\n      if (!isTop && isInSelection) {\n        // If in the selection, force the element to be above the selection to improve contrast and\n        // support opaque selections. The applies background is not actually needed here as\n        // selection is drawn in a seperate container, the main purpose of this to ensuring minimum\n        // contrast ratio\n        bgOverride = this._coreBrowserService.isFocused ? colors.selectionBackgroundOpaque : colors.selectionInactiveBackgroundOpaque;\n        bg = bgOverride.rgba >> 8 & 0xFFFFFF;\n        bgColorMode = Attributes.CM_RGB;\n        // Since an opaque selection is being rendered, the selection pretends to be a decoration to\n        // ensure text is drawn above the selection.\n        isTop = true;\n        // Apply selection foreground if applicable\n        if (colors.selectionForeground) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n          fgOverride = colors.selectionForeground;\n        }\n      }\n\n      // If it's a top decoration, render above the selection\n      if (isTop) {\n        classes.push('xterm-decoration-top');\n      }\n\n      // Background\n      let resolvedBg: IColor;\n      switch (bgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          resolvedBg = colors.ansi[bg];\n          classes.push(`xterm-bg-${bg}`);\n          break;\n        case Attributes.CM_RGB:\n          resolvedBg = rgba.toColor(bg >> 16, bg >> 8 & 0xFF, bg & 0xFF);\n          this._addStyle(charElement, `background-color:#${padStart((bg >>> 0).toString(16), '0', 6)}`);\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (isInverse) {\n            resolvedBg = colors.foreground;\n            classes.push(`xterm-bg-${INVERTED_DEFAULT_COLOR}`);\n          } else {\n            resolvedBg = colors.background;\n          }\n      }\n\n      // If there is no background override by now it's the original color, so apply dim if needed\n      if (!bgOverride) {\n        if (cell.isDim()) {\n          bgOverride = color.multiplyOpacity(resolvedBg, 0.5);\n        }\n      }\n\n      // Foreground\n      switch (fgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          if (cell.isBold() && fg < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors) {\n            fg += 8;\n          }\n          if (!this._applyMinimumContrast(charElement, resolvedBg, colors.ansi[fg], cell, bgOverride, undefined)) {\n            classes.push(`xterm-fg-${fg}`);\n          }\n          break;\n        case Attributes.CM_RGB:\n          const color = rgba.toColor(\n            (fg >> 16) & 0xFF,\n            (fg >>  8) & 0xFF,\n            (fg      ) & 0xFF\n          );\n          if (!this._applyMinimumContrast(charElement, resolvedBg, color, cell, bgOverride, fgOverride)) {\n            this._addStyle(charElement, `color:#${padStart(fg.toString(16), '0', 6)}`);\n          }\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (!this._applyMinimumContrast(charElement, resolvedBg, colors.foreground, cell, bgOverride, undefined)) {\n            if (isInverse) {\n              classes.push(`xterm-fg-${INVERTED_DEFAULT_COLOR}`);\n            }\n          }\n      }\n\n      // apply CSS classes\n      // slightly faster than using classList by omitting\n      // checks for doubled entries (code above should not have doublets)\n      if (classes.length) {\n        charElement.className = classes.join(' ');\n        classes.length = 0;\n      }\n\n      // exclude conditions for cell merging - never merge these\n      if (!isCursorCell && !isJoined && !isDecorated) {\n        cellAmount++;\n      } else {\n        charElement.textContent = text;\n      }\n      // apply letter-spacing rule\n      if (spacing !== this.defaultSpacing) {\n        charElement.style.letterSpacing = `${spacing}px`;\n      }\n\n      elements.push(charElement);\n      x = lastCharX;\n    }\n\n    // postfix text of last merged span\n    if (charElement && cellAmount) {\n      charElement.textContent = text;\n    }\n\n    return elements;\n  }\n\n  private _applyMinimumContrast(element: HTMLElement, bg: IColor, fg: IColor, cell: ICellData, bgOverride: IColor | undefined, fgOverride: IColor | undefined): boolean {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode())) {\n      return false;\n    }\n\n    // Try get from cache first, only use the cache when there are no decoration overrides\n    const cache = this._getContrastCache(cell);\n    let adjustedColor: IColor | undefined | null = undefined;\n    if (!bgOverride && !fgOverride) {\n      adjustedColor = cache.getColor(bg.rgba, fg.rgba);\n    }\n\n    // Calculate and store in cache\n    if (adjustedColor === undefined) {\n      // Dim cells only require half the contrast, otherwise they wouldn't be distinguishable from\n      // non-dim cells\n      const ratio = this._optionsService.rawOptions.minimumContrastRatio / (cell.isDim() ? 2 : 1);\n      adjustedColor = color.ensureContrastRatio(bgOverride || bg, fgOverride || fg, ratio);\n      cache.setColor((bgOverride || bg).rgba, (fgOverride || fg).rgba, adjustedColor ?? null);\n    }\n\n    if (adjustedColor) {\n      this._addStyle(element, `color:${adjustedColor.css}`);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _getContrastCache(cell: ICellData): IColorContrastCache {\n    if (cell.isDim()) {\n      return this._themeService.colors.halfContrastCache;\n    }\n    return this._themeService.colors.contrastCache;\n  }\n\n  private _addStyle(element: HTMLElement, style: string): void {\n    element.setAttribute('style', `${element.getAttribute('style') || ''}${style};`);\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      if (start[0] <= end[0]) {\n        return x >= start[0] && y >= start[1] &&\n          x < end[0] && y <= end[1];\n      }\n      return x < start[0] && y >= start[1] &&\n        x >= end[0] && y <= end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\nfunction padStart(text: string, padChar: string, length: number): string {\n  while (text.length < length) {\n    text = padChar + text;\n  }\n  return text;\n}\n", "/**\n * Copyright (c) 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { FontWeight } from 'common/services/Services';\n\n\nexport const enum WidthCacheSettings {\n  /** sentinel for unset values in flat cache */\n  FLAT_UNSET = -9999,\n  /** size of flat cache, size-1 equals highest codepoint handled by flat */\n  FLAT_SIZE = 256,\n  /** char repeat for measuring */\n  REPEAT = 32\n}\n\n\nconst enum FontVariant {\n  REGULAR = 0,\n  BOLD = 1,\n  ITALIC = 2,\n  BOLD_ITALIC = 3\n}\n\n\nexport class WidthCache implements IDisposable {\n  // flat cache for regular variant up to CacheSettings.FLAT_SIZE\n  // NOTE: ~4x faster access than holey (serving >>80% of terminal content)\n  //       It has a small memory footprint (only 1MB for full BMP caching),\n  //       still the sweet spot is not reached before touching 32k different codepoints,\n  //       thus we store the remaining <<20% of terminal data in a holey structure.\n  protected _flat = new Float32Array(WidthCacheSettings.FLAT_SIZE);\n\n  // holey cache for bold, italic and bold&italic for any string\n  // FIXME: can grow really big over time (~8.5 MB for full BMP caching),\n  //        so a shared API across terminals is needed\n  protected _holey: Map<string, number> | undefined;\n\n  private _font = '';\n  private _fontSize = 0;\n  private _weight: FontWeight = 'normal';\n  private _weightBold: FontWeight = 'bold';\n  private _container: HTMLDivElement;\n  private _measureElements: HTMLSpanElement[] = [];\n\n  constructor(_document: Document) {\n    this._container = _document.createElement('div');\n    this._container.style.position = 'absolute';\n    this._container.style.top = '-50000px';\n    this._container.style.width = '50000px';\n    // SP should stack in spans\n    this._container.style.whiteSpace = 'pre';\n    // avoid undercuts in non-monospace fonts from kerning\n    this._container.style.fontKerning = 'none';\n\n    const regular = _document.createElement('span');\n\n    const bold = _document.createElement('span');\n    bold.style.fontWeight = 'bold';\n\n    const italic = _document.createElement('span');\n    italic.style.fontStyle = 'italic';\n\n    const boldItalic = _document.createElement('span');\n    boldItalic.style.fontWeight = 'bold';\n    boldItalic.style.fontStyle = 'italic';\n\n    // NOTE: must be in order of FontVariant\n    this._measureElements = [regular, bold, italic, boldItalic];\n    this._container.appendChild(regular);\n    this._container.appendChild(bold);\n    this._container.appendChild(italic);\n    this._container.appendChild(boldItalic);\n\n    _document.body.appendChild(this._container);\n\n    this.clear();\n  }\n\n  public dispose(): void {\n    this._container.remove();           // remove elements from DOM\n    this._measureElements.length = 0;   // release element refs\n    this._holey = undefined;            // free cache memory via GC\n  }\n\n  /**\n   * Clear the width cache.\n   */\n  public clear(): void {\n    this._flat.fill(WidthCacheSettings.FLAT_UNSET);\n    // .clear() has some overhead, re-assign instead (>3 times faster)\n    this._holey = new Map<string, number>();\n  }\n\n  /**\n   * Set the font for measuring.\n   * Must be called for any changes on font settings.\n   * Also clears the cache.\n   */\n  public setFont(font: string, fontSize: number, weight: FontWeight, weightBold: FontWeight): void {\n    // skip if nothing changed\n    if (font === this._font\n      && fontSize === this._fontSize\n      && weight === this._weight\n      && weightBold === this._weightBold\n    ) {\n      return;\n    }\n\n    this._font = font;\n    this._fontSize = fontSize;\n    this._weight = weight;\n    this._weightBold = weightBold;\n\n    this._container.style.fontFamily = this._font;\n    this._container.style.fontSize = `${this._fontSize}px`;\n    this._measureElements[FontVariant.REGULAR].style.fontWeight = `${weight}`;\n    this._measureElements[FontVariant.BOLD].style.fontWeight = `${weightBold}`;\n    this._measureElements[FontVariant.ITALIC].style.fontWeight = `${weight}`;\n    this._measureElements[FontVariant.BOLD_ITALIC].style.fontWeight = `${weightBold}`;\n\n    this.clear();\n  }\n\n  /**\n   * Get the render width for cell content `c` with current font settings.\n   * `variant` denotes the font variant to be used.\n   */\n  public get(c: string, bold: boolean | number, italic: boolean | number): number {\n    let cp = 0;\n    if (!bold && !italic && c.length === 1 && (cp = c.charCodeAt(0)) < WidthCacheSettings.FLAT_SIZE) {\n      return this._flat[cp] !== WidthCacheSettings.FLAT_UNSET\n        ? this._flat[cp]\n        : (this._flat[cp] = this._measure(c, 0));\n    }\n    let key = c;\n    if (bold) key += 'B';\n    if (italic) key += 'I';\n    let width = this._holey!.get(key);\n    if (width === undefined) {\n      let variant = 0;\n      if (bold) variant |= FontVariant.BOLD;\n      if (italic) variant |= FontVariant.ITALIC;\n      width = this._measure(c, variant);\n      this._holey!.set(key, width);\n    }\n    return width;\n  }\n\n  protected _measure(c: string, variant: FontVariant): number {\n    const el = this._measureElements[variant];\n    el.textContent = c.repeat(WidthCacheSettings.REPEAT);\n    return el.offsetWidth / WidthCacheSettings.REPEAT;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge\n// would result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDimensions, IRenderDimensions } from 'browser/renderer/shared/Types';\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n\nexport function createRenderDimensions(): IRenderDimensions {\n  return {\n    css: {\n      canvas: createDimension(),\n      cell: createDimension()\n    },\n    device: {\n      canvas: createDimension(),\n      cell: createDimension(),\n      char: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }\n    }\n  };\n}\n\nfunction createDimension(): IDimensions {\n  return {\n    width: 0,\n    height: 0\n  };\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService } from 'common/services/Services';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean = false;\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number = 0;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number] | undefined;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number] | undefined;\n\n  constructor(\n    private _bufferService: IBufferService\n  ) {\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return undefined;\n    }\n\n    // Use the selection start + length if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n      if (startPlusLength > this._bufferService.cols) {\n        // Ensure the trailing EOL isn't included when the selection ends on the right edge\n        if (startPlusLength % this._bufferService.cols === 0) {\n          return [this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols) - 1];\n        }\n        return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n      }\n      return [startPlusLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        // Keep the whole wrapped word/line selected if the content wraps multiple lines\n        const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n        if (startPlusLength > this._bufferService.cols) {\n          return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n        }\n        return [Math.max(startPlusLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @returns Whether a refresh is necessary.\n   */\n  public handleTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n\nconst enum MeasureSettings {\n  REPEAT = 32\n}\n\n\nexport class CharSizeService extends Disposable implements ICharSizeService {\n  public serviceBrand: undefined;\n\n  public width: number = 0;\n  public height: number = 0;\n  private _measureStrategy: IMeasureStrategy;\n\n  public get hasValidSize(): boolean { return this.width > 0 && this.height > 0; }\n\n  private readonly _onCharSizeChange = this.register(new EventEmitter<void>());\n  public readonly onCharSizeChange = this._onCharSizeChange.event;\n\n  constructor(\n    document: Document,\n    parentElement: HTMLElement,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._measureStrategy = new DomMeasureStrategy(document, parentElement, this._optionsService);\n    this.register(this._optionsService.onMultipleOptionChange(['fontFamily', 'fontSize'], () => this.measure()));\n  }\n\n  public measure(): void {\n    const result = this._measureStrategy.measure();\n    if (result.width !== this.width || result.height !== this.height) {\n      this.width = result.width;\n      this.height = result.height;\n      this._onCharSizeChange.fire();\n    }\n  }\n}\n\ninterface IMeasureStrategy {\n  measure(): IReadonlyMeasureResult;\n}\n\ninterface IReadonlyMeasureResult {\n  readonly width: number;\n  readonly height: number;\n}\n\ninterface IMeasureResult {\n  width: number;\n  height: number;\n}\n\n// TODO: For supporting browsers we should also provide a CanvasCharDimensionsProvider that uses\n// ctx.measureText\nclass DomMeasureStrategy implements IMeasureStrategy {\n  private _result: IMeasureResult = { width: 0, height: 0 };\n  private _measureElement: HTMLElement;\n\n  constructor(\n    private _document: Document,\n    private _parentElement: HTMLElement,\n    private _optionsService: IOptionsService\n  ) {\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.classList.add('xterm-char-measure-element');\n    this._measureElement.textContent = 'W'.repeat(MeasureSettings.REPEAT);\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._measureElement.style.whiteSpace = 'pre';\n    this._measureElement.style.fontKerning = 'none';\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public measure(): IReadonlyMeasureResult {\n    this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n    this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;\n\n    // Note that this triggers a synchronous layout\n    const geometry = {\n      height: Number(this._measureElement.offsetHeight),\n      width: Number(this._measureElement.offsetWidth)\n    };\n\n    // If values are 0 then the element is likely currently display:none, in which case we should\n    // retain the previous value.\n    if (geometry.width !== 0 && geometry.height !== 0) {\n      this._result.width = geometry.width / MeasureSettings.REPEAT;\n      this._result.height = Math.ceil(geometry.height);\n    }\n\n    return this._result;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from './Services';\n\nexport class CoreBrowserService implements ICoreBrowserService {\n  public serviceBrand: undefined;\n\n  private _isFocused = false;\n  private _cachedIsFocused: boolean | undefined = undefined;\n\n  constructor(\n    private _textarea: HTMLTextAreaElement,\n    public readonly window: Window & typeof globalThis\n  ) {\n    this._textarea.addEventListener('focus', () => this._isFocused = true);\n    this._textarea.addEventListener('blur', () => this._isFocused = false);\n  }\n\n  public get dpr(): number {\n    return this.window.devicePixelRatio;\n  }\n\n  public get isFocused(): boolean {\n    if (this._cachedIsFocused === undefined) {\n      this._cachedIsFocused = this._isFocused && this._textarea.ownerDocument.hasFocus();\n      queueMicrotask(() => this._cachedIsFocused = undefined);\n    }\n    return this._cachedIsFocused;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharSizeService, IRenderService, IMouseService } from './Services';\nimport { getCoords, getCoordsRelativeToElement } from 'browser/input/Mouse';\n\nexport class MouseService implements IMouseService {\n  public serviceBrand: undefined;\n\n  constructor(\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService\n  ) {\n  }\n\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined {\n    return getCoords(\n      window,\n      event,\n      element,\n      colCount,\n      rowCount,\n      this._charSizeService.hasValidSize,\n      this._renderService.dimensions.css.cell.width,\n      this._renderService.dimensions.css.cell.height,\n      isSelection\n    );\n  }\n\n  public getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined {\n    const coords = getCoordsRelativeToElement(window, event, element);\n    if (!this._charSizeService.hasValidSize) {\n      return undefined;\n    }\n    coords[0] = Math.min(Math.max(coords[0], 0), this._renderService.dimensions.css.canvas.width - 1);\n    coords[1] = Math.min(Math.max(coords[1], 0), this._renderService.dimensions.css.canvas.height - 1);\n    return {\n      col: Math.floor(coords[0] / this._renderService.dimensions.css.cell.width),\n      row: Math.floor(coords[1] / this._renderService.dimensions.css.cell.height),\n      x: Math.floor(coords[0]),\n      y: Math.floor(coords[1])\n    };\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { RenderDebouncer } from 'browser/RenderDebouncer';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, MutableDisposable } from 'common/Lifecycle';\nimport { DebouncedIdleTask } from 'common/TaskQueue';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\ninterface ISelectionState {\n  start: [number, number] | undefined;\n  end: [number, number] | undefined;\n  columnSelectMode: boolean;\n}\n\nexport class RenderService extends Disposable implements IRenderService {\n  public serviceBrand: undefined;\n\n  private _renderer: MutableDisposable<IRenderer> = this.register(new MutableDisposable());\n  private _renderDebouncer: IRenderDebouncerWithCallback;\n  private _screenDprMonitor: ScreenDprMonitor;\n  private _pausedResizeTask = new DebouncedIdleTask();\n\n  private _isPaused: boolean = false;\n  private _needsFullRefresh: boolean = false;\n  private _isNextRenderRedrawOnly: boolean = true;\n  private _needsSelectionRefresh: boolean = false;\n  private _canvasWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _selectionState: ISelectionState = {\n    start: undefined,\n    end: undefined,\n    columnSelectMode: false\n  };\n\n  private readonly _onDimensionsChange = this.register(new EventEmitter<IRenderDimensions>());\n  public readonly onDimensionsChange =  this._onDimensionsChange.event;\n  private readonly _onRenderedViewportChange = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRenderedViewportChange = this._onRenderedViewportChange.event;\n  private readonly _onRender = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRender = this._onRender.event;\n  private readonly _onRefreshRequest = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRefreshRequest = this._onRefreshRequest.event;\n\n  public get dimensions(): IRenderDimensions { return this._renderer.value!.dimensions; }\n\n  constructor(\n    private _rowCount: number,\n    screenElement: HTMLElement,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IDecorationService decorationService: IDecorationService,\n    @IBufferService bufferService: IBufferService,\n    @ICoreBrowserService coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n\n    this._renderDebouncer = new RenderDebouncer(coreBrowserService.window, (start, end) => this._renderRows(start, end));\n    this.register(this._renderDebouncer);\n\n    this._screenDprMonitor = new ScreenDprMonitor(coreBrowserService.window);\n    this._screenDprMonitor.setListener(() => this.handleDevicePixelRatioChange());\n    this.register(this._screenDprMonitor);\n\n    this.register(bufferService.onResize(() => this._fullRefresh()));\n    this.register(bufferService.buffers.onBufferActivate(() => this._renderer.value?.clear()));\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\n    this.register(this._charSizeService.onCharSizeChange(() => this.handleCharSizeChanged()));\n\n    // Do a full refresh whenever any decoration is added or removed. This may not actually result\n    // in changes but since decorations should be used sparingly or added/removed all in the same\n    // frame this should have minimal performance impact.\n    this.register(decorationService.onDecorationRegistered(() => this._fullRefresh()));\n    this.register(decorationService.onDecorationRemoved(() => this._fullRefresh()));\n\n    // Clear the renderer when the a change that could affect glyphs occurs\n    this.register(optionsService.onMultipleOptionChange([\n      'customGlyphs',\n      'drawBoldTextInBrightColors',\n      'letterSpacing',\n      'lineHeight',\n      'fontFamily',\n      'fontSize',\n      'fontWeight',\n      'fontWeightBold',\n      'minimumContrastRatio'\n    ], () => {\n      this.clear();\n      this.handleResize(bufferService.cols, bufferService.rows);\n      this._fullRefresh();\n    }));\n\n    // Refresh the cursor line when the cursor changes\n    this.register(optionsService.onMultipleOptionChange([\n      'cursorBlink',\n      'cursorStyle'\n    ], () => this.refreshRows(bufferService.buffer.y, bufferService.buffer.y, true)));\n\n    // dprchange should handle this case, we need this as well for browsers that don't support the\n    // matchMedia query.\n    this.register(addDisposableDomListener(coreBrowserService.window, 'resize', () => this.handleDevicePixelRatioChange()));\n\n    this.register(themeService.onChangeColors(() => this._fullRefresh()));\n\n    // Detect whether IntersectionObserver is detected and enable renderer pause\n    // and resume based on terminal visibility if so\n    if ('IntersectionObserver' in coreBrowserService.window) {\n      const observer = new coreBrowserService.window.IntersectionObserver(e => this._handleIntersectionChange(e[e.length - 1]), { threshold: 0 });\n      observer.observe(screenElement);\n      this.register({ dispose: () => observer.disconnect() });\n    }\n  }\n\n  private _handleIntersectionChange(entry: IntersectionObserverEntry): void {\n    this._isPaused = entry.isIntersecting === undefined ? (entry.intersectionRatio === 0) : !entry.isIntersecting;\n\n    // Terminal was hidden on open\n    if (!this._isPaused && !this._charSizeService.hasValidSize) {\n      this._charSizeService.measure();\n    }\n\n    if (!this._isPaused && this._needsFullRefresh) {\n      this._pausedResizeTask.flush();\n      this.refreshRows(0, this._rowCount - 1);\n      this._needsFullRefresh = false;\n    }\n  }\n\n  public refreshRows(start: number, end: number, isRedrawOnly: boolean = false): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n      return;\n    }\n    if (!isRedrawOnly) {\n      this._isNextRenderRedrawOnly = false;\n    }\n    this._renderDebouncer.refresh(start, end, this._rowCount);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    if (!this._renderer.value) {\n      return;\n    }\n\n    // Since this is debounced, a resize event could have happened between the time a refresh was\n    // requested and when this triggers. Clamp the values of start and end to ensure they're valid\n    // given the current viewport state.\n    start = Math.min(start, this._rowCount - 1);\n    end = Math.min(end, this._rowCount - 1);\n\n    // Render\n    this._renderer.value.renderRows(start, end);\n\n    // Update selection if needed\n    if (this._needsSelectionRefresh) {\n      this._renderer.value.handleSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode);\n      this._needsSelectionRefresh = false;\n    }\n\n    // Fire render event only if it was not a redraw\n    if (!this._isNextRenderRedrawOnly) {\n      this._onRenderedViewportChange.fire({ start, end });\n    }\n    this._onRender.fire({ start, end });\n    this._isNextRenderRedrawOnly = true;\n  }\n\n  public resize(cols: number, rows: number): void {\n    this._rowCount = rows;\n    this._fireOnCanvasResize();\n  }\n\n  private _handleOptionsChanged(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    this.refreshRows(0, this._rowCount - 1);\n    this._fireOnCanvasResize();\n  }\n\n  private _fireOnCanvasResize(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    // Don't fire the event if the dimensions haven't changed\n    if (this._renderer.value.dimensions.css.canvas.width === this._canvasWidth && this._renderer.value.dimensions.css.canvas.height === this._canvasHeight) {\n      return;\n    }\n    this._onDimensionsChange.fire(this._renderer.value.dimensions);\n  }\n\n  public hasRenderer(): boolean {\n    return !!this._renderer.value;\n  }\n\n  public setRenderer(renderer: IRenderer): void {\n    this._renderer.value = renderer;\n    this._renderer.value.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // Force a refresh\n    this._needsSelectionRefresh = true;\n    this._fullRefresh();\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    return this._renderDebouncer.addRefreshCallback(callback);\n  }\n\n  private _fullRefresh(): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n    } else {\n      this.refreshRows(0, this._rowCount - 1);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    this._renderer.value.clearTextureAtlas?.();\n    this._fullRefresh();\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    // Force char size measurement as DomMeasureStrategy(getBoundingClientRect) is not stable\n    // when devicePixelRatio changes\n    this._charSizeService.measure();\n\n    if (!this._renderer.value) {\n      return;\n    }\n    this._renderer.value.handleDevicePixelRatioChange();\n    this.refreshRows(0, this._rowCount - 1);\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    if (this._isPaused) {\n      this._pausedResizeTask.set(() => this._renderer.value!.handleResize(cols, rows));\n    } else {\n      this._renderer.value.handleResize(cols, rows);\n    }\n    this._fullRefresh();\n  }\n\n  // TODO: Is this useful when we have onResize?\n  public handleCharSizeChanged(): void {\n    this._renderer.value?.handleCharSizeChanged();\n  }\n\n  public handleBlur(): void {\n    this._renderer.value?.handleBlur();\n  }\n\n  public handleFocus(): void {\n    this._renderer.value?.handleFocus();\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionState.start = start;\n    this._selectionState.end = end;\n    this._selectionState.columnSelectMode = columnSelectMode;\n    this._renderer.value?.handleSelectionChanged(start, end, columnSelectMode);\n  }\n\n  public handleCursorMove(): void {\n    this._renderer.value?.handleCursorMove();\n  }\n\n  public clear(): void {\n    this._renderer.value?.clear();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange, ILinkifier2 } from 'browser/Types';\nimport { getCoordsRelativeToElement } from 'browser/input/Mouse';\nimport { moveToCellSequence } from 'browser/input/MoveToCell';\nimport { SelectionModel } from 'browser/selection/SelectionModel';\nimport { ISelectionRedrawRequestEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { ICoreBrowserService, IMouseService, IRenderService, ISelectionService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport * as Browser from 'common/Platform';\nimport { IBufferLine, IDisposable } from 'common/Types';\nimport { getRangeLength } from 'common/buffer/BufferRange';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\n\n/**\n * The number of pixels the mouse needs to be above or below the viewport in\n * order to scroll at the maximum speed.\n */\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\n\n/**\n * The maximum scrolling speed\n */\nconst DRAG_SCROLL_MAX_SPEED = 15;\n\n/**\n * The number of milliseconds between drag scroll updates.\n */\nconst DRAG_SCROLL_INTERVAL = 50;\n\n/**\n * The maximum amount of time that can have elapsed for an alt click to move the\n * cursor.\n */\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\n\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\n\n/**\n * Represents a position of a word on a line.\n */\ninterface IWordPosition {\n  start: number;\n  length: number;\n}\n\n/**\n * A selection mode, this drives how the selection behaves on mouse move.\n */\nexport const enum SelectionMode {\n  NORMAL,\n  WORD,\n  LINE,\n  COLUMN\n}\n\n/**\n * A class that manages the selection of the terminal. With help from\n * SelectionModel, SelectionService handles with all logic associated with\n * dealing with the selection, including handling mouse interaction, wide\n * characters and fetching the actual text within the selection. Rendering is\n * not handled by the SelectionService but the onRedrawRequest event is fired\n * when the selection is ready to be redrawn (on an animation frame).\n */\nexport class SelectionService extends Disposable implements ISelectionService {\n  public serviceBrand: undefined;\n\n  protected _model: SelectionModel;\n\n  /**\n   * The amount to scroll every drag scroll update (depends on how far the mouse\n   * drag is above or below the terminal).\n   */\n  private _dragScrollAmount: number = 0;\n\n  /**\n   * The current selection mode.\n   */\n  protected _activeSelectionMode: SelectionMode;\n\n  /**\n   * A setInterval timer that is active while the mouse is down whose callback\n   * scrolls the viewport when necessary.\n   */\n  private _dragScrollIntervalTimer: number | undefined;\n\n  /**\n   * The animation frame ID used for refreshing the selection.\n   */\n  private _refreshAnimationFrame: number | undefined;\n\n  /**\n   * Whether selection is enabled.\n   */\n  private _enabled = true;\n\n  private _mouseMoveListener: EventListener;\n  private _mouseUpListener: EventListener;\n  private _trimListener: IDisposable;\n  private _workCell: CellData = new CellData();\n\n  private _mouseDownTimeStamp: number = 0;\n  private _oldHasSelection: boolean = false;\n  private _oldSelectionStart: [number, number] | undefined = undefined;\n  private _oldSelectionEnd: [number, number] | undefined = undefined;\n\n  private readonly _onLinuxMouseSelection = this.register(new EventEmitter<string>());\n  public readonly onLinuxMouseSelection = this._onLinuxMouseSelection.event;\n  private readonly _onRedrawRequest = this.register(new EventEmitter<ISelectionRedrawRequestEvent>());\n  public readonly onRequestRedraw = this._onRedrawRequest.event;\n  private readonly _onSelectionChange = this.register(new EventEmitter<void>());\n  public readonly onSelectionChange = this._onSelectionChange.event;\n  private readonly _onRequestScrollLines = this.register(new EventEmitter<ISelectionRequestScrollLinesEvent>());\n  public readonly onRequestScrollLines = this._onRequestScrollLines.event;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _linkifier: ILinkifier2,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n\n    // Init listeners\n    this._mouseMoveListener = event => this._handleMouseMove(event as MouseEvent);\n    this._mouseUpListener = event => this._handleMouseUp(event as MouseEvent);\n    this._coreService.onUserInput(() => {\n      if (this.hasSelection) {\n        this.clearSelection();\n      }\n    });\n    this._trimListener = this._bufferService.buffer.lines.onTrim(amount => this._handleTrim(amount));\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._handleBufferActivate(e)));\n\n    this.enable();\n\n    this._model = new SelectionModel(this._bufferService);\n    this._activeSelectionMode = SelectionMode.NORMAL;\n\n    this.register(toDisposable(() => {\n      this._removeMouseDownListeners();\n    }));\n  }\n\n  public reset(): void {\n    this.clearSelection();\n  }\n\n  /**\n   * Disables the selection manager. This is useful for when terminal mouse\n   * are enabled.\n   */\n  public disable(): void {\n    this.clearSelection();\n    this._enabled = false;\n  }\n\n  /**\n   * Enable the selection manager.\n   */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  public get selectionStart(): [number, number] | undefined { return this._model.finalSelectionStart; }\n  public get selectionEnd(): [number, number] | undefined { return this._model.finalSelectionEnd; }\n\n  /**\n   * Gets whether there is an active text selection.\n   */\n  public get hasSelection(): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[0] !== end[0] || start[1] !== end[1];\n  }\n\n  /**\n   * Gets the text currently selected.\n   */\n  public get selectionText(): string {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return '';\n    }\n\n    const buffer = this._bufferService.buffer;\n    const result: string[] = [];\n\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\n      // Ignore zero width selections\n      if (start[0] === end[0]) {\n        return '';\n      }\n\n      // For column selection it's not enough to rely on final selection's swapping of reversed\n      // values, it also needs the x coordinates to swap independently of the y coordinate is needed\n      const startCol = start[0] < end[0] ? start[0] : end[0];\n      const endCol = start[0] < end[0] ? end[0] : start[0];\n      for (let i = start[1]; i <= end[1]; i++) {\n        const lineText = buffer.translateBufferLineToString(i, true, startCol, endCol);\n        result.push(lineText);\n      }\n    } else {\n      // Get first row\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n      result.push(buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      // Get middle rows\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\n        const bufferLine = buffer.lines.get(i);\n        const lineText = buffer.translateBufferLineToString(i, true);\n        if (bufferLine?.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      // Get final row\n      if (start[1] !== end[1]) {\n        const bufferLine = buffer.lines.get(end[1]);\n        const lineText = buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n        if (bufferLine && bufferLine!.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n    }\n\n    // Format string by replacing non-breaking space chars with regular spaces\n    // and joining the array into a multi-line string.\n    const formattedResult = result.map(line => {\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n    }).join(Browser.isWindows ? '\\r\\n' : '\\n');\n\n    return formattedResult;\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Queues a refresh, redrawing the selection on the next opportunity.\n   * @param isLinuxMouseSelection Whether the selection should be registered as a new\n   * selection on Linux.\n   */\n  public refresh(isLinuxMouseSelection?: boolean): void {\n    // Queue the refresh for the renderer\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._refresh());\n    }\n\n    // If the platform is Linux and the refresh call comes from a mouse event,\n    // we need to update the selection for middle click to paste selection.\n    if (Browser.isLinux && isLinuxMouseSelection) {\n      const selectionText = this.selectionText;\n      if (selectionText.length) {\n        this._onLinuxMouseSelection.fire(this.selectionText);\n      }\n    }\n  }\n\n  /**\n   * Fires the refresh event, causing consumers to pick it up and redraw the\n   * selection state.\n   */\n  private _refresh(): void {\n    this._refreshAnimationFrame = undefined;\n    this._onRedrawRequest.fire({\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd,\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\n    });\n  }\n\n  /**\n   * Checks if the current click was inside the current selection\n   * @param event The mouse event\n   */\n  private _isClickInSelection(event: MouseEvent): boolean {\n    const coords = this._getMouseBufferCoords(event);\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n\n    if (!start || !end || !coords) {\n      return false;\n    }\n\n    return this._areCoordsInSelection(coords, start, end);\n  }\n\n  public isCellInSelection(x: number, y: number): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return this._areCoordsInSelection([x, y], start, end);\n  }\n\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n  }\n\n  /**\n   * Selects word at the current mouse event coordinates.\n   * @param event The mouse event.\n   */\n  private _selectWordAtCursor(event: MouseEvent, allowWhitespaceOnlySelection: boolean): boolean {\n    // Check if there is a link under the cursor first and select that if so\n    const range = this._linkifier.currentLink?.link?.range;\n    if (range) {\n      this._model.selectionStart = [range.start.x - 1, range.start.y - 1];\n      this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._selectWordAt(coords, allowWhitespaceOnlySelection);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._model.clearSelection();\n    start = Math.max(start, 0);\n    end = Math.min(end, this._bufferService.buffer.lines.length - 1);\n    this._model.selectionStart = [0, start];\n    this._model.selectionEnd = [this._bufferService.cols, end];\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   */\n  private _handleTrim(amount: number): void {\n    const needsRefresh = this._model.handleTrim(amount);\n    if (needsRefresh) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\n   * @param event The mouse event.\n   */\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] | undefined {\n    const coords = this._mouseService.getCoords(event, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);\n    if (!coords) {\n      return undefined;\n    }\n\n    // Convert to 0-based\n    coords[0]--;\n    coords[1]--;\n\n    // Convert viewport coords to buffer coords\n    coords[1] += this._bufferService.buffer.ydisp;\n    return coords;\n  }\n\n  /**\n   * Gets the amount the viewport should be scrolled based on how far out of the\n   * terminal the mouse is.\n   * @param event The mouse event.\n   */\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\n    let offset = getCoordsRelativeToElement(this._coreBrowserService.window, event, this._screenElement)[1];\n    const terminalHeight = this._renderService.dimensions.css.canvas.height;\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  }\n\n  /**\n   * Returns whether the selection manager should force selection, regardless of\n   * whether the terminal is in mouse events mode.\n   * @param event The mouse event.\n   */\n  public shouldForceSelection(event: MouseEvent): boolean {\n    if (Browser.isMac) {\n      return event.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection;\n    }\n\n    return event.shiftKey;\n  }\n\n  /**\n   * Handles te mousedown event, setting up for a new selection.\n   * @param event The mousedown event.\n   */\n  public handleMouseDown(event: MouseEvent): void {\n    this._mouseDownTimeStamp = event.timeStamp;\n    // If we have selection, we want the context menu on right click even if the\n    // terminal is in mouse mode.\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    // Only action the primary button\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Allow selection when using a specific modifier key, even when disabled\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      // Don't send the mouse down event to the current process, we want to select\n      event.stopPropagation();\n    }\n\n    // Tell the browser not to start a regular selection\n    event.preventDefault();\n\n    // Reset drag scroll state\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._handleIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._handleSingleClick(event);\n      } else if (event.detail === 2) {\n        this._handleDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._handleTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n    this.refresh(true);\n  }\n\n  /**\n   * Adds listeners when mousedown is triggered.\n   */\n  private _addMouseDownListeners(): void {\n    // Listen on the document so that dragging outside of viewport works\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n    }\n    this._dragScrollIntervalTimer = this._coreBrowserService.window.setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\n  }\n\n  /**\n   * Removes the listeners that are registered when mousedown is triggered.\n   */\n  private _removeMouseDownListeners(): void {\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n    }\n    this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = undefined;\n  }\n\n  /**\n   * Performs an incremental click, setting the selection end position to the mouse\n   * position.\n   * @param event The mouse event.\n   */\n  private _handleIncrementalClick(event: MouseEvent): void {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  }\n\n  /**\n   * Performs a single click, resetting relevant state and setting the selection\n   * start position.\n   * @param event The mouse event.\n   */\n  private _handleSingleClick(event: MouseEvent): void {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\n\n    // Initialize the new selection\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n    if (!this._model.selectionStart) {\n      return;\n    }\n    this._model.selectionEnd = undefined;\n\n    // Ensure the line exists\n    const line = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n    if (!line) {\n      return;\n    }\n\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\n    if (line.length === this._model.selectionStart[0]) {\n      return;\n    }\n\n    // If the mouse is over the second half of a wide character, adjust the\n    // selection to cover the whole character\n    if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n      this._model.selectionStart[0]++;\n    }\n  }\n\n  /**\n   * Performs a double click, selecting the current word.\n   * @param event The mouse event.\n   */\n  private _handleDoubleClick(event: MouseEvent): void {\n    if (this._selectWordAtCursor(event, true)) {\n      this._activeSelectionMode = SelectionMode.WORD;\n    }\n  }\n\n  /**\n   * Performs a triple click, selecting the current line and activating line\n   * select mode.\n   * @param event The mouse event.\n   */\n  private _handleTripleClick(event: MouseEvent): void {\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n      this._selectLineAt(coords[1]);\n    }\n  }\n\n  /**\n   * Returns whether the selection manager should operate in column select mode\n   * @param event the mouse or keyboard event\n   */\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\n    return event.altKey && !(Browser.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n  }\n\n  /**\n   * Handles the mousemove event when the mouse button is down, recording the\n   * end of the selection and refreshing the selection.\n   * @param event The mousemove event.\n   */\n  private _handleMouseMove(event: MouseEvent): void {\n    // If the mousemove listener is active it means that a selection is\n    // currently being made, we should stop propagation to prevent mouse events\n    // to be sent to the pty.\n    event.stopImmediatePropagation();\n\n    // Do nothing if there is no selection start, this can happen if the first\n    // click in the terminal is an incremental click\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    // Record the previous position so we know whether to redraw the selection\n    // at the end.\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n\n    // Set the initial selection end based on the mouse coordinates\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    // Select the entire line if line select mode is active.\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    // Determine the amount of scrolling that will happen.\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    // If the cursor was above or below the viewport, make sure it's at the\n    // start or end of the viewport respectively. This should only happen when\n    // NOT in column select mode.\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      } else if (this._dragScrollAmount < 0) {\n        this._model.selectionEnd[0] = 0;\n      }\n    }\n\n    // If the character is a wide character include the cell to the right in the\n    // selection. Note that selections at the very end of the line will never\n    // have a character.\n    const buffer = this._bufferService.buffer;\n    if (this._model.selectionEnd[1] < buffer.lines.length) {\n      const line = buffer.lines.get(this._model.selectionEnd[1]);\n      if (line && line.hasWidth(this._model.selectionEnd[0]) === 0) {\n        this._model.selectionEnd[0]++;\n      }\n    }\n\n    // Only draw here if the selection changes.\n    if (!previousSelectionEnd ||\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  }\n\n  /**\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\n   * scrolling of the viewport.\n   */\n  private _dragScroll(): void {\n    if (!this._model.selectionEnd || !this._model.selectionStart) {\n      return;\n    }\n    if (this._dragScrollAmount) {\n      this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });\n      // Re-evaluate selection\n      // If the cursor was above or below the viewport, make sure it's at the\n      // start or end of the viewport respectively. This should only happen when\n      // NOT in column select mode.\n      const buffer = this._bufferService.buffer;\n      if (this._dragScrollAmount > 0) {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = this._bufferService.cols;\n        }\n        this._model.selectionEnd[1] = Math.min(buffer.ydisp + this._bufferService.rows, buffer.lines.length - 1);\n      } else {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = 0;\n        }\n        this._model.selectionEnd[1] = buffer.ydisp;\n      }\n      this.refresh();\n    }\n  }\n\n  /**\n   * Handles the mouseup event, removing the mousedown listeners.\n   * @param event The mouseup event.\n   */\n  private _handleMouseUp(event: MouseEvent): void {\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME && event.altKey && this._optionsService.rawOptions.altClickMovesCursor) {\n      if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n        const coordinates = this._mouseService.getCoords(\n          event,\n          this._element,\n          this._bufferService.cols,\n          this._bufferService.rows,\n          false\n        );\n        if (coordinates && coordinates[0] !== undefined && coordinates[1] !== undefined) {\n          const sequence = moveToCellSequence(coordinates[0] - 1, coordinates[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n          this._coreService.triggerDataEvent(sequence, true);\n        }\n      }\n    } else {\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  private _fireEventIfSelectionChanged(): void {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    const hasSelection = !!start && !!end && (start[0] !== end[0] || start[1] !== end[1]);\n\n    if (!hasSelection) {\n      if (this._oldHasSelection) {\n        this._fireOnSelectionChange(start, end, hasSelection);\n      }\n      return;\n    }\n\n    // Sanity check, these should not be undefined as there is a selection\n    if (!start || !end) {\n      return;\n    }\n\n    if (!this._oldSelectionStart || !this._oldSelectionEnd || (\n      start[0] !== this._oldSelectionStart[0] || start[1] !== this._oldSelectionStart[1] ||\n      end[0] !== this._oldSelectionEnd[0] || end[1] !== this._oldSelectionEnd[1])) {\n\n      this._fireOnSelectionChange(start, end, hasSelection);\n    }\n  }\n\n  private _fireOnSelectionChange(start: [number, number] | undefined, end: [number, number] | undefined, hasSelection: boolean): void {\n    this._oldSelectionStart = start;\n    this._oldSelectionEnd = end;\n    this._oldHasSelection = hasSelection;\n    this._onSelectionChange.fire();\n  }\n\n  private _handleBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\n    this.clearSelection();\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\n    // reverseIndex) and delete in a splice is only ever used when the same\n    // number of elements was just added. Given this is could actually be\n    // beneficial to leave the selection as is for these cases.\n    this._trimListener.dispose();\n    this._trimListener = e.activeBuffer.lines.onTrim(amount => this._handleTrim(amount));\n  }\n\n  /**\n   * Converts a viewport column (0 to cols - 1) to the character index on the\n   * buffer line, the latter takes into account wide and null characters.\n   * @param bufferLine The buffer line to use.\n   * @param x The x index in the buffer line to convert.\n   */\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, x: number): number {\n    let charIndex = x;\n    for (let i = 0; x >= i; i++) {\n      const length = bufferLine.loadCell(i, this._workCell).getChars().length;\n      if (this._workCell.getWidth() === 0) {\n        // Wide characters aren't included in the line string so decrement the\n        // index so the index is back on the wide character.\n        charIndex--;\n      } else if (length > 1 && x !== i) {\n        // Emojis take up multiple characters, so adjust accordingly. For these\n        // we don't want ot include the character at the column as we're\n        // returning the start index in the string, not the end index.\n        charIndex += length - 1;\n      }\n    }\n    return charIndex;\n  }\n\n  public setSelection(col: number, row: number, length: number): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n    this._fireEventIfSelectionChanged();\n  }\n\n  public rightClickSelect(ev: MouseEvent): void {\n    if (!this._isClickInSelection(ev)) {\n      if (this._selectWordAtCursor(ev, false)) {\n        this.refresh(true);\n      }\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  /**\n   * Gets positional information for the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition | undefined {\n    // Ensure coords are within viewport (eg. not within scroll bar)\n    if (coords[0] >= this._bufferService.cols) {\n      return undefined;\n    }\n\n    const buffer = this._bufferService.buffer;\n    const bufferLine = buffer.lines.get(coords[1]);\n    if (!bufferLine) {\n      return undefined;\n    }\n\n    const line = buffer.translateBufferLineToString(coords[1], false);\n\n    // Get actual index, taking into consideration wide characters\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords[0]);\n    let endIndex = startIndex;\n\n    // Record offset to be used later\n    const charOffset = coords[0] - startIndex;\n    let leftWideCharCount = 0;\n    let rightWideCharCount = 0;\n    let leftLongCharOffset = 0;\n    let rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      // Expand until non-whitespace is hit\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      // Expand until whitespace is hit. This algorithm works by scanning left\n      // and right from the starting position, keeping both the index format\n      // (line) and the column format (bufferLine) in sync. When a wide\n      // character is hit, it is recorded and the column index is adjusted.\n      let startCol = coords[0];\n      let endCol = coords[0];\n\n      // Consider the initial position, skip it and increment the wide char\n      // variable\n      if (bufferLine.getWidth(startCol) === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n      if (bufferLine.getWidth(endCol) === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      // Adjust the end index for characters whose length are > 1 (emojis)\n      const length = bufferLine.getString(endCol).length;\n      if (length > 1) {\n        rightLongCharOffset += length - 1;\n        endIndex += length - 1;\n      }\n\n      // Expand the string in both directions until a space is hit\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n        bufferLine.loadCell(startCol - 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 0) {\n          // If the next character is a wide char, record it and skip the column\n          leftWideCharCount++;\n          startCol--;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          leftLongCharOffset += length - 1;\n          startIndex -= length - 1;\n        }\n        startIndex--;\n        startCol--;\n      }\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n        bufferLine.loadCell(endCol + 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 2) {\n          // If the next character is a wide char, record it and skip the column\n          rightWideCharCount++;\n          endCol++;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          rightLongCharOffset += length - 1;\n          endIndex += length - 1;\n        }\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    // Incremenet the end index so it is at the start of the next character\n    endIndex++;\n\n    // Calculate the start _column_, converting the the string indexes back to\n    // column coordinates.\n    let start =\n        startIndex // The index of the selection's start char in the line string\n        + charOffset // The difference between the initial char's column and index\n        - leftWideCharCount // The number of wide chars left of the initial char\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n\n    // Calculate the length in _columns_, converting the the string indexes back\n    // to column coordinates.\n    let length = Math.min(this._bufferService.cols, // Disallow lengths larger than the terminal cols\n      endIndex // The index of the selection's end char in the line string\n      - startIndex // The index of the selection's start char in the line string\n      + leftWideCharCount // The number of wide chars left of the initial char\n      + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\n      - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n      - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return undefined;\n    }\n\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\n    if (followWrappedLinesAbove) {\n      if (start === 0 && bufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n        const previousBufferLine = buffer.lines.get(coords[1] - 1);\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n          const previousLineWordPosition = this._getWordAt([this._bufferService.cols - 1, coords[1] - 1], false, true, false);\n          if (previousLineWordPosition) {\n            const offset = this._bufferService.cols - previousLineWordPosition.start;\n            start -= offset;\n            length += offset;\n          }\n        }\n      }\n    }\n\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\n    if (followWrappedLinesBelow) {\n      if (start + length === this._bufferService.cols && bufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n        const nextBufferLine = buffer.lines.get(coords[1] + 1);\n        if (nextBufferLine?.isWrapped && nextBufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n          if (nextLineWordPosition) {\n            length += nextLineWordPosition.length;\n          }\n        }\n      }\n    }\n\n    return { start, length };\n  }\n\n  /**\n   * Selects the word at the coordinates specified.\n   * @param coords The coordinates to get the word at.\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\n   */\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n    if (wordPosition) {\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        coords[1]--;\n      }\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  }\n\n  /**\n   * Sets the selection end to the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _selectToWordAt(coords: [number, number]): void {\n    const wordPosition = this._getWordAt(coords, true);\n    if (wordPosition) {\n      let endRow = coords[1];\n\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        endRow--;\n      }\n\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\n      // case we're interested in the start of the word, not the end\n      if (!this._model.areSelectionValuesReversed()) {\n        while (wordPosition.start + wordPosition.length > this._bufferService.cols) {\n          wordPosition.length -= this._bufferService.cols;\n          endRow++;\n        }\n      }\n\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n    }\n  }\n\n  /**\n   * Gets whether the character is considered a word separator by the select\n   * word logic.\n   * @param cell The cell to check.\n   */\n  private _isCharWordSeparator(cell: CellData): boolean {\n    // Zero width characters are never separators as they are always to the\n    // right of wide characters\n    if (cell.getWidth() === 0) {\n      return false;\n    }\n    return this._optionsService.rawOptions.wordSeparator.indexOf(cell.getChars()) >= 0;\n  }\n\n  /**\n   * Selects the line specified.\n   * @param line The line index.\n   */\n  protected _selectLineAt(line: number): void {\n    const wrappedRange = this._bufferService.buffer.getWrappedRangeForLine(line);\n    const range: IBufferRange = {\n      start: { x: 0, y: wrappedRange.first },\n      end: { x: this._bufferService.cols - 1, y: wrappedRange.last }\n    };\n    this._model.selectionStart = [0, wrappedRange.first];\n    this._model.selectionEnd = undefined;\n    this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/shared/Types';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { ISelectionRedrawRequestEvent as ISelectionRequestRedrawEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { AllColorIndex, IDisposable } from 'common/Types';\n\nexport const ICharSizeService = createDecorator<ICharSizeService>('CharSizeService');\nexport interface ICharSizeService {\n  serviceBrand: undefined;\n\n  readonly width: number;\n  readonly height: number;\n  readonly hasValidSize: boolean;\n\n  readonly onCharSizeChange: IEvent<void>;\n\n  measure(): void;\n}\n\nexport const ICoreBrowserService = createDecorator<ICoreBrowserService>('CoreBrowserService');\nexport interface ICoreBrowserService {\n  serviceBrand: undefined;\n\n  readonly isFocused: boolean;\n  /**\n   * Parent window that the terminal is rendered into. DOM and rendering APIs\n   * (e.g. requestAnimationFrame) should be invoked in the context of this\n   * window.\n   */\n  readonly window: Window & typeof globalThis;\n  /**\n   * Helper for getting the devicePixelRatio of the parent window.\n   */\n  readonly dpr: number;\n}\n\nexport const IMouseService = createDecorator<IMouseService>('MouseService');\nexport interface IMouseService {\n  serviceBrand: undefined;\n\n  getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined;\n  getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined;\n}\n\nexport const IRenderService = createDecorator<IRenderService>('RenderService');\nexport interface IRenderService extends IDisposable {\n  serviceBrand: undefined;\n\n  onDimensionsChange: IEvent<IRenderDimensions>;\n  /**\n   * Fires when buffer changes are rendered. This does not fire when only cursor\n   * or selections are rendered.\n   */\n  onRenderedViewportChange: IEvent<{ start: number, end: number }>;\n  /**\n   * Fires on render\n   */\n  onRender: IEvent<{ start: number, end: number }>;\n  onRefreshRequest: IEvent<{ start: number, end: number }>;\n\n  dimensions: IRenderDimensions;\n\n  addRefreshCallback(callback: FrameRequestCallback): number;\n\n  refreshRows(start: number, end: number): void;\n  clearTextureAtlas(): void;\n  resize(cols: number, rows: number): void;\n  hasRenderer(): boolean;\n  setRenderer(renderer: IRenderer): void;\n  handleDevicePixelRatioChange(): void;\n  handleResize(cols: number, rows: number): void;\n  handleCharSizeChanged(): void;\n  handleBlur(): void;\n  handleFocus(): void;\n  handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void;\n  handleCursorMove(): void;\n  clear(): void;\n}\n\nexport const ISelectionService = createDecorator<ISelectionService>('SelectionService');\nexport interface ISelectionService {\n  serviceBrand: undefined;\n\n  readonly selectionText: string;\n  readonly hasSelection: boolean;\n  readonly selectionStart: [number, number] | undefined;\n  readonly selectionEnd: [number, number] | undefined;\n\n  readonly onLinuxMouseSelection: IEvent<string>;\n  readonly onRequestRedraw: IEvent<ISelectionRequestRedrawEvent>;\n  readonly onRequestScrollLines: IEvent<ISelectionRequestScrollLinesEvent>;\n  readonly onSelectionChange: IEvent<void>;\n\n  disable(): void;\n  enable(): void;\n  reset(): void;\n  setSelection(row: number, col: number, length: number): void;\n  selectAll(): void;\n  selectLines(start: number, end: number): void;\n  clearSelection(): void;\n  rightClickSelect(event: MouseEvent): void;\n  shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean;\n  shouldForceSelection(event: MouseEvent): boolean;\n  refresh(isLinuxMouseSelection?: boolean): void;\n  handleMouseDown(event: MouseEvent): void;\n  isCellInSelection(x: number, y: number): boolean;\n}\n\nexport const ICharacterJoinerService = createDecorator<ICharacterJoinerService>('CharacterJoinerService');\nexport interface ICharacterJoinerService {\n  serviceBrand: undefined;\n\n  register(handler: (text: string) => [number, number][]): number;\n  deregister(joinerId: number): boolean;\n  getJoinedCharacters(row: number): [number, number][];\n}\n\nexport const IThemeService = createDecorator<IThemeService>('ThemeService');\nexport interface IThemeService {\n  serviceBrand: undefined;\n\n  readonly colors: ReadonlyColorSet;\n\n  readonly onChangeColors: IEvent<ReadonlyColorSet>;\n\n  restoreColor(slot?: AllColorIndex): void;\n  /**\n   * Allows external modifying of colors in the theme, this is used instead of {@link colors} to\n   * prevent accidental writes.\n   */\n  modifyColors(callback: (colors: IColorSet) => void): void;\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { IThemeService } from 'browser/services/Services';\nimport { IColorContrastCache, IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { channels, color, css, NULL_COLOR } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IOptionsService, ITheme } from 'common/services/Services';\nimport { AllColorIndex, IColor, SpecialColorIndex } from 'common/Types';\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\nexport class ThemeService extends Disposable implements IThemeService {\n  public serviceBrand: undefined;\n\n  private _colors: IColorSet;\n  private _contrastCache: IColorContrastCache = new ColorContrastCache();\n  private _halfContrastCache: IColorContrastCache = new ColorContrastCache();\n  private _restoreColors!: IRestoreColorSet;\n\n  public get colors(): ReadonlyColorSet { return this._colors; }\n\n  private readonly _onChangeColors = this.register(new EventEmitter<ReadonlyColorSet>());\n  public readonly onChangeColors = this._onChangeColors.event;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n\n    this._colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionForeground: undefined,\n      selectionBackgroundTransparent: DEFAULT_SELECTION,\n      selectionBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      selectionInactiveBackgroundTransparent: DEFAULT_SELECTION,\n      selectionInactiveBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache,\n      halfContrastCache: this._halfContrastCache\n    };\n    this._updateRestoreColors();\n    this._setTheme(this._optionsService.rawOptions.theme);\n\n    this.register(this._optionsService.onSpecificOptionChange('minimumContrastRatio', () => this._contrastCache.clear()));\n    this.register(this._optionsService.onSpecificOptionChange('theme', () => this._setTheme(this._optionsService.rawOptions.theme)));\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  private _setTheme(theme: ITheme = {}): void {\n    const colors = this._colors;\n    colors.foreground = parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    colors.background = parseColor(theme.background, DEFAULT_BACKGROUND);\n    colors.cursor = parseColor(theme.cursor, DEFAULT_CURSOR);\n    colors.cursorAccent = parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT);\n    colors.selectionBackgroundTransparent = parseColor(theme.selectionBackground, DEFAULT_SELECTION);\n    colors.selectionBackgroundOpaque = color.blend(colors.background, colors.selectionBackgroundTransparent);\n    colors.selectionInactiveBackgroundTransparent = parseColor(theme.selectionInactiveBackground, colors.selectionBackgroundTransparent);\n    colors.selectionInactiveBackgroundOpaque = color.blend(colors.background, colors.selectionInactiveBackgroundTransparent);\n    colors.selectionForeground = theme.selectionForeground ? parseColor(theme.selectionForeground, NULL_COLOR) : undefined;\n    if (colors.selectionForeground === NULL_COLOR) {\n      colors.selectionForeground = undefined;\n    }\n\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(colors.selectionBackgroundTransparent)) {\n      const opacity = 0.3;\n      colors.selectionBackgroundTransparent = color.opacity(colors.selectionBackgroundTransparent, opacity);\n    }\n    if (color.isOpaque(colors.selectionInactiveBackgroundTransparent)) {\n      const opacity = 0.3;\n      colors.selectionInactiveBackgroundTransparent = color.opacity(colors.selectionInactiveBackgroundTransparent, opacity);\n    }\n    colors.ansi = DEFAULT_ANSI_COLORS.slice();\n    colors.ansi[0] = parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    colors.ansi[1] = parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    colors.ansi[2] = parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    colors.ansi[3] = parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    colors.ansi[4] = parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    colors.ansi[5] = parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    colors.ansi[6] = parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    colors.ansi[7] = parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    colors.ansi[8] = parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    colors.ansi[9] = parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    colors.ansi[10] = parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    colors.ansi[11] = parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    colors.ansi[12] = parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    colors.ansi[13] = parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    colors.ansi[14] = parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    colors.ansi[15] = parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    if (theme.extendedAnsi) {\n      const colorCount = Math.min(colors.ansi.length - 16, theme.extendedAnsi.length);\n      for (let i = 0; i < colorCount; i++) {\n        colors.ansi[i + 16] = parseColor(theme.extendedAnsi[i], DEFAULT_ANSI_COLORS[i + 16]);\n      }\n    }\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._halfContrastCache.clear();\n    this._updateRestoreColors();\n    this._onChangeColors.fire(this.colors);\n  }\n\n  public restoreColor(slot?: AllColorIndex): void {\n    this._restoreColor(slot);\n    this._onChangeColors.fire(this.colors);\n  }\n\n  private _restoreColor(slot: AllColorIndex | undefined): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this._colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case SpecialColorIndex.FOREGROUND:\n        this._colors.foreground = this._restoreColors.foreground;\n        break;\n      case SpecialColorIndex.BACKGROUND:\n        this._colors.background = this._restoreColors.background;\n        break;\n      case SpecialColorIndex.CURSOR:\n        this._colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this._colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  public modifyColors(callback: (colors: IColorSet) => void): void {\n    callback(this._colors);\n    // Assume the change happened\n    this._onChangeColors.fire(this.colors);\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this._colors.foreground,\n      background: this._colors.background,\n      cursor: this._colors.cursor,\n      ansi: this._colors.ansi.slice()\n    };\n  }\n}\n\nfunction parseColor(\n  cssString: string | undefined,\n  fallback: IColor\n): IColor {\n  if (cssString !== undefined) {\n    try {\n      return css.toColor(cssString);\n    } catch {\n      // no-op\n    }\n  }\n  return fallback;\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> extends Disposable implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public readonly onDeleteEmitter = this.register(new EventEmitter<IDeleteEvent>());\n  public readonly onDelete = this.onDeleteEmitter.event;\n  public readonly onInsertEmitter = this.register(new EventEmitter<IInsertEvent>());\n  public readonly onInsert = this.onInsertEmitter.event;\n  public readonly onTrimEmitter = this.register(new EventEmitter<number>());\n  public readonly onTrim = this.onTrimEmitter.event;\n\n  constructor(\n    private _maxLength: number\n  ) {\n    super();\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @returns The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @returns The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\nimport { IColor, IColorRGB } from 'common/Types';\n\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport const NULL_COLOR: IColor = {\n  css: '#00000000',\n  rgba: 0\n};\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    $a = (fg.rgba & 0xFF) / 255;\n    if ($a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    const css = channels.toCss($r, $g, $b);\n    const rgba = channels.toRgba($r, $g, $b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss($r, $g, $b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    $a = Math.round(opacity * 0xFF);\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss($r, $g, $b, $a),\n      rgba: channels.toRgba($r, $g, $b, $a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    $a = color.rgba & 0xFF;\n    return opacity(color, ($a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb',\n * '#rrggbbaa').\n */\nexport namespace css {\n  let $ctx: CanvasRenderingContext2D | undefined;\n  let $litmusColor: CanvasGradient | undefined;\n  if (!isNode) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (ctx) {\n      $ctx = ctx;\n      $ctx.globalCompositeOperation = 'copy';\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\n    }\n  }\n\n  /**\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\n   *\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\n   * environment.\n   */\n  export function toColor(css: string): IColor {\n    // Formats: #rgb[a] and #rrggbb[aa]\n    if (css.match(/#[\\da-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor($r, $g, $b);\n        }\n        case 5: { // #rgba\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor($r, $g, $b, $a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n\n    // Formats: rgb() or rgba()\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) {\n      $r = parseInt(rgbaMatch[1]);\n      $g = parseInt(rgbaMatch[2]);\n      $b = parseInt(rgbaMatch[3]);\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor($r, $g, $b, $a);\n    }\n\n    // Validate the context is available for canvas-based color parsing\n    if (!$ctx || !$litmusColor) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Validate the color using canvas fillStyle\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    $ctx.fillStyle = $litmusColor;\n    $ctx.fillStyle = css;\n    if (typeof $ctx.fillStyle !== 'string') {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    $ctx.fillRect(0, 0, 1, 1);\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\n\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\n    if ($a !== 0xFF) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\n    // format\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n    return {\n      rgba: channels.toRgba($r, $g, $b, $a),\n      css\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n", "/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable, MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, LogLevelEnum, ITerminalOptions, IOscLinkService } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IAttributeData, ICoreTerminal, IScrollEvent, ScrollSource } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\nimport { OscLinkService } from 'common/services/OscLinkService';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _oscLinkService: IOscLinkService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsWrappingHeuristics = this.register(new MutableDisposable());\n\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  protected _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  protected readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  protected _onScroll = this.register(new EventEmitter<IScrollEvent, void>());\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = this.register(new EventEmitter<number, void>());\n      this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      });\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): Required<ITerminalOptions> { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = this.register(new OptionsService(options));\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this.register(this._instantiationService.createInstance(LogService));\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this.register(this._instantiationService.createInstance(CoreMouseService));\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this.unicodeService = this.register(this._instantiationService.createInstance(UnicodeService));\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n    this._oscLinkService = this._instantiationService.createInstance(OscLinkService);\n    this._instantiationService.setService(IOscLinkService, this._oscLinkService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = this.register(new InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService));\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.coreService.onRequestScrollToBottom(() => this.scrollToBottom()));\n    this.register(this.coreService.onUserInput(() =>  this._writeBuffer.handleUserInput()));\n    this.register(this.optionsService.onMultipleOptionChange(['windowsMode', 'windowsPty'], () => this._handleWindowsPtyOptionChange()));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = this.register(new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult)));\n    this.register(forwardEvent(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used to avoid\n   * unwanted events being handled by the viewport when the event was triggered from the viewport\n   * originally.\n   * @param source Which component the event came from.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  public scrollToTop(): void {\n    this.scrollLines(-this._bufferService.buffer.ydisp);\n  }\n\n  public scrollToBottom(): void {\n    this.scrollLines(this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this._bufferService.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    this._handleWindowsPtyOptionChange();\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n\n  private _handleWindowsPtyOptionChange(): void {\n    let value = false;\n    const windowsPty = this.optionsService.rawOptions.windowsPty;\n    if (windowsPty && windowsPty.buildNumber !== undefined && windowsPty.buildNumber !== undefined) {\n      value = !!(windowsPty.backend === 'conpty' && windowsPty.buildNumber < 21376);\n    } else if (this.optionsService.rawOptions.windowsMode) {\n      value = true;\n    }\n    if (value) {\n      this._enableWindowsWrappingHeuristics();\n    } else {\n      this._windowsWrappingHeuristics.clear();\n    }\n  }\n\n  protected _enableWindowsWrappingHeuristics(): void {\n    if (!this._windowsWrappingHeuristics.value) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsWrappingHeuristics.value = toDisposable(() => {\n        for (const d of disposables) {\n          d.dispose();\n        }\n      });\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    this.clearListeners();\n    this._disposed = true;\n  }\n\n  public clearListeners(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType, SpecialColorIndex } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { StringToUtf32, stringFromCodePoint, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { IParsingState, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum, IOscLinkService } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document xterm VT features here that are currently unsupported\n */\n// @vt: #E[Supported via xterm-addon-image.]  DCS   SIXEL       \"SIXEL Graphics\"          \"DCS Ps ; Ps ; Ps ; q \tPt ST\"  \"Draw SIXEL image.\"\n// @vt: #N  DCS   DECUDK      \"User Defined Keys\"       \"DCS Ps ; Ps \\| Pt ST\"           \"Definitions for user-defined keys.\"\n// @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\" \"DCS + q Pt ST\"                 \"Request Terminfo String.\"\n// @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"       \"DCS + p Pt ST\"                 \"Set Terminfo Data.\"\n// @vt: #N  OSC   1           \"Set Icon Name\"           \"OSC 1 ; Pt BEL\"                \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n// Work variables to avoid garbage collection\nlet $temp = 0;\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  private _dirtyRowTracker: IDirtyRowTracker;\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  public getAttrData(): IAttributeData { return this._curAttrData; }\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private readonly _onRequestBell = this.register(new EventEmitter<void>());\n  public readonly onRequestBell = this._onRequestBell.event;\n  private readonly _onRequestRefreshRows = this.register(new EventEmitter<number, number>());\n  public readonly onRequestRefreshRows = this._onRequestRefreshRows.event;\n  private readonly _onRequestReset = this.register(new EventEmitter<void>());\n  public readonly onRequestReset = this._onRequestReset.event;\n  private readonly _onRequestSendFocus = this.register(new EventEmitter<void>());\n  public readonly onRequestSendFocus = this._onRequestSendFocus.event;\n  private readonly _onRequestSyncScrollBar = this.register(new EventEmitter<void>());\n  public readonly onRequestSyncScrollBar = this._onRequestSyncScrollBar.event;\n  private readonly _onRequestWindowsOptionsReport = this.register(new EventEmitter<WindowsOptionsReportType>());\n  public readonly onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event;\n\n  private readonly _onA11yChar = this.register(new EventEmitter<string>());\n  public readonly onA11yChar = this._onA11yChar.event;\n  private readonly _onA11yTab = this.register(new EventEmitter<number>());\n  public readonly onA11yTab = this._onA11yTab.event;\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onColor = this.register(new EventEmitter<IColorEvent>());\n  public readonly onColor = this._onColor.event;\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _oscLinkService: IOscLinkService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n    this._dirtyRowTracker = new DirtyRowTracker(this._bufferService);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params, true));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params, true));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\"', final: 'q' }, params => this.selectProtected(params));\n    this._parser.registerCsiHandler({ intermediates: '$', final: 'p' }, params => this.requestMode(params, true));\n    this._parser.registerCsiHandler({ prefix: '?', intermediates: '$', final: 'p' }, params => this.requestMode(params, false));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //   8 - create hyperlink (not in xterm spec, see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)\n    this._parser.registerOscHandler(8, new OscHandler(data => this.setHyperlink(data)));\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DcsHandler((data, params) => this.requestStatusString(data, params)));\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  private _getCurrentLinkId(): number {\n    return this._curAttrData.extended.urlId;\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with same chunk and the promise\n   *   resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order\n   * and proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ` \"${Array.prototype.map.call(data, e => String.fromCharCode(e)).join('')}\"`}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowTracker.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowTracker.start, this._dirtyRowTracker.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n      if (this._getCurrentLinkId()) {\n        this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y);\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    } else {\n      // There was an explicit line feed (not just a carriage return), so clear the wrapped state of\n      // the line. This is particularly important on conpty/Windows where revisiting lines to\n      // reprint is common, especially on resize. Note that the windowsMode wrapped line heuristics\n      // can mess with this so windowsMode should be disabled, which is recommended on Windows build\n      // 21376 and above.\n      this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one\n        //   cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once\n          // before early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps \" q  Select Character Protection Attribute (DECSCA).\n   *\n   * @vt: #Y CSI DECSCA   \"Select Character Protection Attribute\"  \"CSI Ps \" q\"  \"Whether DECSED and DECSEL can erase (0=default, 2) or not (1).\"\n   */\n  public selectProtected(params: IParams): boolean {\n    const p = params.params[0];\n    if (p === 1) this._curAttrData.bg |= BgFlags.PROTECTED;\n    if (p === 2 || p === 0) this._curAttrData.bg &= ~BgFlags.PROTECTED;\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y The row index relative to the viewport.\n   * @param start The start x index of the range to be erased.\n   * @param end The end x index of the range to be erased (exclusive).\n   * @param clearWrap clear the isWrapped flag\n   * @param respectProtect Whether to respect the protection attribute (DECSCA).\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData(),\n      respectProtect\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row. The cell gets replaced with the eraseChar of\n   * the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y);\n    if (line) {\n      line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), respectProtect);\n      this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + y);\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #Y CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Same as ED with respecting protection flag.\"\n   */\n  public eraseInDisplay(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true, respectProtect);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowTracker.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #Y CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Same as EL with respecting protecting flag.\"\n   */\n  public eraseInLine(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false, respectProtect);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true, respectProtect);\n        break;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the\n   * blank characters. Text between the cursor and right margin moves to the right. Characters moved\n   * past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to\n   * the left. Character attributes move with the characters. The terminal adds blank characters at\n   * the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll\n   * margins, moving content to the right. Content at the right margin is lost. DECIC has no effect\n   * outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty, the\n   * preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is\n   * set. REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM).               | #Y      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1016  | Enable SGR-Pixels Mouse Mode.                           | #Y      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'SGR_PIXELS';\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM).                 | #Y      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1016  | Disable SGR-Pixels Mouse Mode.                          | #Y      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps $ p Request ANSI Mode (DECRQM).\n   *\n   * Reports CSI Ps; Pm $ y (DECRPM), where Ps is the mode number as in SM/RM,\n   * and Pm is the mode value:\n   *    0 - not recognized\n   *    1 - set\n   *    2 - reset\n   *    3 - permanently set\n   *    4 - permanently reset\n   *\n   * @vt: #Y  CSI   DECRQM  \"Request Mode\"  \"CSI Ps $p\"  \"Request mode state.\"\n   * Returns a report as `CSI Ps; Pm $ y` (DECRPM), where `Ps` is the mode number as in SM/RM\n   * or DECSET/DECRST, and `Pm` is the mode value:\n   * - 0: not recognized\n   * - 1: set\n   * - 2: reset\n   * - 3: permanently set\n   * - 4: permanently reset\n   *\n   * For modes not understood xterm.js always returns `notRecognized`. In general this means,\n   * that a certain operation mode is not implemented and cannot be used.\n   *\n   * Modes changing the active terminal buffer (47, 1047, 1049) are not subqueried\n   * and only report, whether the alternate buffer is set.\n   *\n   * Mouse encodings and mouse protocols are handled mutual exclusive,\n   * thus only one of each of those can be set at a given time.\n   *\n   * There is a chance, that some mode reports are not fully in line with xterm.js' behavior,\n   * e.g. if the default implementation already exposes a certain behavior. If you find\n   * discrepancies in the mode reports, please file a bug.\n   */\n  public requestMode(params: IParams, ansi: boolean): boolean {\n    // return value as in DECRPM\n    const enum V {\n      NOT_RECOGNIZED = 0,\n      SET = 1,\n      RESET = 2,\n      PERMANENTLY_SET = 3,\n      PERMANENTLY_RESET = 4\n    }\n\n    // access helpers\n    const dm = this._coreService.decPrivateModes;\n    const { activeProtocol: mouseProtocol, activeEncoding: mouseEncoding } = this._coreMouseService;\n    const cs = this._coreService;\n    const { buffers, cols } = this._bufferService;\n    const { active, alt } = buffers;\n    const opts = this._optionsService.rawOptions;\n\n    const f = (m: number, v: V): boolean => {\n      cs.triggerDataEvent(`${C0.ESC}[${ansi ? '' : '?'}${m};${v}$y`);\n      return true;\n    };\n    const b2v = (value: boolean): V => value ? V.SET : V.RESET;\n\n    const p = params.params[0];\n\n    if (ansi) {\n      if (p === 2) return f(p, V.PERMANENTLY_RESET);\n      if (p === 4) return f(p, b2v(cs.modes.insertMode));\n      if (p === 12) return f(p, V.PERMANENTLY_SET);\n      if (p === 20) return f(p, b2v(opts.convertEol));\n      return f(p, V.NOT_RECOGNIZED);\n    }\n\n    if (p === 1) return f(p, b2v(dm.applicationCursorKeys));\n    if (p === 3) return f(p, opts.windowOptions.setWinLines ? (cols === 80 ? V.RESET : cols === 132 ? V.SET : V.NOT_RECOGNIZED) : V.NOT_RECOGNIZED);\n    if (p === 6) return f(p, b2v(dm.origin));\n    if (p === 7) return f(p, b2v(dm.wraparound));\n    if (p === 8) return f(p, V.PERMANENTLY_SET);\n    if (p === 9) return f(p, b2v(mouseProtocol === 'X10'));\n    if (p === 12) return f(p, b2v(opts.cursorBlink));\n    if (p === 25) return f(p, b2v(!cs.isCursorHidden));\n    if (p === 45) return f(p, b2v(dm.reverseWraparound));\n    if (p === 66) return f(p, b2v(dm.applicationKeypad));\n    if (p === 67) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1000) return f(p, b2v(mouseProtocol === 'VT200'));\n    if (p === 1002) return f(p, b2v(mouseProtocol === 'DRAG'));\n    if (p === 1003) return f(p, b2v(mouseProtocol === 'ANY'));\n    if (p === 1004) return f(p, b2v(dm.sendFocus));\n    if (p === 1005) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1006) return f(p, b2v(mouseEncoding === 'SGR'));\n    if (p === 1015) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1016) return f(p, b2v(mouseEncoding === 'SGR_PIXELS'));\n    if (p === 1048) return f(p, V.SET); // xterm always returns SET here\n    if (p === 47 || p === 1047 || p === 1049) return f(p, b2v(active === alt));\n    if (p === 2004) return f(p, b2v(dm.bracketedPasteMode));\n    return f(p, V.NOT_RECOGNIZED);\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  private _processSGR0(attr: IAttributeData): void {\n    attr.fg = DEFAULT_ATTR_DATA.fg;\n    attr.bg = DEFAULT_ATTR_DATA.bg;\n    attr.extended = attr.extended.clone();\n    // Reset underline style and color. Note that we don't want to reset other\n    // fields such as the url id.\n    attr.extended.underlineStyle = UnderlineStyle.NONE;\n    attr.extended.underlineColor &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #Y      |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 53        | Overlined.                                               | #Y      |\n   * | 55        | Not Overlined.                                           | #Y      |\n   * | 58        | Underline color: Extended color.                         | #P[Support for RGB and indexed colors, see below.] |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #Y      |\n   * | 3      | Curly underline.                                              | #Y      |\n   * | 4      | Dotted underline.                                             | #Y      |\n   * | 5      | Dashed underline.                                             | #Y      |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38), background (Ps=48) and underline (Ps=58)\n   * as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._processSGR0(this._curAttrData);\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        this._processSGR0(attr);\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n        this._processUnderline(UnderlineStyle.NONE, attr);\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 53) {\n        // overline\n        attr.bg |= BgFlags.OVERLINE;\n      } else if (p === 55) {\n        // not overline\n        attr.bg &= ~BgFlags.OVERLINE;\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full\n   * terminal bootstrap, DECSTR only resets certain attributes. For most needs DECSTR should be\n   * sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event\n   * `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from\n   * `XParseColor` (see OSC 10 for supported formats). There may be multipe `c ; spec` pairs present\n   * in the same instruction. If `spec` contains `?` the terminal returns a sequence with the\n   * currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (isValidColorIndex(index)) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 8 ; <params> ; <uri> ST - create hyperlink\n   * OSC 8 ; ; ST - finish hyperlink\n   *\n   * Test case:\n   *\n   * ```sh\n   * printf '\\e]8;;http://example.com\\e\\\\This is a link\\e]8;;\\e\\\\\\n'\n   * ```\n   *\n   * @vt: #Y    OSC    8    \"Create hyperlink\"   \"OSC 8 ; params ; uri BEL\" \"Create a hyperlink to `uri` using `params`.\"\n   * `uri` is a hyperlink starting with `http://`, `https://`, `ftp://`, `file://` or `mailto://`. `params` is an\n   * optional list of key=value assignments, separated by the : character.\n   * Example: `id=xyz123:foo=bar:baz=quux`.\n   * Currently only the id key is defined. Cells that share the same ID and URI share hover\n   * feedback. Use `OSC 8 ; ; BEL` to finish the current hyperlink.\n   */\n  public setHyperlink(data: string): boolean {\n    const args = data.split(';');\n    if (args.length < 2) {\n      return false;\n    }\n    if (args[1]) {\n      return this._createHyperlink(args[0], args[1]);\n    }\n    if (args[0]) {\n      return false;\n    }\n    return this._finishHyperlink();\n  }\n\n  private _createHyperlink(params: string, uri: string): boolean {\n    // It's legal to open a new hyperlink without explicitly finishing the previous one\n    if (this._getCurrentLinkId()) {\n      this._finishHyperlink();\n    }\n    const parsedParams = params.split(':');\n    let id: string | undefined;\n    const idParamIndex = parsedParams.findIndex(e => e.startsWith('id='));\n    if (idParamIndex !== -1) {\n      id = parsedParams[idParamIndex].slice(3) || undefined;\n    }\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = this._oscLinkService.registerLink({ id, uri });\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  private _finishHyperlink(): boolean {\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = 0;\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [SpecialColorIndex.FOREGROUND, SpecialColorIndex.BACKGROUND, SpecialColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (isValidColorIndex(index)) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowTracker.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n\n\n  /**\n   * DCS $ q Pt ST\n   *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n   *   Request Status String (DECRQSS), VT420 and up.\n   *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n   *\n   * @vt: #P[Limited support, see below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n   * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the\n   * corresponding CSI string, `ESC P 0 ST` for invalid requests.\n   *\n   * Supported requests and responses:\n   *\n   * | Type                             | Request           | Response (`Pt`)                                       |\n   * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n   * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n   * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n   * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n   * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | `Ps \" q` (DECSCA 2 is reported as Ps = 0)             |\n   * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n   *\n   *\n   * TODO:\n   * - fix SGR report\n   * - either check which conformance is better suited or remove the report completely\n   *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n   */\n  public requestStatusString(data: string, params: IParams): boolean {\n    const f = (s: string): boolean => {\n      this._coreService.triggerDataEvent(`${C0.ESC}${s}${C0.ESC}\\\\`);\n      return true;\n    };\n\n    // access helpers\n    const b = this._bufferService.buffer;\n    const opts = this._optionsService.rawOptions;\n    const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n\n    if (data === '\"q') return f(`P1$r${this._curAttrData.isProtected() ? 1 : 0}\"q`);\n    if (data === '\"p') return f(`P1$r61;1\"p`);\n    if (data === 'r') return f(`P1$r${b.scrollTop + 1};${b.scrollBottom + 1}r`);\n    // FIXME: report real SGR settings instead of 0m\n    if (data === 'm') return f(`P1$r0m`);\n    if (data === ' q') return f(`P1$r${STYLES[opts.cursorStyle] - (opts.cursorBlink ? 1 : 0)} q`);\n    return f(`P0$r`);\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    this._dirtyRowTracker.markRangeDirty(y1, y2);\n  }\n}\n\nexport interface IDirtyRowTracker {\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nclass DirtyRowTracker implements IDirtyRowTracker {\n  public start!: number;\n  public end!: number;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this.start = this._bufferService.buffer.y;\n    this.end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this.start) {\n      this.start = y;\n    } else if (y > this.end) {\n      this.end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      $temp = y1;\n      y1 = y2;\n      y2 = $temp;\n    }\n    if (y1 < this.start) {\n      this.start = y1;\n    }\n    if (y2 > this.end) {\n      this.end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n\nfunction isValidColorIndex(value: number): value is ColorIndex {\n  return 0 <= value && value < 256;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\nexport class MutableDisposable<T extends IDisposable> implements IDisposable {\n  private _value?: T;\n  private _isDisposed = false;\n\n  /**\n   * Gets the value if it exists.\n   */\n  public get value(): T | undefined {\n    return this._isDisposed ? undefined : this._value;\n  }\n\n  /**\n   * Sets the value, disposing of the old value if it exists.\n   */\n  public set value(value: T | undefined) {\n    if (this._isDisposed || value === this._value) {\n      return;\n    }\n    this._value?.dispose();\n    this._value = value;\n  }\n\n  /**\n   * Resets the stored value and disposes of the previously stored value.\n   */\n  public clear(): void {\n    this.value = undefined;\n  }\n\n  public dispose(): void {\n    this._isDisposed = true;\n    this._value?.dispose();\n    this._value = undefined;\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nexport const isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexport function getSafariVersion(): number {\n  if (!isSafari) {\n    return 0;\n  }\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\n  if (majorVersion === null || majorVersion.length < 2) {\n    return 0;\n  }\n  return parseInt(majorVersion[1]);\n}\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n// Note that when this is true, isLinux will also be true.\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// Work variables to avoid garbage collection.\nlet i = 0;\n\n/**\n * A generic list that is maintained in sorted order and allows values with duplicate keys. This\n * list is based on binary search and as such locating a key will take O(log n) amortized, this\n * includes the by key iterator.\n */\nexport class SortedList<T> {\n  private readonly _array: T[] = [];\n\n  constructor(\n    private readonly _getKey: (value: T) => number\n  ) {\n  }\n\n  public clear(): void {\n    this._array.length = 0;\n  }\n\n  public insert(value: T): void {\n    if (this._array.length === 0) {\n      this._array.push(value);\n      return;\n    }\n    i = this._search(this._getKey(value));\n    this._array.splice(i, 0, value);\n  }\n\n  public delete(value: T): boolean {\n    if (this._array.length === 0) {\n      return false;\n    }\n    const key = this._getKey(value);\n    if (key === undefined) {\n      return false;\n    }\n    i = this._search(key);\n    if (i === -1) {\n      return false;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return false;\n    }\n    do {\n      if (this._array[i] === value) {\n        this._array.splice(i, 1);\n        return true;\n      }\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n    return false;\n  }\n\n  public *getKeyIterator(key: number): IterableIterator<T> {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      yield this._array[i];\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public forEachByKey(key: number, callback: (value: T) => void): void {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      callback(this._array[i]);\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public values(): IterableIterator<T> {\n    // Duplicate the array to avoid issues when _array changes while iterating\n    return [...this._array].values();\n  }\n\n  private _search(key: number): number {\n    let min = 0;\n    let max = this._array.length - 1;\n    while (max >= min) {\n      let mid = (min + max) >> 1;\n      const midKey = this._getKey(this._array[mid]);\n      if (midKey > key) {\n        max = mid - 1;\n      } else if (midKey < key) {\n        min = mid + 1;\n      } else {\n        // key in list, walk to lowest duplicate\n        while (mid > 0 && this._getKey(this._array[mid - 1]) === key) {\n          mid--;\n        }\n        return mid;\n      }\n    }\n    // key not in list\n    // still return closest min (also used as insert position)\n    return min;\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\n\ninterface ITaskQueue {\n  /**\n   * Adds a task to the queue which will run in a future idle callback.\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\n   * should split their work into smaller pieces and return `true` to get\n   * called again until the work is done (on falsy return value).\n   */\n  enqueue(task: () => boolean | void): void;\n\n  /**\n   * Flushes the queue, running all remaining tasks synchronously.\n   */\n  flush(): void;\n\n  /**\n   * Clears any remaining tasks from the queue, these will not be run.\n   */\n  clear(): void;\n}\n\ninterface ITaskDeadline {\n  timeRemaining(): number;\n}\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\n\nabstract class TaskQueue implements ITaskQueue {\n  private _tasks: (() => boolean | void)[] = [];\n  private _idleCallback?: number;\n  private _i = 0;\n\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\n  protected abstract _cancelCallback(identifier: number): void;\n\n  public enqueue(task: () => boolean | void): void {\n    this._tasks.push(task);\n    this._start();\n  }\n\n  public flush(): void {\n    while (this._i < this._tasks.length) {\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n    }\n    this.clear();\n  }\n\n  public clear(): void {\n    if (this._idleCallback) {\n      this._cancelCallback(this._idleCallback);\n      this._idleCallback = undefined;\n    }\n    this._i = 0;\n    this._tasks.length = 0;\n  }\n\n  private _start(): void {\n    if (!this._idleCallback) {\n      this._idleCallback = this._requestCallback(this._process.bind(this));\n    }\n  }\n\n  private _process(deadline: ITaskDeadline): void {\n    this._idleCallback = undefined;\n    let taskDuration = 0;\n    let longestTask = 0;\n    let lastDeadlineRemaining = deadline.timeRemaining();\n    let deadlineRemaining = 0;\n    while (this._i < this._tasks.length) {\n      taskDuration = Date.now();\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\n      // this is not an issue here as a clock change during a short running task is very unlikely\n      // in case it still happened and leads to negative duration, simply assume 1 msec\n      taskDuration = Math.max(1, Date.now() - taskDuration);\n      longestTask = Math.max(taskDuration, longestTask);\n      // Guess the following task will take a similar time to the longest task in this batch, allow\n      // additional room to try avoid exceeding the deadline\n      deadlineRemaining = deadline.timeRemaining();\n      if (longestTask * 1.5 > deadlineRemaining) {\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\n        // task should be split into sub-tasks to ensure the UI remains responsive.\n        if (lastDeadlineRemaining - taskDuration < -20) {\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\n        }\n        this._start();\n        return;\n      }\n      lastDeadlineRemaining = deadlineRemaining;\n    }\n    this.clear();\n  }\n}\n\n/**\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\n */\nexport class PriorityTaskQueue extends TaskQueue {\n  protected _requestCallback(callback: CallbackWithDeadline): number {\n    return setTimeout(() => callback(this._createDeadline(16)));\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    clearTimeout(identifier);\n  }\n\n  private _createDeadline(duration: number): ITaskDeadline {\n    const end = Date.now() + duration;\n    return {\n      timeRemaining: () => Math.max(0, end - Date.now())\n    };\n  }\n}\n\nclass IdleTaskQueueInternal extends TaskQueue {\n  protected _requestCallback(callback: IdleRequestCallback): number {\n    return requestIdleCallback(callback);\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    cancelIdleCallback(identifier);\n  }\n}\n\n/**\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\n * introduce race conditions.\n *\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\n\n/**\n * An object that tracks a single debounced task that will run on the next idle frame. When called\n * multiple times, only the last set task will run.\n */\nexport class DebouncedIdleTask {\n  private _queue: ITaskQueue;\n\n  constructor() {\n    this._queue = new IdleTaskQueue();\n  }\n\n  public set(task: () => boolean | void): void {\n    this._queue.clear();\n    this._queue.enqueue(task);\n  }\n\n  public flush(): void {\n    this._queue.flush();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n  public isOverline(): number      { return this.bg & BgFlags.OVERLINE; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IdleTaskQueue } from 'common/TaskQueue';\nimport { IAttributeData, IBufferLine, ICellData, ICharset } from 'common/Types';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { getWrappedLineTrimmedLength, reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths } from 'common/buffer/BufferReflow';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_CODE, NULL_CELL_WIDTH, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_CODE, WHITESPACE_CELL_WIDTH } from 'common/buffer/Constants';\nimport { Marker } from 'common/buffer/Marker';\nimport { IBuffer } from 'common/buffer/Types';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  public tabs: { [column: number]: boolean | undefined } = {};\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n  private _isClearing: boolean = false;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // count bufferlines with overly big memory to be cleaned afterwards\n    let dirtyMemoryLines = 0;\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode || this._optionsService.rawOptions.windowsPty.backend !== undefined || this._optionsService.rawOptions.windowsPty.buildNumber !== undefined) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n\n    this._memoryCleanupQueue.clear();\n    // schedule memory cleanup only, if more than 10% of the lines are affected\n    if (dirtyMemoryLines > 0.1 * this.lines.length) {\n      this._memoryCleanupPosition = 0;\n      this._memoryCleanupQueue.enqueue(() => this._batchedMemoryCleanup());\n    }\n  }\n\n  private _memoryCleanupQueue = new IdleTaskQueue();\n  private _memoryCleanupPosition = 0;\n\n  private _batchedMemoryCleanup(): boolean {\n    let normalRun = true;\n    if (this._memoryCleanupPosition >= this.lines.length) {\n      // cleanup made it once through all lines, thus rescan in loop below to also catch shifted\n      // lines, which should finish rather quick if there are no more cleanups pending\n      this._memoryCleanupPosition = 0;\n      normalRun = false;\n    }\n    let counted = 0;\n    while (this._memoryCleanupPosition < this.lines.length) {\n      counted += this.lines.get(this._memoryCleanupPosition++)!.cleanupMemory();\n      // cleanup max 100 lines per batch\n      if (counted > 100) {\n        return true;\n      }\n    }\n    // normal runs always need another rescan afterwards\n    // if we made it here with normalRun=false, we are in a final run\n    // and can end the cleanup task for sure\n    return normalRun;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    const windowsPty = this._optionsService.rawOptions.windowsPty;\n    if (windowsPty && windowsPty.buildNumber) {\n      return this._hasScrollback && windowsPty.backend === 'conpty' && windowsPty.buildNumber >= 21376;\n    }\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param lineIndex The absolute index of the line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Clears markers on single line.\n   * @param y The line to clear.\n   */\n  public clearMarkers(y: number): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].line === y) {\n        this.markers[i].dispose();\n        this.markers.splice(i--, 1);\n      }\n    }\n    this._isClearing = false;\n  }\n\n  /**\n   * Clears markers on all lines\n   */\n  public clearAllMarkers(): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      this.markers[i].dispose();\n      this.markers.splice(i--, 1);\n    }\n    this._isClearing = false;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    if (!this._isClearing) {\n      this.markers.splice(this.markers.indexOf(marker), 1);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IAttributeData, IBufferLine, ICellData, IExtendedAttrs } from 'common/Types';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\nimport { CellData } from 'common/buffer/CellData';\nimport { Attributes, BgFlags, CHAR_DATA_ATTR_INDEX, CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, Content, NULL_CELL_CHAR, NULL_CELL_CODE, NULL_CELL_WIDTH, WHITESPACE_CELL_CHAR } from 'common/buffer/Constants';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n// Work variables to avoid garbage collection\nlet $startIndex = 0;\n\n/** Factor when to cleanup underlying array buffer after shrinking. */\nconst CLEANUP_THRESHOLD = 2;\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: IExtendedAttrs | undefined} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /** Get state of protected flag. */\n  public isProtected(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG] & BgFlags.PROTECTED;\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    $startIndex = index * CELL_SIZE;\n    cell.content = this._data[$startIndex + Cell.CONTENT];\n    cell.fg = this._data[$startIndex + Cell.FG];\n    cell.bg = this._data[$startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index]!;\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      if (start && this.getWidth(start - 1) === 2 && !this.isProtected(start - 1)) {\n        this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      if (end < this.length && this.getWidth(end - 1) === 2 && !this.isProtected(end)) {\n        this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      while (start < end  && start < this.length) {\n        if (!this.isProtected(start)) {\n          this.setCell(start, fillCellData);\n        }\n        start++;\n      }\n      return;\n    }\n\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  /**\n   * Resize BufferLine to `cols` filling excess cells with `fillCellData`.\n   * The underlying array buffer will not change if there is still enough space\n   * to hold the new buffer line data.\n   * Returns a boolean indicating, whether a `cleanupMemory` call would free\n   * excess memory (true after shrinking > CLEANUP_THRESHOLD).\n   */\n  public resize(cols: number, fillCellData: ICellData): boolean {\n    if (cols === this.length) {\n      return this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n    }\n    const uint32Cells = cols * CELL_SIZE;\n    if (cols > this.length) {\n      if (this._data.buffer.byteLength >= uint32Cells * 4) {\n        // optimization: avoid alloc and data copy if buffer has enough room\n        this._data = new Uint32Array(this._data.buffer, 0, uint32Cells);\n      } else {\n        // slow path: new alloc and full data copy\n        const data = new Uint32Array(uint32Cells);\n        data.set(this._data);\n        this._data = data;\n      }\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      // optimization: just shrink the view on existing buffer\n      this._data = this._data.subarray(0, uint32Cells);\n      // Remove any cut off combined data\n      const keys = Object.keys(this._combined);\n      for (let i = 0; i < keys.length; i++) {\n        const key = parseInt(keys[i], 10);\n        if (key >= cols) {\n          delete this._combined[key];\n        }\n      }\n      // remove any cut off extended attributes\n      const extKeys = Object.keys(this._extendedAttrs);\n      for (let i = 0; i < extKeys.length; i++) {\n        const key = parseInt(extKeys[i], 10);\n        if (key >= cols) {\n          delete this._extendedAttrs[key];\n        }\n      }\n    }\n    this.length = cols;\n    return uint32Cells * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n  }\n\n  /**\n   * Cleanup underlying array buffer.\n   * A cleanup will be triggered if the array buffer exceeds the actual used\n   * memory by a factor of CLEANUP_THRESHOLD.\n   * Returns 0 or 1 indicating whether a cleanup happened.\n   */\n  public cleanupMemory(): number {\n    if (this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength) {\n      const data = new Uint32Array(this._data.length);\n      data.set(this._data);\n      this._data = data;\n      return 1;\n    }\n    return 0;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      for (let i = 0; i < this.length; ++i) {\n        if (!this.isProtected(i)) {\n          this.setCell(i, fillCellData);\n        }\n      }\n      return;\n    }\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public getNoBgTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK) || (this._data[i * CELL_SIZE + Cell.BG] & Attributes.CM_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange } from 'xterm';\n\nexport function getRangeLength(range: IBufferRange, bufferCols: number): number {\n  if (range.start.y > range.end.y) {\n    throw new Error(`Buffer range end (${range.end.x}, ${range.end.y}) cannot be before start (${range.start.x}, ${range.start.y})`);\n  }\n  return bufferCols * (range.end.y - range.start.y) + (range.end.x - range.start.x + 1);\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param oldCols The columns before resize\n * @param newCols The columns after resize.\n * @param bufferAbsoluteY The absolute y position of the cursor (baseY + cursorY).\n * @param nullCell The cell data to use when filling in empty cells.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private readonly _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public readonly onBufferActivate = this._onBufferActivate.event;\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.resize(this._bufferService.cols, this._bufferService.rows)));\n    this.register(this._optionsService.onSpecificOptionChange('tabStopWidth', () => this.setupTabStops()));\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clearAllMarkers();\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n    this.setupTabStops(newCols);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 0;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000,\n  OVERLINE = 0x40000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { disposeArray } from 'common/Lifecycle';\nimport { IDisposable, IMarker } from 'common/Types';\n\nexport class Marker implements IMarker {\n  private static _nextId = 1;\n\n  public isDisposed: boolean = false;\n  private readonly _disposables: IDisposable[] = [];\n\n  private readonly _id: number = Marker._nextId++;\n  public get id(): number { return this._id; }\n\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  constructor(\n    public line: number\n  ) {\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    disposeArray(this._disposables);\n    this._disposables.length = 0;\n  }\n\n  public register<T extends IDisposable>(disposable: T): T {\n    this._disposables.push(disposable);\n    return disposable;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u2409', // '␉' (HT)\n  'c': '\\u240c', // '␌' (FF)\n  'd': '\\u240d', // '␍' (CR)\n  'e': '\\u240a', // '␊' (LF)\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '␤' (NL)\n  'i': '\\u240b', // '␋' (VT)\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\nexport namespace C1_ESCAPED {\n  export const ST = `${C0.ESC}\\\\`;\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IKeyboardEvent, IKeyboardResult, KeyboardResultType } from 'common/Types';\nimport { C0 } from 'common/data/EscapeSequences';\n\n// reg + shift key mappings for digits and special chars\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\n  // digits 0-9\n  48: ['0', ')'],\n  49: ['1', '!'],\n  50: ['2', '@'],\n  51: ['3', '#'],\n  52: ['4', '$'],\n  53: ['5', '%'],\n  54: ['6', '^'],\n  55: ['7', '&'],\n  56: ['8', '*'],\n  57: ['9', '('],\n\n  // special chars\n  186: [';', ':'],\n  187: ['=', '+'],\n  188: [',', '<'],\n  189: ['-', '_'],\n  190: ['.', '>'],\n  191: ['/', '?'],\n  192: ['`', '~'],\n  219: ['[', '{'],\n  220: ['\\\\', '|'],\n  221: [']', '}'],\n  222: ['\\'', '\"']\n};\n\nexport function evaluateKeyboardEvent(\n  ev: IKeyboardEvent,\n  applicationCursorMode: boolean,\n  isMac: boolean,\n  macOptionIsMeta: boolean\n): IKeyboardResult {\n  const result: IKeyboardResult = {\n    type: KeyboardResultType.SEND_KEY,\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined\n  };\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n  switch (ev.keyCode) {\n    case 0:\n      if (ev.key === 'UIKeyInputUpArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OA';\n        } else {\n          result.key = C0.ESC + '[A';\n        }\n      }\n      else if (ev.key === 'UIKeyInputLeftArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OD';\n        } else {\n          result.key = C0.ESC + '[D';\n        }\n      }\n      else if (ev.key === 'UIKeyInputRightArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OC';\n        } else {\n          result.key = C0.ESC + '[C';\n        }\n      }\n      else if (ev.key === 'UIKeyInputDownArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OB';\n        } else {\n          result.key = C0.ESC + '[B';\n        }\n      }\n      break;\n    case 8:\n      // backspace\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.DEL; // \\e ^?\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = ev.altKey ? C0.ESC + C0.CR : C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.ESC;\n      }\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3D') {\n          result.key = C0.ESC + (isMac ? 'b' : '[1;5D');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3C') {\n          result.key = C0.ESC + (isMac ? 'f' : '[1;5C');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OH';\n      } else {\n        result.key = C0.ESC + '[H';\n      }\n      break;\n    case 35:\n      // end\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OF';\n      } else {\n        result.key = C0.ESC + '[F';\n      }\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_UP;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[5;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_DOWN;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[6;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          result.key = C0.NUL;\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          result.key = C0.DEL;\n        } else if (ev.keyCode === 219) {\n          result.key = C0.ESC;\n        } else if (ev.keyCode === 220) {\n          result.key = C0.FS;\n        } else if (ev.keyCode === 221) {\n          result.key = C0.GS;\n        }\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n        const key = keyMapping?.[!ev.shiftKey ? 0 : 1];\n        if (key) {\n          result.key = C0.ESC + key;\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n          let keyString = String.fromCharCode(keyCode);\n          if (ev.shiftKey) {\n            keyString = keyString.toUpperCase();\n          }\n          result.key = C0.ESC + keyString;\n        } else if (ev.keyCode === 32) {\n          result.key = C0.ESC + (ev.ctrlKey ? C0.NUL : ' ');\n        } else if (ev.key === 'Dead' && ev.code.startsWith('Key')) {\n          // Reference: https://github.com/xtermjs/xterm.js/issues/3725\n          // Alt will produce a \"dead key\" (initate composition) with some\n          // of the letters in US layout (e.g. N/E/U).\n          // It's safe to match against Key* since no other `code` values begin with \"Key\".\n          // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values#code_values_on_mac\n          let keyString = ev.code.slice(3, 4);\n          if (!ev.shiftKey) {\n            keyString = keyString.toLowerCase();\n          }\n          result.key = C0.ESC + keyString;\n          result.cancel = true;\n        }\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && !ev.shiftKey && ev.metaKey) {\n        if (ev.keyCode === 65) { // cmd + a\n          result.type = KeyboardResultType.SELECT_ALL;\n        }\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n        // Include only keys that that result in a _single_ character; don't include num lock,\n        // volume up, etc.\n        result.key = ev.key;\n      } else if (ev.key && ev.ctrlKey) {\n        if (ev.key === '_') { // ^_\n          result.key = C0.US;\n        }\n        if (ev.key === '@') { // ^ + shift + 2 = ^ + @\n          result.key = C0.NUL;\n        }\n      }\n      break;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate\n      // pair conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      table.fill(1);\n      table[0] = 0;\n      // control chars\n      table.fill(0, 1, 32);\n      table.fill(0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      table.fill(2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      table.fill(2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      table.fill(2, 0xac00, 0xd7a4);\n      table.fill(2, 0xf900, 0xfb00);\n      table.fill(2, 0xfe10, 0xfe1a);\n      table.fill(2, 0xfe30, 0xfe70);\n      table.fill(2, 0xff00, 0xff61);\n      table.fill(2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        table.fill(0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n", "\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\nexport class WriteBuffer extends Disposable {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n  private _didUserInput = false;\n\n  private readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) {\n    super();\n  }\n\n  public handleUserInput(): void {\n    this._didUserInput = true;\n  }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n\n      // If this is the first write call after the user has done some input,\n      // parse it immediately to minimize input latency,\n      // otherwise schedule for the next event\n      if (this._didUserInput) {\n        this._didUserInput = false;\n        this._pendingData += data.length;\n        this._writeBuffer.push(data);\n        this._callbacks.push(callback);\n        this._innerWrite();\n        return;\n      }\n\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens\n         * took very long). This cannot be solved here for the handler itself (it is the handlers\n         * responsibility to slice hard work), but we can at least schedule a screen update as we\n         * gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          queueMicrotask(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n    this._onWriteParsed.fire();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n * Internal actions of EscapeSequenceParser.\n */\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    this.table.fill(action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected readonly _oscParser: IOscParser;\n  protected readonly _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this.register(toDisposable(() => {\n      this._csiHandlers = Object.create(null);\n      this._executeHandlers = Object.create(null);\n      this._escHandlers = Object.create(null);\n    }));\n    this._oscParser = this.register(new OscParser());\n    this._dcsParser = this.register(new DcsParser());\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing. This is a really bad\n           * condition with screwed up execution order and prolly messed up terminal state,\n           * therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that, as\n           * the pending async handler still might mess up the terminal later. Instead fix the\n           * faulty async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\nexport class BufferNamespaceApi extends Disposable implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n\n  private readonly _onBufferChange = this.register(new EventEmitter<IBufferApi>());\n  public readonly onBufferChange = this._onBufferChange.event;\n\n  constructor(private _core: ICoreTerminal) {\n    super();\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(@IOptionsService optionsService: IOptionsService) {\n    super();\n    this.cols = Math.max(optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = this.register(new BufferSet(optionsService, this));\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    // TODO: This doesn't fire when scrollback changes - add a resize event to BufferSet and forward\n    //       event\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: { [key: string]: ICoreMouseProtocol } = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: { [key: string]: CoreMouseEncoding } = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  },\n  SGR_PIXELS: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.x};${e.y}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService extends Disposable implements ICoreMouseService {\n  private _protocols: { [name: string]: ICoreMouseProtocol } = {};\n  private _encodings: { [name: string]: CoreMouseEncoding } = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  private readonly _onProtocolChange = this.register(new EventEmitter<CoreMouseEventType>());\n  public readonly onProtocolChange =  this._onProtocolChange.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    super();\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n      || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move events at grid or pixel level\n    if (e.action === CoreMouseAction.MOVE\n      && this._lastEvent\n      && this._equalEvents(this._lastEvent, e, this._activeEncoding === 'SGR_PIXELS')\n    ) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): { [event: string]: boolean } {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _equalEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent, pixels: boolean): boolean {\n    if (pixels) {\n      if (e1.x !== e2.x) return false;\n      if (e1.y !== e2.y) return false;\n    } else {\n      if (e1.col !== e2.col) return false;\n      if (e1.row !== e2.row) return false;\n    }\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { clone } from 'common/Clone';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { IBufferService, ICoreService, ILogService, IOptionsService } from 'common/services/Services';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  private readonly _onUserInput = this.register(new EventEmitter<void>());\n  public readonly onUserInput = this._onUserInput.event;\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onRequestScrollToBottom = this.register(new EventEmitter<void>());\n  public readonly onRequestScrollToBottom = this._onRequestScrollToBottom.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (wasUserInput && this._optionsService.rawOptions.scrollOnUserInput && buffer.ybase !== buffer.ydisp) {\n      this._onRequestScrollToBottom.fire();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { css } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDecorationService, IInternalDecoration } from 'common/services/Services';\nimport { SortedList } from 'common/SortedList';\nimport { IColor } from 'common/Types';\nimport { IDecoration, IDecorationOptions, IMarker } from 'xterm';\n\n// Work variables to avoid garbage collection\nlet $xmin = 0;\nlet $xmax = 0;\n\nexport class DecorationService extends Disposable implements IDecorationService {\n  public serviceBrand: any;\n\n  /**\n   * A list of all decorations, sorted by the marker's line value. This relies on the fact that\n   * while marker line values do change, they should all change by the same amount so this should\n   * never become out of order.\n   */\n  private readonly _decorations: SortedList<IInternalDecoration> = new SortedList(e => e?.marker.line);\n\n  private readonly _onDecorationRegistered = this.register(new EventEmitter<IInternalDecoration>());\n  public readonly onDecorationRegistered = this._onDecorationRegistered.event;\n  private readonly _onDecorationRemoved = this.register(new EventEmitter<IInternalDecoration>());\n  public readonly onDecorationRemoved = this._onDecorationRemoved.event;\n\n  public get decorations(): IterableIterator<IInternalDecoration> { return this._decorations.values(); }\n\n  constructor() {\n    super();\n\n    this.register(toDisposable(() => this.reset()));\n  }\n\n  public registerDecoration(options: IDecorationOptions): IDecoration | undefined {\n    if (options.marker.isDisposed) {\n      return undefined;\n    }\n    const decoration = new Decoration(options);\n    if (decoration) {\n      const markerDispose = decoration.marker.onDispose(() => decoration.dispose());\n      decoration.onDispose(() => {\n        if (decoration) {\n          if (this._decorations.delete(decoration)) {\n            this._onDecorationRemoved.fire(decoration);\n          }\n          markerDispose.dispose();\n        }\n      });\n      this._decorations.insert(decoration);\n      this._onDecorationRegistered.fire(decoration);\n    }\n    return decoration;\n  }\n\n  public reset(): void {\n    for (const d of this._decorations.values()) {\n      d.dispose();\n    }\n    this._decorations.clear();\n  }\n\n  public *getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration> {\n    let xmin = 0;\n    let xmax = 0;\n    for (const d of this._decorations.getKeyIterator(line)) {\n      xmin = d.options.x ?? 0;\n      xmax = xmin + (d.options.width ?? 1);\n      if (x >= xmin && x < xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        yield d;\n      }\n    }\n  }\n\n  public forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void {\n    this._decorations.forEachByKey(line, d => {\n      $xmin = d.options.x ?? 0;\n      $xmax = $xmin + (d.options.width ?? 1);\n      if (x >= $xmin && x < $xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        callback(d);\n      }\n    });\n  }\n}\n\nclass Decoration extends Disposable implements IInternalDecoration {\n  public readonly marker: IMarker;\n  public element: HTMLElement | undefined;\n  public get isDisposed(): boolean { return this._isDisposed; }\n\n  public readonly onRenderEmitter = this.register(new EventEmitter<HTMLElement>());\n  public readonly onRender = this.onRenderEmitter.event;\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  private _cachedBg: IColor | undefined | null = null;\n  public get backgroundColorRGB(): IColor | undefined {\n    if (this._cachedBg === null) {\n      if (this.options.backgroundColor) {\n        this._cachedBg = css.toColor(this.options.backgroundColor);\n      } else {\n        this._cachedBg = undefined;\n      }\n    }\n    return this._cachedBg;\n  }\n\n  private _cachedFg: IColor | undefined | null = null;\n  public get foregroundColorRGB(): IColor | undefined {\n    if (this._cachedFg === null) {\n      if (this.options.foregroundColor) {\n        this._cachedFg = css.toColor(this.options.foregroundColor);\n      } else {\n        this._cachedFg = undefined;\n      }\n    }\n    return this._cachedFg;\n  }\n\n  constructor(\n    public readonly options: IDecorationOptions\n  ) {\n    super();\n    this.marker = options.marker;\n    if (this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position) {\n      this.options.overviewRulerOptions.position = 'full';\n    }\n  }\n\n  public override dispose(): void {\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    for (const [key, value] of this._entries.entries()) {\n      callback(key, value);\n    }\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  trace: LogLevelEnum.TRACE,\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService extends Disposable implements ILogService {\n  public serviceBrand: any;\n\n  private _logLevel: LogLevelEnum = LogLevelEnum.OFF;\n  public get logLevel(): LogLevelEnum { return this._logLevel; }\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._updateLogLevel();\n    this.register(this._optionsService.onSpecificOptionChange('logLevel', () => this._updateLogLevel()));\n\n    // For trace logging, assume the latest created log service is valid\n    traceLogger = this;\n  }\n\n  private _updateLogLevel(): void {\n    this._logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, (this._optionsService.options.logger ? '' : LOG_PREFIX) + message, ...optionalParams);\n  }\n\n  public trace(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.TRACE) {\n      this._log(this._optionsService.options.logger?.trace.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.DEBUG) {\n      this._log(this._optionsService.options.logger?.debug.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.INFO) {\n      this._log(this._optionsService.options.logger?.info.bind(this._optionsService.options.logger) ?? console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.WARN) {\n      this._log(this._optionsService.options.logger?.warn.bind(this._optionsService.options.logger) ?? console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.ERROR) {\n      this._log(this._optionsService.options.logger?.error.bind(this._optionsService.options.logger) ?? console.error, message, optionalParams);\n    }\n  }\n}\n\nlet traceLogger: ILogService;\nexport function setTraceLogger(logger: ILogService): void {\n  traceLogger = logger;\n}\n\n/**\n * A decorator that can be used to automatically log trace calls to the decorated function.\n */\nexport function traceCall(_target: any, key: string, descriptor: any): any {\n  if (typeof descriptor.value !== 'function') {\n    throw new Error('not supported');\n  }\n  const fnKey = 'value';\n  const fn = descriptor.value;\n  descriptor[fnKey] = function (...args: any[]) {\n    // Early exit\n    if (traceLogger.logLevel !== LogLevelEnum.TRACE) {\n      return fn.apply(this, args);\n    }\n\n    traceLogger.trace(`GlyphRenderer#${fn.name}(${args.map(e => JSON.stringify(e)).join(', ')})`);\n    const result = fn.apply(this, args);\n    traceLogger.trace(`GlyphRenderer#${fn.name} return`, result);\n    return result;\n  };\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { isMac } from 'common/Platform';\nimport { CursorStyle, IDisposable } from 'common/Types';\nimport { FontWeight, IOptionsService, ITerminalOptions } from 'common/services/Services';\n\nexport const DEFAULT_OPTIONS: Readonly<Required<ITerminalOptions>> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  cursorInactiveStyle: 'outline',\n  customGlyphs: true,\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  ignoreBracketedPasteMode: false,\n  lineHeight: 1.0,\n  letterSpacing: 0,\n  linkHandler: null,\n  logLevel: 'info',\n  logger: null,\n  scrollback: 1000,\n  scrollOnUserInput: true,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  smoothScrollDuration: 0,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: false,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  windowOptions: {},\n  windowsMode: false,\n  windowsPty: {},\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false,\n  overviewRulerWidth: 0\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService extends Disposable implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: Required<ITerminalOptions>;\n  public options: Required<ITerminalOptions>;\n\n  private readonly _onOptionChange = this.register(new EventEmitter<keyof ITerminalOptions>());\n  public readonly onOptionChange = this._onOptionChange.event;\n\n  constructor(options: Partial<ITerminalOptions>) {\n    super();\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (value: ITerminalOptions[T]) => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (eventKey === key) {\n        listener(this.rawOptions[key]);\n      }\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (keys.indexOf(eventKey) !== -1) {\n        listener();\n      }\n    });\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'cursorStyle':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        if (!isCursorStyle(value)) {\n          throw new Error(`\"${value}\" is not a valid value for ${key}`);\n        }\n        break;\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n        break;\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n      case 'windowsPty':\n        value = value ?? {};\n        break;\n    }\n    return value;\n  }\n}\n\nfunction isCursorStyle(value: unknown): value is CursorStyle {\n  return value === 'block' || value === 'underline' || value === 'bar';\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, IOscLinkService } from 'common/services/Services';\nimport { IMarker, IOscLinkData } from 'common/Types';\n\nexport class OscLinkService implements IOscLinkService {\n  public serviceBrand: any;\n\n  private _nextId = 1;\n\n  /**\n   * A map of the link key to link entry. This is used to add additional lines to links with ids.\n   */\n  private _entriesWithId: Map<string, IOscLinkEntryWithId> = new Map();\n\n  /**\n   * A map of the link id to the link entry. The \"link id\" (number) which is the numberic\n   * representation of a unique link should not be confused with \"id\" (string) which comes in with\n   * `id=` in the OSC link's properties.\n   */\n  private _dataByLinkId: Map<number, IOscLinkEntryNoId | IOscLinkEntryWithId> = new Map();\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n  }\n\n  public registerLink(data: IOscLinkData): number {\n    const buffer = this._bufferService.buffer;\n\n    // Links with no id will only ever be registered a single time\n    if (data.id === undefined) {\n      const marker = buffer.addMarker(buffer.ybase + buffer.y);\n      const entry: IOscLinkEntryNoId = {\n        data,\n        id: this._nextId++,\n        lines: [marker]\n      };\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n      this._dataByLinkId.set(entry.id, entry);\n      return entry.id;\n    }\n\n    // Add the line to the link if it already exists\n    const castData = data as Required<IOscLinkData>;\n    const key = this._getEntryIdKey(castData);\n    const match = this._entriesWithId.get(key);\n    if (match) {\n      this.addLineToLink(match.id, buffer.ybase + buffer.y);\n      return match.id;\n    }\n\n    // Create the link\n    const marker = buffer.addMarker(buffer.ybase + buffer.y);\n    const entry: IOscLinkEntryWithId = {\n      id: this._nextId++,\n      key: this._getEntryIdKey(castData),\n      data: castData,\n      lines: [marker]\n    };\n    marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    this._entriesWithId.set(entry.key, entry);\n    this._dataByLinkId.set(entry.id, entry);\n    return entry.id;\n  }\n\n  public addLineToLink(linkId: number, y: number): void {\n    const entry = this._dataByLinkId.get(linkId);\n    if (!entry) {\n      return;\n    }\n    if (entry.lines.every(e => e.line !== y)) {\n      const marker = this._bufferService.buffer.addMarker(y);\n      entry.lines.push(marker);\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    }\n  }\n\n  public getLinkData(linkId: number): IOscLinkData | undefined {\n    return this._dataByLinkId.get(linkId)?.data;\n  }\n\n  private _getEntryIdKey(linkData: Required<IOscLinkData>): string {\n    return `${linkData.id};;${linkData.uri}`;\n  }\n\n  private _removeMarkerFromLink(entry: IOscLinkEntryNoId | IOscLinkEntryWithId, marker: IMarker): void {\n    const index = entry.lines.indexOf(marker);\n    if (index === -1) {\n      return;\n    }\n    entry.lines.splice(index, 1);\n    if (entry.lines.length === 0) {\n      if (entry.data.id !== undefined) {\n        this._entriesWithId.delete((entry as IOscLinkEntryWithId).key);\n      }\n      this._dataByLinkId.delete(entry.id);\n    }\n  }\n}\n\ninterface IOscLinkEntry<T extends IOscLinkData> {\n  data: T;\n  id: number;\n  lines: IMarker[];\n}\n\ninterface IOscLinkEntryNoId extends IOscLinkEntry<IOscLinkData> {\n}\n\ninterface IOscLinkEntryWithId extends IOscLinkEntry<Required<IOscLinkData>> {\n  key: string;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, CursorInactiveStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler, IWindowsPty, ILogger } from 'xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n  readonly onRequestScrollToBottom: IEvent<void>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasUserInput Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer if option scrollOnUserInput is true.\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<TArgs extends any[]> = TArgs extends [] ? []\n  : TArgs extends [...infer TFirst, infer TLast] ? TLast extends IBrandedService ? GetLeadingNonServiceArgs<TFirst> : TArgs\n    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n  OFF = 5\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  readonly logLevel: LogLevelEnum;\n\n  trace(message: any, ...optionalParams: any[]): void;\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n\n  /**\n   * Options as exposed through the public API, this property uses getters and setters with\n   * validation which makes it safer but slower. {@link rawOptions} should be used for pretty much\n   * all internal usage for performance reasons.\n   */\n  readonly options: Required<ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when any option changes.\n   */\n  readonly onOptionChange: IEvent<keyof ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when a specific option changes, this is a convenience method that is\n   * preferred over {@link onOptionChange} when only a single option is being listened to.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (arg1: Required<ITerminalOptions>[T]) => any): IDisposable;\n\n  /**\n   * Adds an event listener for when a set of specific options change, this is a convenience method\n   * that is preferred over {@link onOptionChange} when multiple options are being listened to and\n   * handled the same way.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  cursorInactiveStyle?: CursorInactiveStyle;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  ignoreBracketedPasteMode?: boolean;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  logger?: ILogger | null;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollOnUserInput?: boolean;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowsPty?: IWindowsPty;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { EventEmitter } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n\n  private readonly _onChange = new EventEmitter<string>();\n  public readonly onChange = this._onChange.event;\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public dispose(): void {\n    this._onChange.dispose();\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { Terminal as TerminalCore } from 'browser/Terminal';\nimport { IBufferRange, ITerminal } from 'browser/Types';\nimport { IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { ITerminalOptions } from 'common/Types';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { IBufferNamespace as IBufferNamespaceApi, IDecoration, IDecorationOptions, IDisposable, ILinkProvider, ILocalizableStrings, IMarker, IModes, IParser, ITerminalAddon, Terminal as ITerminalApi, ITerminalInitOnlyOptions, IUnicodeHandling } from 'xterm';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal extends Disposable implements ITerminalApi {\n  private _core: ITerminal;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: Required<ITerminalOptions>;\n\n  constructor(options?: ITerminalOptions & ITerminalInitOnlyOptions) {\n    super();\n\n    this._core = this.register(new TerminalCore(options));\n    this._addonManager = this.register(new AddonManager());\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.rawOptions.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._core.onKey; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._core.onRender; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onSelectionChange(): IEvent<void> { return this._core.onSelectionChange; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n  public get onWriteParsed(): IEvent<void> { return this._core.onWriteParsed; }\n\n  public get element(): HTMLElement | undefined { return this._core.element; }\n  public get parser(): IParser {\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get textarea(): HTMLTextAreaElement | undefined { return this._core.textarea; }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    if (!this._buffer) {\n      this._buffer = this.register(new BufferNamespaceApi(this._core));\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): Required<ITerminalOptions> {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public blur(): void {\n    this._core.blur();\n  }\n  public focus(): void {\n    this._core.focus();\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public open(parent: HTMLElement): void {\n    this._core.open(parent);\n  }\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n  }\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this._core.registerLinkProvider(linkProvider);\n  }\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    this._checkProposedApi();\n    return this._core.registerCharacterJoiner(handler);\n  }\n  public deregisterCharacterJoiner(joinerId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterCharacterJoiner(joinerId);\n  }\n  public registerMarker(cursorYOffset: number = 0): IMarker {\n    this._verifyIntegers(cursorYOffset);\n    return this._core.registerMarker(cursorYOffset);\n  }\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    this._checkProposedApi();\n    this._verifyPositiveIntegers(decorationOptions.x ?? 0, decorationOptions.width ?? 0, decorationOptions.height ?? 0);\n    return this._core.registerDecoration(decorationOptions);\n  }\n  public hasSelection(): boolean {\n    return this._core.hasSelection();\n  }\n  public select(column: number, row: number, length: number): void {\n    this._verifyIntegers(column, row, length);\n    this._core.select(column, row, length);\n  }\n  public getSelection(): string {\n    return this._core.getSelection();\n  }\n  public getSelectionPosition(): IBufferRange | undefined {\n    return this._core.getSelectionPosition();\n  }\n  public clearSelection(): void {\n    this._core.clearSelection();\n  }\n  public selectAll(): void {\n    this._core.selectAll();\n  }\n  public selectLines(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.selectLines(start, end);\n  }\n  public dispose(): void {\n    super.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public paste(data: string): void {\n    this._core.paste(data);\n  }\n  public refresh(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.refresh(start, end);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public clearTextureAtlas(): void {\n    this._core.clearTextureAtlas();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    this._addonManager.loadAddon(this, addon);\n  }\n  public static get strings(): ILocalizableStrings {\n    return Strings;\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n\n  private _verifyPositiveIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value && (value === Infinity || isNaN(value) || value % 1 !== 0 || value < 0)) {\n        throw new Error('This API only accepts positive integers');\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "a", "i", "self", "e", "t", "s", "r", "n", "o", "AccessibilityManager", "Disposable", "_terminal", "_renderService", "_liveRegionLineCount", "_charsToConsume", "_charsToAnnounce", "this", "_accessibilityContainer", "document", "createElement", "classList", "_rowContainer", "setAttribute", "add", "_rowElements", "_createAccessibilityTreeNode", "appendChild", "_topBoundaryFocusListener", "_handleBoundaryFocus", "_bottomBoundaryFocusListener", "addEventListener", "length", "_refreshRowsDimensions", "_liveRegion", "register", "TimeBasedDebouncer", "_renderRows", "element", "insertAdjacentElement", "onResize", "_handleResize", "rows", "onRender", "_refreshRows", "start", "onScroll", "onA11yChar", "char", "onLineFeed", "_handleChar", "onA11yTab", "spaceCount", "_handleTab", "onKey", "_handleKey", "key", "_clearLiveRegion", "onDimensionsChange", "_screenDprMonitor", "ScreenDprMonitor", "window", "setListener", "addDisposableDomListener", "toDisposable", "remove", "shift", "MAX_ROWS_TO_READ", "textContent", "tooMuchOutput", "isMac", "parentNode", "setTimeout", "test", "push", "keyChar", "_liveRegionDebouncer", "end", "buffer", "setSize", "toString", "translateBufferLineToString", "ydisp", "posInSet", "innerText", "_announceCharacters", "position", "target", "getAttribute", "lines", "relatedTarget", "pop", "bottomBoundaryElement", "topBoundaryElement", "boundaryElement", "removeChild", "removeEventListener", "newElement", "unshift", "scrollLines", "preventDefault", "stopImmediatePropagation", "tabIndex", "_refreshRowDimensions", "dimensions", "cell", "style", "width", "height", "IRenderService", "text", "replace", "bracketedPasteMode", "optionsService", "bracketTextForPaste", "prepareTextForTerminal", "rawOptions", "ignoreBracketedPasteMode", "value", "moveTextAreaUnderMouseCursor", "pos", "getBoundingClientRect", "clientX", "top", "left", "zIndex", "ev", "clipboardData", "setData", "selectionService", "selectionText", "stopPropagation", "getData", "textarea", "coreService", "screenElement", "rightClickSelect", "select", "_color", "TwoKeyMap", "_css", "set", "bg", "get", "fg", "clear", "options", "node", "disposed", "currentLink", "_currentLink", "super", "_bufferService", "_linkProviders", "_linkCacheDisposables", "_wasResized", "_activeLine", "_onShowLinkUnderline", "EventEmitter", "onShowLinkUnderline", "_onHideLinkUnderline", "onHideLinkUnderline", "event", "getDisposeArrayDisposable", "_lastMouseEvent", "_clearCurrentLink", "linkProvider", "dispose", "indexOf", "splice", "providerIndex", "_element", "_mouseService", "mouseService", "renderService", "_isMouseOut", "_handleMouseMove", "bind", "_positionFromMouseEvent", "composedPath", "contains", "_lastBufferCell", "x", "_handleHover", "_linkAtPosition", "link", "_askForLink", "useLineCache", "_activeProviderReplies", "forEach", "reply", "linkWithState", "Map", "y", "linkProvided", "entries", "_checkLinkProviderResult", "provideLinks", "links", "map", "size", "_removeIntersectingLinks", "replies", "providerReply", "range", "cols", "startX", "index", "hasLinkBefore", "j", "has", "linkAtPosition", "_handleNewLink", "find", "_mouseDownLink", "startRow", "_linkLeave", "undefined", "disposeArray", "decorations", "underline", "pointerCursor", "isHovered", "_linkHover", "Object", "defineProperties", "state", "v", "toggle", "_fireUnderlineEvent", "onRenderedViewportChange", "hover", "scrollOffset", "_createLinkUnderlineEvent", "fire", "leave", "current", "x2", "y2", "Linkifier2", "IBufferService", "promptLabel", "OscLinkProvider", "_optionsService", "_oscLinkService", "callback", "line", "result", "linkHandler", "CellData", "lineLength", "getTrimmedLength", "currentLinkId", "currentStart", "finishLink", "loadCell", "hasExtendedAttrs", "extended", "urlId", "getLinkData", "uri", "allowNonHttpProtocols", "includes", "protocol", "ignoreLink", "activate", "defaultActivate", "confirm", "newWindow", "open", "opener", "location", "console", "IOptionsService", "constructor", "_renderCallback", "_parentWindow", "_refreshCallbacks", "_animationFrame", "cancelAnimationFrame", "requestAnimationFrame", "_innerRefresh", "_rowCount", "rowCount", "rowStart", "rowEnd", "_rowStart", "Math", "min", "_rowEnd", "max", "_runRefreshCallbacks", "_currentDevicePixelRatio", "devicePixelRatio", "clearListener", "listener", "_listener", "_outerListener", "_updateDpr", "_resolutionMediaMatchList", "removeListener", "matchMedia", "addListener", "Terminal", "CoreTerminal", "_onFocus", "_onBlur", "_onA11yCharEmitter", "_onA11yTabEmitter", "_onWillOpen", "browser", "Browser", "_keyDownHandled", "_keyDownSeen", "_keyPressHandled", "_unprocessedDeadKey", "_accessibilityManager", "MutableDisposable", "_onCursorMove", "onCursorMove", "_onKey", "_onRender", "_onSelectionChange", "onSelectionChange", "_onTitleChange", "onTitleChange", "_onBell", "onBell", "_setup", "linkifier2", "_instantiationService", "createInstance", "registerLinkProvider", "_decorationService", "DecorationService", "setService", "IDecorationService", "_inputHandler", "onRequestBell", "onRequestRefreshRows", "refresh", "onRequestSendFocus", "_reportFocus", "onRequestReset", "reset", "onRequestWindowsOptionsReport", "_reportWindowsOptions", "type", "_handleColorEvent", "forwardEvent", "_afterResize", "_customKeyEventHandler", "_themeService", "req", "ident", "acc", "color", "toColorRGB", "colors", "ansi", "triggerDataEvent", "C0", "ESC", "toRgbString", "C1_ESCAPED", "ST", "modifyColors", "rgba", "toColor", "buffers", "focus", "preventScroll", "_handleTextAreaFocus", "decPrivateModes", "sendFocus", "updateCursorStyle", "_showCursor", "blur", "isCursorInViewport", "_compositionHelper", "isComposing", "cursorY", "ybase", "bufferLine", "getWidth", "css", "lineHeight", "hasSelection", "_selectionService", "handlePasteEvent", "pasteHandlerWrapper", "isFirefox", "button", "rightClickHandler", "rightClickSelectsWord", "isLinux", "_keyUp", "_keyDown", "_keyPress", "compositionstart", "compositionupdate", "compositionend", "_inputEvent", "updateCompositionElements", "parent", "isConnected", "debug", "ownerDocument", "dir", "fragment", "createDocumentFragment", "_viewportElement", "_viewportScrollArea", "_helperContainer", "isChromeOS", "_coreBrowserService", "CoreBrowserService", "_document", "defaultView", "ICoreBrowserService", "_handleTextAreaBlur", "_charSizeService", "CharSizeService", "ICharSizeService", "ThemeService", "IThemeService", "_characterJoinerService", "CharacterJoinerService", "ICharacterJoinerService", "RenderService", "resize", "_compositionView", "CompositionHelper", "hasRenderer", "setRenderer", "MouseService", "viewport", "Viewport", "onRequestScrollLines", "amount", "onRequestSyncScrollBar", "handleCursorMove", "_syncTextArea", "handleResize", "onBlur", "handleBlur", "onFocus", "handleFocus", "syncScrollArea", "SelectionService", "ISelectionService", "suppressScrollEvent", "onRequestRedraw", "handleSelectionChanged", "columnSelectMode", "onLinuxMouseSelection", "attachToDom", "BufferDecorationRenderer", "handleMouseDown", "areMouseEventsActive", "enable", "screenReaderMode", "onSpecificOptionChange", "_handleScreenReaderModeOptionChange", "overviewRulerWidth", "_overviewRulerRenderer", "OverviewRulerRenderer", "measure", "_initGlobal", "bindMouse", "DomRenderer", "getMouseReportCoords", "overrideType", "action", "but", "buttons", "getLinesScrolled", "deltaY", "coreMouseService", "triggerMouseEvent", "col", "ctrl", "ctrlKey", "alt", "shiftKey", "mouseup", "wheel", "mousemove", "requestedEvents", "mousedrag", "cancel", "onProtocolChange", "events", "logLevel", "_logService", "explainEvents", "disable", "el", "passive", "activeProtocol", "shouldForceSelection", "hasScrollback", "applicationCursorKeys", "data", "abs", "handleTouchStart", "handleTouchMove", "shouldColumnSelect", "isCursorInitialized", "source", "disp", "paste", "attachCustomKeyEventHandler", "customKeyEventHandler", "handler", "Error", "deregisterCharacterJoiner", "joinerId", "deregister", "markers", "cursorYOffset", "decorationOptions", "registerDecoration", "column", "setSelection", "row", "selectionStart", "selectionEnd", "clearSelection", "selectAll", "macOptionIsMeta", "keydown", "scrollOnUserInput", "scrollToBottom", "shouldIgnoreComposition", "evaluateKeyboardEvent", "scrollCount", "_isThirdLevelShift", "altKey", "metaKey", "isWindows", "getModifierState", "thirdLevelKey", "keyCode", "charCode", "which", "String", "fromCharCode", "inputType", "composed", "hasValidSize", "clearAllMarkers", "getBlankLine", "DEFAULT_ATTR_DATA", "_onScroll", "clearTextureAtlas", "WindowsOptionsReportType", "GET_WIN_SIZE_PIXELS", "canvasWidth", "toFixed", "canvas", "canvasHeight", "GET_CELL_SIZE_PIXELS", "cellWidth", "cellHeight", "cancelEvents", "_debounceThresholdMS", "_lastRefreshMs", "_additionalRefreshRequested", "_refreshTimeoutID", "clearTimeout", "now", "elapsed", "waitPeriodBeforeTrailingRefresh", "Date", "_scrollArea", "_currentRowHeight", "_currentDeviceCellHeight", "_lastRecordedBufferLength", "_lastRecordedViewportHeight", "_lastRecordedBufferHeight", "_lastTouchY", "_lastScrollTop", "_wheelPartialScroll", "_refreshAnimationFrame", "_ignoreNextScrollEvent", "_smoothScrollState", "startTime", "_onRequestScrollLines", "scrollBarWidth", "offsetWidth", "_handleScroll", "_activeBuffer", "onBufferActivate", "activeBuffer", "_renderDimensions", "_handleThemeChange", "onChangeColors", "backgroundColor", "background", "device", "offsetHeight", "round", "newBufferHeight", "scrollTop", "_refresh", "offsetParent", "_isDisposed", "origin", "percent", "_smoothScrollPercent", "_smoothScroll", "_clearSmoothScrollState", "smoothScrollDuration", "scrollPosFromTop", "cancelable", "_getPixelsScrolled", "scrollHeight", "_bubbleScroll", "h", "_applyScrollModifier", "deltaMode", "WheelEvent", "DOM_DELTA_LINE", "DOM_DELTA_PAGE", "endLine", "isWrapped", "currentLine", "translateToString", "div", "bufferElements", "c", "DOM_DELTA_PIXEL", "floor", "fastScrollModifier", "modifier", "fastScrollSensitivity", "scrollSensitivity", "pageY", "touches", "_screenElement", "_decorationElements", "_altBufferIsActive", "_dimensionsChanged", "_container", "_doRefreshDecorations", "_queueRefresh", "onDecorationRegistered", "onDecorationRemoved", "decoration", "_removeDecoration", "addRefreshCallback", "_renderDecoration", "_refreshStyle", "layer", "marker", "_refreshXPosition", "active", "display", "onRenderEmitter", "_createElement", "onDispose", "delete", "anchor", "_zones", "_zonePool", "_zonePoolIndex", "_linePadding", "right", "overviewRulerOptions", "z", "_lineIntersectsZone", "_lineAdjacentToZone", "_addLineToZone", "startBufferLine", "endBufferLine", "setPadding", "zone", "full", "center", "_width", "_coreBrowseService", "ColorZoneStore", "_shouldUpdateDimensions", "_shouldUpdateAnchor", "_lastKnownBufferLength", "_canvas", "_refreshCanvasDimensions", "parentElement", "insertBefore", "ctx", "getContext", "_ctx", "_registerDecorationListeners", "_registerBufferChangeListeners", "_registerDimensionChangeListeners", "normal", "_refreshDrawHeightConstants", "_refreshColorZonePadding", "_containerHeight", "clientHeight", "outerWidth", "innerWidth", "ceil", "drawWidth", "drawX", "dpr", "drawHeight", "_colorZoneStore", "_refreshDrawConstants", "clearRect", "lineWidth", "zones", "_renderColorZone", "fillStyle", "fillRect", "updateCanvasDimensions", "updateAnchor", "_refreshDecorations", "_isComposing", "_coreService", "_textarea", "_isSendingComposition", "_compositionPosition", "_dataAlreadySent", "_finalizeComposition", "_handleAnyTextareaChanges", "waitForPropagation", "input", "substring", "currentCompositionPosition", "oldValue", "DEL", "dontRecurse", "cursorTop", "fontFamily", "fontSize", "compositionViewBounds", "ICoreService", "getCoordsRelativeToElement", "parseInt", "topPadding", "getPropertyValue", "clientY", "rect", "colCount", "hasValidCharSize", "coords", "startY", "applicationCursor", "bufferService", "targetY", "rowsToMove", "endRow", "wrappedRows", "wrappedRowsForRow", "verticalDirection", "sequence", "currentRow", "lineWraps", "endCol", "currentCol", "bufferStr", "startCol", "count", "rpt", "targetX", "direction", "horizontalDirection", "repeat", "rowDifference", "FOCUS_CLASS", "_linkifier2", "_terminalClass", "nextTerminalId", "ROW_CONTAINER_CLASS", "_refreshRowElements", "_selectionContainer", "SELECTION_CLASS", "createRenderDimensions", "_updateDimensions", "onOptionChange", "_handleOptionsChanged", "_injectCss", "_rowFactory", "DomRendererRowFactory", "_handleLinkHover", "_handleLinkLeave", "_themeStyleElement", "_dimensionsStyleElement", "_widthCache", "WidthCache", "fontWeight", "fontWeightBold", "_setDefaultSpacing", "letterSpacing", "overflow", "_terminalSelector", "styles", "foreground", "multiplyOpacity", "cursor", "cursorAccent", "cursorWidth", "selectionBackgroundOpaque", "selectionInactiveBackgroundOpaque", "FG_CLASS_PREFIX", "BG_CLASS_PREFIX", "INVERTED_DEFAULT_COLOR", "opaque", "spacing", "defaultSpacing", "l", "handleDevicePixelRatioChange", "d", "handleCharSizeChanged", "renderRows", "replaceChildren", "viewportEndRow", "viewportCappedStartRow", "viewportCappedEndRow", "isXFlipped", "_createSelectionElement", "documentFragment", "middleRowsCount", "colStart", "colEnd", "setFont", "cursorInactiveStyle", "rowElement", "cursorAbsoluteY", "_setCellUnderline", "y1", "x1", "enabled", "cursorX", "cursorBlink", "cursorStyle", "bufferline", "IInstantiationService", "_workCell", "_columnSelectMode", "_selectionStart", "_selectionEnd", "lineData", "isCursorRow", "linkStart", "elements", "joinedRanges", "getJoinedCharacters", "getNoBgTrimmedLength", "oldFg", "oldExt", "oldLinkHover", "lastCharX", "JoinedCellData", "forEachDecorationAtCell", "isDecorated", "WHITESPACE_CELL_CHAR", "isUnderline", "isOverline", "chars", "isBold", "isItalic", "isInSelection", "oldIsInSelection", "oldBg", "selectionForeground", "isLinkHover", "charElement", "ext", "isCursorHidden", "classes", "getChars", "underlineStyle", "isUnderlineColorDefault", "isUnderlineColorRGB", "getUnderlineColor", "join", "textDecorationColor", "textDecoration", "getFgColorMode", "getBgColor", "temp", "backgroundColorRGB", "foregroundColorRGB", "isTop", "bgOverride", "_addStyle", "resolvedBg", "fgColorMode", "drawBoldTextInBrightColors", "_applyMinimumContrast", "isInverse", "className", "isJoined", "cellAmount", "fgOverride", "minimumContrastRatio", "excludeFromContrastRatioDemands", "getCode", "cache", "getColor", "isDim", "ensureContrastRatio", "setColor", "adjustedColor", "halfContrastCache", "contrastCache", "padChar", "_flat", "Float32Array", "_fontSize", "_weight", "_weightBold", "_measureElements", "whiteSpace", "fontKerning", "regular", "bold", "italic", "fontStyle", "boldItalic", "body", "_holey", "font", "_font", "weight", "weightBold", "cp", "variant", "_measure", "DIM_OPACITY", "TEXT_BASELINE", "isLegacyEdge", "codepoint", "_", "isPowerlineGlyph", "u", "f", "isBoxOrBlockGlyph", "isSelectAllActive", "selectionStartLength", "finalSelectionStart", "areSelectionValuesReversed", "startPlusLength", "b", "_onCharSizeChange", "onCharSizeChange", "_measureStrategy", "DomMeasureStrategy", "onMultipleOptionChange", "_parentElement", "_result", "_measureElement", "geometry", "Number", "AttributeData", "content", "firstCell", "setFromCharData", "_characterJoiners", "_nextCharacterJoinerId", "joiner", "lineStr", "rangeAttrFG", "getFg", "rangeAttrBG", "getBg", "_getJoinedRanges", "rangeStartStringIndex", "endIndex", "error", "joinerRanges", "_mergeRanges", "_stringRangesToCellRanges", "ranges", "currentRangeIndex", "currentRangeStarted", "currentStringIndex", "currentRange", "getString", "newRange", "inRange", "_isFocused", "_cachedIsFocused", "isFocused", "hasFocus", "queueMicrotask", "getCoords", "_renderer", "themeService", "_pausedResizeTask", "DebouncedIdleTask", "_isPaused", "_isNextRenderRedrawOnly", "_needsSelectionRefresh", "_canvasWidth", "_canvasHeight", "_selectionState", "_onDimensionsChange", "_onRenderedViewportChange", "_onRefreshRequest", "onRefreshRequest", "_renderDebouncer", "RenderDebouncer", "_fullRefresh", "decorationService", "coreBrowserService", "IntersectionObserver", "_handleIntersectionChange", "threshold", "observe", "observer", "disconnect", "isIntersecting", "intersectionRatio", "_needsFullRefresh", "flush", "refreshRows", "isRedrawOnly", "_fireOnCanvasResize", "RegExp", "_linkifier", "_dragScrollAmount", "_enabled", "_mouseDownTimeStamp", "_oldHasSelection", "_oldSelectionStart", "_oldSelectionEnd", "_onLinuxMouseSelection", "_onRedrawRequest", "_mouseMoveListener", "_mouseUpListener", "_handleMouseUp", "onUserInput", "_trimListener", "_handleTrim", "_handleBufferActivate", "_model", "SelectionModel", "_activeSelectionMode", "_removeMouseDownListeners", "finalSelectionEnd", "lineText", "startRowEndCol", "ALL_NON_BREAKING_SPACE_REGEX", "_getMouseBufferCoords", "_areCoordsInSelection", "isCellInSelection", "allowWhitespaceOnlySelection", "getRangeLength", "_selectWordAt", "handleTrim", "terminalHeight", "offset", "macOptionClickForcesSelection", "timeStamp", "_handleIncrementalClick", "detail", "_handleSingleClick", "_handleDoubleClick", "_handleTripleClick", "_addMouseDownListeners", "_dragScrollIntervalTimer", "setInterval", "_dragScroll", "clearInterval", "hasWidth", "_selectWordAtCursor", "_selectLineAt", "_selectToWordAt", "_getMouseEventScrollAmount", "timeElapsed", "altClickMovesCursor", "coordinates", "moveToCellSequence", "_fireEventIfSelectionChanged", "_fireOnSelectionChange", "onTrim", "charIndex", "_isClickInSelection", "_getWordAt", "followWrappedLinesAbove", "followWrappedLinesBelow", "startIndex", "_convertViewportColToCharacterIndex", "charOffset", "leftLongCharOffset", "rightLongCharOffset", "charAt", "_isCharWordSeparator", "leftWideCharCount", "rightWideCharCount", "trim", "getCodePoint", "previousBufferLine", "previousLineWordPosition", "nextBufferLine", "nextLineWordPosition", "wordPosition", "wordSeparator", "getWrappedRangeForLine", "wrappedRange", "first", "last", "IMouseService", "createDecorator", "DEFAULT_CURSOR", "DEFAULT_SELECTION", "DEFAULT_ANSI_COLORS", "channels", "toCss", "toRgba", "_colors", "_contrastCache", "ColorContrastCache", "_halfContrastCache", "_onChangeColors", "DEFAULT_CURSOR_ACCENT", "selectionBackgroundTransparent", "blend", "DEFAULT_BACKGROUND", "selectionInactiveBackgroundTransparent", "slice", "_updateRestoreColors", "theme", "_setTheme", "parseColor", "selectionBackground", "selectionInactiveBackground", "NULL_COLOR", "isOpaque", "opacity", "red", "magenta", "cyan", "brightBlack", "brightRed", "brightGreen", "brightYellow", "brightBlue", "brightMagenta", "brightCyan", "brightWhite", "extendedAnsi", "slot", "_restoreColor", "_restoreColors", "fallback", "cssString", "CircularList", "_maxLength", "onDeleteEmitter", "onDelete", "onInsertEmitter", "onInsert", "onTrimEmitter", "Array", "_startIndex", "_length", "maxLength", "newMaxLength", "_getCyclicIndex", "_array", "newLength", "isFull", "deleteCount", "items", "countToTrim", "expandListBy", "clonedObject", "isArray", "val", "$g", "rgb", "contrastRatio", "l2", "toPaddedHex", "g", "$r", "toChannels", "$a", "bgR", "fgR", "fgB", "bgB", "ratio", "$b", "rgbaColor", "factor", "$litmusColor", "willReadFrequently", "globalCompositeOperation", "createLinearGradient", "match", "$ctx", "getImageData", "relativeLuminance2", "rs", "pow", "gs", "bs", "relativeLuminance", "reduceLuminance", "bgRgba", "bgG", "fgG", "fgRgba", "cr", "fgL", "bgL", "resultA", "resultARatio", "increaseLuminance", "resultB", "hasWriteSyncWarnHappened", "_onScrollApi", "_windowsWrappingHeuristics", "_onBinary", "onBinary", "_onData", "onData", "_onLineFeed", "_onResize", "_onWriteParsed", "onWriteParsed", "InstantiationService", "OptionsService", "BufferService", "LogService", "ILogService", "CoreService", "CoreMouseService", "ICoreMouseService", "unicodeService", "UnicodeService", "IUnicodeService", "_charsetService", "CharsetService", "ICharsetService", "OscLinkService", "IOscLinkService", "InputHandler", "onRequestScrollToBottom", "_writeBuffer", "handleUserInput", "_handleWindowsPtyOptionChange", "markRangeDirty", "scrollBottom", "WriteBuffer", "maxSubsequentCalls", "WARN", "warn", "writeSync", "isNaN", "MINIMUM_COLS", "MINIMUM_ROWS", "scroll", "eraseAttr", "pageCount", "scrollAmount", "id", "registerEscHandler", "registerOscHandler", "windowsPty", "buildNumber", "_enableWindowsWrappingHeuristics", "updateWindowsModeWrappedState", "registerCsiHandler", "final", "_listeners", "_disposed", "_event", "arg1", "arg2", "clearListeners", "from", "GLEVEL", "paramToWindowOption", "opts", "setWinLines", "restoreWin", "minimizeWin", "setWinPosition", "setWinSizePixels", "raiseWin", "lowerWin", "refreshWin", "setWinSizeChars", "maximizeWin", "fullscreenWin", "getWinState", "getWinPosition", "getWinSizePixels", "getScreenSizePixels", "getCellSizePixels", "getWinSizeChars", "getScreenSizeChars", "getIconTitle", "popTitle", "_curAttrData", "_unicodeService", "EscapeSequenceParser", "_coreMouseService", "_parser", "_parseBuffer", "Uint32Array", "_stringDecoder", "StringToUtf32", "_utf8Decoder", "Utf8ToUtf32", "_windowTitle", "_windowTitleStack", "_iconNameStack", "clone", "_eraseAttrDataInternal", "_onRequestBell", "_onRequestRefreshRows", "_onRequestReset", "_onRequestSendFocus", "_onRequestSyncScrollBar", "_onRequestWindowsOptionsReport", "_onA11yChar", "_onA11yTab", "_onColor", "onColor", "_parseStack", "cursorStartX", "cursorStartY", "decodedLength", "_specialColors", "_dirtyRowTracker", "setCsiHandlerFallback", "identifier", "identToString", "params", "toArray", "setEscHandlerFallback", "setExecuteHandlerFallback", "code", "setOscHandlerFallback", "setDcsHandlerFallback", "payload", "setPrintHandler", "print", "insertChars", "intermediates", "scrollLeft", "cursorUp", "scrollRight", "cursorDown", "cursorForward", "cursorBackward", "cursorNextLine", "cursorPrecedingLine", "cursorCharAbsolute", "cursorPosition", "cursorForwardTab", "eraseInDisplay", "prefix", "eraseInLine", "insertLines", "deleteLines", "deleteChars", "scrollUp", "scrollDown", "eraseChars", "cursorBackwardTab", "charPosAbsolute", "hPositionRelative", "repeatPrecedingCharacter", "sendDeviceAttributesPrimary", "sendDeviceAttributesSecondary", "linePosAbsolute", "vPositionRelative", "hVPosition", "tabClear", "setMode", "setModePrivate", "resetModePrivate", "charAttributes", "deviceStatusPrivate", "softReset", "setScrollRegion", "saveCursor", "windowOptions", "restoreCursor", "insertColumns", "deleteColumns", "selectProtected", "requestMode", "setExecuteHandler", "BEL", "bell", "LF", "lineFeed", "VT", "FF", "carriageReturn", "BS", "backspace", "HT", "tab", "shiftOut", "SI", "shiftIn", "C1", "IND", "NEL", "nextLine", "HTS", "tabSet", "OscHandler", "setTitle", "setIconName", "setOrReportIndexedColor", "setHyperlink", "setOrReportFgColor", "setOrReportBgColor", "setOrReportCursorColor", "restoreIndexedColor", "restoreFgColor", "restoreBgColor", "restoreCursorColor", "reverseIndex", "keypadApplicationMode", "keypadNumericMode", "fullReset", "setgLevel", "selectDefaultCharset", "CHARSETS", "selectCharset", "flag", "screenAlignmentPattern", "setErrorHandler", "registerDcsHandler", "DcsHandler", "requestStatusString", "paused", "p", "Promise", "catch", "err", "promiseResult", "parse", "_logSlowResolvingAsync", "MAX_PARSEBUFFER_LENGTH", "LogLevelEnum", "prototype", "charCodeAt", "wasPaused", "clearRange", "decode", "subarray", "len", "_preserveStack", "chWidth", "charset", "wraparoundMode", "wraparound", "insertMode", "markDirty", "setCellFromCodePoint", "curAttr", "wcwidth", "stringFromCodePoint", "_getCurrentLinkId", "_eraseAttrData", "insertCells", "getNullCell", "NULL_CELL_CODE", "NULL_CELL_WIDTH", "bufferRow", "addCodepointToCell", "precedingCodepoint", "isCombined", "convertEol", "reverseWraparound", "_restrictCursor", "hasContent", "originalX", "nextStop", "_setCursor", "_moveCursor", "diffToTop", "diffToBottom", "param", "tabs", "prevStop", "replaceCells", "respectProtect", "clearWrap", "clearMarkers", "_eraseInBufferLine", "_resetBufferLine", "scrollBackSize", "trimStart", "scrollBottomRowsOffset", "scrollBottomAbsolute", "deleteCells", "_is", "termName", "setgCharset", "DEFAULT_CHARSET", "applicationKeypad", "activeEncoding", "activateAltBuffer", "resetMode", "modes", "activateNormalBuffer", "b2v", "cs", "dm", "mouseProtocol", "mouseEncoding", "mode", "fromColorRGB", "c3", "_extractColor", "accu", "advance", "hasSubParams", "subparams", "getSubParams", "cSpace", "_updateAttrColor", "attr", "underlineColor", "updateExtended", "_processSGR0", "_processUnderline", "savedX", "savedY", "savedCurAttrData", "savedCharset", "second", "_savedCharset", "_iconName", "slots", "exec", "idx", "isValidColorIndex", "spec", "split", "args", "_createHyperlink", "_finishHyperlink", "findIndex", "startsWith", "idParamIndex", "parsedParams", "registerLink", "_setOrReportSpecialColor", "collectAndFlag", "scrollRegionHeight", "shiftElements", "level", "yOffset", "markAllDirty", "isProtected", "DirtyRowTracker", "disposables", "_disposables", "_value", "array", "_data", "fourth", "isNode", "navigator", "userAgent", "platform", "isSafari", "majorVersion", "isIpad", "isIphone", "_getKey", "_search", "values", "mid", "_tasks", "_start", "_i", "_idleCallback", "_cancelCallback", "_requestCallback", "_process", "timeRemaining", "taskDuration", "longestTask", "deadlineRemaining", "lastDeadlineRemaining", "PriorityTaskQueue", "_createDeadline", "IdleTaskQueue", "requestIdleCallback", "cancelIdleCallback", "_queue", "CHAR_DATA_CODE_INDEX", "lastChar", "WHITESPACE_CELL_CODE", "isBlink", "isStrikethrough", "isFgPalette", "isBgPalette", "getFgColor", "isEmpty", "isFgRGB", "isFgDefault", "_urlId", "_ext", "ExtendedAttrs", "MAX_BUFFER_SIZE", "_hasScrollback", "_nullCell", "fromCharData", "NULL_CELL_CHAR", "_whitespaceCell", "WHITESPACE_CELL_WIDTH", "_isClearing", "_memoryCleanupQueue", "_memoryCleanupPosition", "_cols", "_rows", "_getCorrectBufferLength", "setupTabStops", "getWhitespaceCell", "BufferLine", "relativeY", "correctBufferLength", "scrollback", "fillViewportRows", "fillAttr", "dirtyMemoryLines", "newRows", "windowsMode", "backend", "newCols", "nullCell", "amountToTrim", "addToY", "_isReflowEnabled", "_reflow", "enqueue", "_batchedMemoryCleanup", "counted", "cleanupMemory", "_reflowLarger", "_reflowSmaller", "reflowLargerGetLinesToRemove", "newLayoutResult", "reflowLargerCreateNewLayout", "reflowLargerApplyNewLayout", "layout", "_reflowLargerAdjustViewport", "countRemoved", "wrappedLines", "absoluteY", "reflowSmallerGetNewLineLengths", "linesToAdd", "newLines", "toInsert", "countToInsert", "destLineIndex", "srcCol", "destCol", "copyCellsFrom", "srcLineIndex", "cellsToCopy", "getWrappedLineTrimmedLength", "wrappedLinesIndex", "destLineLengths", "setCell", "viewportAdjustments", "originalLines", "originalLineIndex", "originalLinesLength", "countInsertedSoFar", "nextI", "insertEvents", "nextToInsertIndex", "insertCountEmitted", "tabStopWidth", "_removeMarker", "freeze", "_combined", "_extendedAttrs", "fillCellData", "CHAR_DATA_ATTR_INDEX", "CHAR_DATA_CHAR_INDEX", "CHAR_DATA_WIDTH_INDEX", "$startIndex", "combinedData", "eAttrs", "codePoint", "byteLength", "uint32Cells", "keys", "copyFrom", "newLine", "applyInReverse", "srcData", "trimRight", "bufferCols", "followingLineStartsWithWide", "endsInNull", "bufferAbsoluteY", "toRemove", "srcTrimmedTineLength", "countToRemove", "nextToRemoveIndex", "nextToRemoveStart", "countRemovedSoFar", "newLayout", "newLayoutLines", "oldCols", "reduce", "cellsAvailable", "cellsNeeded", "oldTrimmedLength", "srcLine", "endsWithWide", "BufferSet", "_onBufferActivate", "_normal", "Buffer", "inactiveBuffer", "_alt", "obj", "combined", "DEFAULT_COLOR", "DEFAULT_ATTR", "DEFAULT_EXT", "isDisposed", "Marker", "_nextId", "_onDispose", "disposable", "NUL", "SOH", "ENQ", "ACK", "DC1", "DC2", "DC4", "NAK", "SYN", "ETB", "SUB", "RS", "SP", "PAD", "HOP", "BPH", "SSA", "PLD", "SS2", "DCS", "PU1", "PU2", "STS", "SPA", "EPA", "CSI", "OSC", "APC", "KEYCODE_KEY_MAPPINGS", "applicationCursorMode", "CR", "modifiers", "keyMapping", "keyString", "toUpperCase", "toLowerCase", "GS", "_interim", "startPos", "interim", "Uint8Array", "byte2", "discardInterim", "tmp", "missing", "fill", "fourStop", "byte3", "byte1", "byte4", "table", "version", "BMP_COMBINING", "num", "ucs", "bisearch", "HIGH_COMBINING", "_action", "_callbacks", "_pendingData", "_bufferOffset", "_isSyncWriting", "_syncCalls", "_didUserInput", "chunk", "cb", "_innerWrite", "lastTime", "resolve", "HASH_REX", "bits", "s2", "low", "RGB_REX", "m", "adv", "PAYLOAD_LIMIT", "_handlers", "_active", "EMPTY_HANDLERS", "_ident", "_handlerFb", "_stack", "loopPosition", "fallThrough", "create", "handlerList", "handlerIndex", "clearHandler", "setHandlerFallback", "unhook", "hook", "put", "utf32ToString", "success", "handlerResult", "Params", "addParam", "_handler", "_hitLimit", "_params", "ret", "res", "setDefault", "next", "codes", "VT500_TRANSITION_TABLE", "blueprint", "apply", "PRINTABLES", "addMany", "EXECUTABLES", "_transitions", "handlers", "handlerPos", "transition", "chunkPos", "initialState", "currentState", "_collect", "_printHandlerFb", "_executeHandlerFb", "_csiHandlerFb", "_escHandlerFb", "_errorHandlerFb", "_printHandler", "_executeHandlers", "_escHandlers", "_csiHandlers", "_oscParser", "OscParser", "_dcsParser", "DcsParser", "_errorHandler", "_identifier", "intermediate", "finalRange", "finalCode", "reverse", "clearEscHandler", "registerHandler", "clearOscHandler", "clearErrorHandler", "NON_ASCII_PRINTABLE", "collect", "abort", "addSubParam", "addDigit", "jj", "handlersEsc", "_state", "_id", "_put", "then", "fromArray", "k", "maxSubParamsLength", "Int32Array", "_subParams", "_subParamsLength", "_subParamsIdx", "Uint16Array", "_rejectDigits", "_rejectSubDigits", "_digitIsSub", "newParams", "call", "store", "MAX_VALUE", "_addons", "instance", "loadedAddon", "_wrappedAddonDispose", "_buffer", "init", "BufferLineApiView", "_line", "startColumn", "BufferNamespaceApi", "_core", "_onBufferChange", "onBufferChange", "BufferApiView", "_alternate", "alternate", "provider", "versions", "activeVersion", "isUserScrolling", "_cachedBlankLine", "topRow", "willBufferBeTrimmed", "recycle", "bottomRow", "oldYdisp", "glevel", "_charsets", "DEFAULT_PROTOCOLS", "NONE", "restrict", "X10", "VT200", "ANY", "isSGR", "DEFAULT", "S", "SGR", "eventCode", "SGR_PIXELS", "_protocols", "_encodings", "_activeProtocol", "_activeEncoding", "_lastEvent", "_onProtocolChange", "name", "addProtocol", "addEncoding", "DEFAULT_ENCODINGS", "encoding", "_equalEvents", "report", "triggerBinaryEvent", "down", "up", "drag", "move", "e1", "e2", "_onUserInput", "_onRequestScrollToBottom", "DEFAULT_DEC_PRIVATE_MODES", "disableStdin", "wasUserInput", "$xmax", "_decorations", "SortedList", "_onDecorationRegistered", "_onDecorationRemoved", "insert", "xmin", "getKeyIterator", "xmax", "forEachByKey", "$xmin", "Decoration", "_cachedBg", "_cachedFg", "foregroundColor", "_entries", "_services", "ServiceCollection", "ctor", "getServiceDependencies", "sort", "serviceArgs", "dependency", "serviceDependencies", "optionsKeyToLogLevel", "trace", "TRACE", "DEBUG", "ERROR", "OFF", "_logLevel", "_updateLogLevel", "optionalParams", "_log", "message", "_evalLazyOptionalParams", "logger", "info", "descriptor", "traceLogger", "JSON", "stringify", "fn", "DEFAULT_OPTIONS", "customGlyphs", "allowProposedApi", "allowTransparency", "FONT_WEIGHT_OPTIONS", "_onOptionChange", "defaultOptions", "newValue", "_sanitizeAndValidateOption", "_setupOptions", "eventKey", "propName", "defineProperty", "desc", "_entriesWithId", "addMarker", "entry", "_removeMarkerFromLink", "_dataByLinkId", "_getEntryIdKey", "addLineToLink", "linkId", "linkData", "DI_TARGET", "serviceRegistry", "DI_DEPENDENCIES", "arguments", "decorator", "_providers", "_onChange", "onChange", "UnicodeV6", "defaultProvider", "_activeProvider", "getStringCellWidth", "__webpack_require__", "cachedModule", "moduleId", "__webpack_modules__", "_addonManager", "AddonManager", "_publicOptions", "_checkReadonlyOptions", "setter", "parser", "ParserApi", "_checkProposedApi", "UnicodeApi", "mouseTrackingMode", "applicationCursorKeysMode", "applicationKeypadMode", "originMode", "reverseWraparoundMode", "sendFocusMode", "columns", "_verifyIntegers", "registerCharacterJoiner", "registerMarker", "_verifyPositiveIntegers", "getSelection", "getSelectionPosition", "selectLines", "scrollPages", "scrollToTop", "scrollToLine", "write", "loadAddon", "Infinity"]
}
